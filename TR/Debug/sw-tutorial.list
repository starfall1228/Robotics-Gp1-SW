
sw-tutorial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009210  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ff4  08009398  08009398  00019398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a38c  0800a38c  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a38c  0800a38c  0001a38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a394  0800a394  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a394  0800a394  0001a394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a398  0800a398  0001a398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  0800a39c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200dc  2**0
                  CONTENTS
 10 .bss          0000d8b0  200000e0  200000e0  000200e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2000d990  2000d990  000200e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015f28  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000323c  00000000  00000000  00036034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001238  00000000  00000000  00039270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001100  00000000  00000000  0003a4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ee2  00000000  00000000  0003b5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000169ff  00000000  00000000  0005d48a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8390  00000000  00000000  00073e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013c219  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f5c  00000000  00000000  0013c26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000e0 	.word	0x200000e0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009380 	.word	0x08009380

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000e4 	.word	0x200000e4
 80001c4:	08009380 	.word	0x08009380

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b974 	b.w	8000ed0 <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	4604      	mov	r4, r0
 8000c08:	468e      	mov	lr, r1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d14d      	bne.n	8000caa <__udivmoddi4+0xaa>
 8000c0e:	428a      	cmp	r2, r1
 8000c10:	4694      	mov	ip, r2
 8000c12:	d969      	bls.n	8000ce8 <__udivmoddi4+0xe8>
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	b152      	cbz	r2, 8000c30 <__udivmoddi4+0x30>
 8000c1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1e:	f1c2 0120 	rsb	r1, r2, #32
 8000c22:	fa20 f101 	lsr.w	r1, r0, r1
 8000c26:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c2a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c2e:	4094      	lsls	r4, r2
 8000c30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c34:	0c21      	lsrs	r1, r4, #16
 8000c36:	fbbe f6f8 	udiv	r6, lr, r8
 8000c3a:	fa1f f78c 	uxth.w	r7, ip
 8000c3e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c42:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c46:	fb06 f107 	mul.w	r1, r6, r7
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x64>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c56:	f080 811f 	bcs.w	8000e98 <__udivmoddi4+0x298>
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	f240 811c 	bls.w	8000e98 <__udivmoddi4+0x298>
 8000c60:	3e02      	subs	r6, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1a5b      	subs	r3, r3, r1
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c74:	fb00 f707 	mul.w	r7, r0, r7
 8000c78:	42a7      	cmp	r7, r4
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x92>
 8000c7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c84:	f080 810a 	bcs.w	8000e9c <__udivmoddi4+0x29c>
 8000c88:	42a7      	cmp	r7, r4
 8000c8a:	f240 8107 	bls.w	8000e9c <__udivmoddi4+0x29c>
 8000c8e:	4464      	add	r4, ip
 8000c90:	3802      	subs	r0, #2
 8000c92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c96:	1be4      	subs	r4, r4, r7
 8000c98:	2600      	movs	r6, #0
 8000c9a:	b11d      	cbz	r5, 8000ca4 <__udivmoddi4+0xa4>
 8000c9c:	40d4      	lsrs	r4, r2
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d909      	bls.n	8000cc2 <__udivmoddi4+0xc2>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	f000 80ef 	beq.w	8000e92 <__udivmoddi4+0x292>
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cba:	4630      	mov	r0, r6
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	fab3 f683 	clz	r6, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d14a      	bne.n	8000d60 <__udivmoddi4+0x160>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xd4>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f200 80f9 	bhi.w	8000ec6 <__udivmoddi4+0x2c6>
 8000cd4:	1a84      	subs	r4, r0, r2
 8000cd6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	469e      	mov	lr, r3
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d0e0      	beq.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ce6:	e7dd      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce8:	b902      	cbnz	r2, 8000cec <__udivmoddi4+0xec>
 8000cea:	deff      	udf	#255	; 0xff
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	f040 8092 	bne.w	8000e1a <__udivmoddi4+0x21a>
 8000cf6:	eba1 010c 	sub.w	r1, r1, ip
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2601      	movs	r6, #1
 8000d04:	0c20      	lsrs	r0, r4, #16
 8000d06:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d0a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d0e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d12:	fb0e f003 	mul.w	r0, lr, r3
 8000d16:	4288      	cmp	r0, r1
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x12c>
 8000d1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x12a>
 8000d24:	4288      	cmp	r0, r1
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2c0>
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	1a09      	subs	r1, r1, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d34:	fb07 1110 	mls	r1, r7, r0, r1
 8000d38:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x156>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x154>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2ca>
 8000d54:	4608      	mov	r0, r1
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d5e:	e79c      	b.n	8000c9a <__udivmoddi4+0x9a>
 8000d60:	f1c6 0720 	rsb	r7, r6, #32
 8000d64:	40b3      	lsls	r3, r6
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d72:	fa01 f306 	lsl.w	r3, r1, r6
 8000d76:	431c      	orrs	r4, r3
 8000d78:	40f9      	lsrs	r1, r7
 8000d7a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d82:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d86:	0c20      	lsrs	r0, r4, #16
 8000d88:	fa1f fe8c 	uxth.w	lr, ip
 8000d8c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d90:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d94:	fb08 f00e 	mul.w	r0, r8, lr
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b8>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2bc>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2bc>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4461      	add	r1, ip
 8000db8:	1a09      	subs	r1, r1, r0
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc0:	fb09 1110 	mls	r1, r9, r0, r1
 8000dc4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dcc:	458e      	cmp	lr, r1
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1e2>
 8000dd0:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dda:	458e      	cmp	lr, r1
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dde:	3802      	subs	r0, #2
 8000de0:	4461      	add	r1, ip
 8000de2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dea:	eba1 010e 	sub.w	r1, r1, lr
 8000dee:	42a1      	cmp	r1, r4
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46a6      	mov	lr, r4
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x2a4>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x2a0>
 8000df8:	b15d      	cbz	r5, 8000e12 <__udivmoddi4+0x212>
 8000dfa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dfe:	eb61 010e 	sbc.w	r1, r1, lr
 8000e02:	fa01 f707 	lsl.w	r7, r1, r7
 8000e06:	fa22 f306 	lsr.w	r3, r2, r6
 8000e0a:	40f1      	lsrs	r1, r6
 8000e0c:	431f      	orrs	r7, r3
 8000e0e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e12:	2600      	movs	r6, #0
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	f1c2 0320 	rsb	r3, r2, #32
 8000e1e:	40d8      	lsrs	r0, r3
 8000e20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e24:	fa21 f303 	lsr.w	r3, r1, r3
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4301      	orrs	r1, r0
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e38:	fb07 3610 	mls	r6, r7, r0, r3
 8000e3c:	0c0b      	lsrs	r3, r1, #16
 8000e3e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e42:	fb00 f60e 	mul.w	r6, r0, lr
 8000e46:	429e      	cmp	r6, r3
 8000e48:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x260>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e58:	429e      	cmp	r6, r3
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4463      	add	r3, ip
 8000e60:	1b9b      	subs	r3, r3, r6
 8000e62:	b289      	uxth	r1, r1
 8000e64:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e68:	fb07 3316 	mls	r3, r7, r6, r3
 8000e6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e70:	fb06 f30e 	mul.w	r3, r6, lr
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x28a>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e86:	3e02      	subs	r6, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	1ac9      	subs	r1, r1, r3
 8000e8c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0x104>
 8000e92:	462e      	mov	r6, r5
 8000e94:	4628      	mov	r0, r5
 8000e96:	e705      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000e98:	4606      	mov	r6, r0
 8000e9a:	e6e3      	b.n	8000c64 <__udivmoddi4+0x64>
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	e6f8      	b.n	8000c92 <__udivmoddi4+0x92>
 8000ea0:	454b      	cmp	r3, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f8>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eac:	3801      	subs	r0, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f8>
 8000eb0:	4646      	mov	r6, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x28a>
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1e2>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x260>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b8>
 8000ec0:	3b02      	subs	r3, #2
 8000ec2:	4461      	add	r1, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x12c>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e709      	b.n	8000cde <__udivmoddi4+0xde>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x156>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <MX_CAN1_Init+0x64>)
 8000eda:	4a18      	ldr	r2, [pc, #96]	; (8000f3c <MX_CAN1_Init+0x68>)
 8000edc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <MX_CAN1_Init+0x64>)
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_CAN1_Init+0x64>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <MX_CAN1_Init+0x64>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_CAN1_Init+0x64>)
 8000ef2:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000ef6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_CAN1_Init+0x64>)
 8000efa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000efe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f00:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <MX_CAN1_Init+0x64>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_CAN1_Init+0x64>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f0c:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <MX_CAN1_Init+0x64>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_CAN1_Init+0x64>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f18:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <MX_CAN1_Init+0x64>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_CAN1_Init+0x64>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <MX_CAN1_Init+0x64>)
 8000f26:	f003 fba9 	bl	800467c <HAL_CAN_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000f30:	f002 fcac 	bl	800388c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200001dc 	.word	0x200001dc
 8000f3c:	40006400 	.word	0x40006400

08000f40 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <MX_CAN2_Init+0x64>)
 8000f46:	4a18      	ldr	r2, [pc, #96]	; (8000fa8 <MX_CAN2_Init+0x68>)
 8000f48:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8000f4a:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <MX_CAN2_Init+0x64>)
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <MX_CAN2_Init+0x64>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <MX_CAN2_Init+0x64>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <MX_CAN2_Init+0x64>)
 8000f5e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000f62:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <MX_CAN2_Init+0x64>)
 8000f66:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f6a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <MX_CAN2_Init+0x64>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <MX_CAN2_Init+0x64>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <MX_CAN2_Init+0x64>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <MX_CAN2_Init+0x64>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000f84:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <MX_CAN2_Init+0x64>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <MX_CAN2_Init+0x64>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000f90:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <MX_CAN2_Init+0x64>)
 8000f92:	f003 fb73 	bl	800467c <HAL_CAN_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000f9c:	f002 fc76 	bl	800388c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000204 	.word	0x20000204
 8000fa8:	40006800 	.word	0x40006800

08000fac <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08c      	sub	sp, #48	; 0x30
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 031c 	add.w	r3, r7, #28
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a43      	ldr	r2, [pc, #268]	; (80010d8 <HAL_CAN_MspInit+0x12c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d136      	bne.n	800103c <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000fce:	4b43      	ldr	r3, [pc, #268]	; (80010dc <HAL_CAN_MspInit+0x130>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	4a41      	ldr	r2, [pc, #260]	; (80010dc <HAL_CAN_MspInit+0x130>)
 8000fd6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000fd8:	4b40      	ldr	r3, [pc, #256]	; (80010dc <HAL_CAN_MspInit+0x130>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d10d      	bne.n	8000ffc <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61bb      	str	r3, [r7, #24]
 8000fe4:	4b3e      	ldr	r3, [pc, #248]	; (80010e0 <HAL_CAN_MspInit+0x134>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	4a3d      	ldr	r2, [pc, #244]	; (80010e0 <HAL_CAN_MspInit+0x134>)
 8000fea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fee:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff0:	4b3b      	ldr	r3, [pc, #236]	; (80010e0 <HAL_CAN_MspInit+0x134>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff8:	61bb      	str	r3, [r7, #24]
 8000ffa:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	4b37      	ldr	r3, [pc, #220]	; (80010e0 <HAL_CAN_MspInit+0x134>)
 8001002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001004:	4a36      	ldr	r2, [pc, #216]	; (80010e0 <HAL_CAN_MspInit+0x134>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6313      	str	r3, [r2, #48]	; 0x30
 800100c:	4b34      	ldr	r3, [pc, #208]	; (80010e0 <HAL_CAN_MspInit+0x134>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001018:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800101c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800102a:	2309      	movs	r3, #9
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	4619      	mov	r1, r3
 8001034:	482b      	ldr	r0, [pc, #172]	; (80010e4 <HAL_CAN_MspInit+0x138>)
 8001036:	f004 fc8d 	bl	8005954 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800103a:	e048      	b.n	80010ce <HAL_CAN_MspInit+0x122>
  else if(canHandle->Instance==CAN2)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a29      	ldr	r2, [pc, #164]	; (80010e8 <HAL_CAN_MspInit+0x13c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d143      	bne.n	80010ce <HAL_CAN_MspInit+0x122>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <HAL_CAN_MspInit+0x134>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	4a24      	ldr	r2, [pc, #144]	; (80010e0 <HAL_CAN_MspInit+0x134>)
 8001050:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001054:	6413      	str	r3, [r2, #64]	; 0x40
 8001056:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <HAL_CAN_MspInit+0x134>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <HAL_CAN_MspInit+0x130>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	3301      	adds	r3, #1
 8001068:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <HAL_CAN_MspInit+0x130>)
 800106a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800106c:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <HAL_CAN_MspInit+0x130>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d10d      	bne.n	8001090 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <HAL_CAN_MspInit+0x134>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	4a18      	ldr	r2, [pc, #96]	; (80010e0 <HAL_CAN_MspInit+0x134>)
 800107e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001082:	6413      	str	r3, [r2, #64]	; 0x40
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <HAL_CAN_MspInit+0x134>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_CAN_MspInit+0x134>)
 8001096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001098:	4a11      	ldr	r2, [pc, #68]	; (80010e0 <HAL_CAN_MspInit+0x134>)
 800109a:	f043 0302 	orr.w	r3, r3, #2
 800109e:	6313      	str	r3, [r2, #48]	; 0x30
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <HAL_CAN_MspInit+0x134>)
 80010a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80010ac:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80010b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80010be:	2309      	movs	r3, #9
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	4619      	mov	r1, r3
 80010c8:	4808      	ldr	r0, [pc, #32]	; (80010ec <HAL_CAN_MspInit+0x140>)
 80010ca:	f004 fc43 	bl	8005954 <HAL_GPIO_Init>
}
 80010ce:	bf00      	nop
 80010d0:	3730      	adds	r7, #48	; 0x30
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40006400 	.word	0x40006400
 80010dc:	2000022c 	.word	0x2000022c
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40020000 	.word	0x40020000
 80010e8:	40006800 	.word	0x40006800
 80010ec:	40020400 	.word	0x40020400

080010f0 <can_init>:
	CAN_FilterConfigStructure.FilterBank = 0;

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
}

void can_init() {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 80010f6:	2300      	movs	r3, #0
 80010f8:	603b      	str	r3, [r7, #0]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 800110e:	2301      	movs	r3, #1
 8001110:	61fb      	str	r3, [r7, #28]
	CAN_FilterConfigStructure.FilterActivation = ENABLE;
 8001112:	2301      	movs	r3, #1
 8001114:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterBank = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]

	HAL_CAN_ConfigFilter(&hcan1, &CAN_FilterConfigStructure);
 800111a:	463b      	mov	r3, r7
 800111c:	4619      	mov	r1, r3
 800111e:	480d      	ldr	r0, [pc, #52]	; (8001154 <can_init+0x64>)
 8001120:	f003 fba8 	bl	8004874 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 8001124:	480b      	ldr	r0, [pc, #44]	; (8001154 <can_init+0x64>)
 8001126:	f003 fc85 	bl	8004a34 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800112a:	2102      	movs	r1, #2
 800112c:	4809      	ldr	r0, [pc, #36]	; (8001154 <can_init+0x64>)
 800112e:	f003 fed6 	bl	8004ede <HAL_CAN_ActivateNotification>

	HAL_CAN_ConfigFilter(&hcan2, &CAN_FilterConfigStructure);
 8001132:	463b      	mov	r3, r7
 8001134:	4619      	mov	r1, r3
 8001136:	4808      	ldr	r0, [pc, #32]	; (8001158 <can_init+0x68>)
 8001138:	f003 fb9c 	bl	8004874 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan2);
 800113c:	4806      	ldr	r0, [pc, #24]	; (8001158 <can_init+0x68>)
 800113e:	f003 fc79 	bl	8004a34 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001142:	2102      	movs	r1, #2
 8001144:	4804      	ldr	r0, [pc, #16]	; (8001158 <can_init+0x68>)
 8001146:	f003 feca 	bl	8004ede <HAL_CAN_ActivateNotification>
}
 800114a:	bf00      	nop
 800114c:	3728      	adds	r7, #40	; 0x28
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200001dc 	.word	0x200001dc
 8001158:	20000204 	.word	0x20000204

0800115c <HAL_CAN_RxFifo0MsgPendingCallback>:
	__from_bigendian(data + 2, &(ptr->vel_rpm));
	__from_bigendian(data + 4, &(ptr->raw_current));
	ptr->temperature = data[6];
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b09a      	sub	sp, #104	; 0x68
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	uint8_t rx_data[8];
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	f107 021c 	add.w	r2, r7, #28
 800116c:	2100      	movs	r1, #0
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f003 fda3 	bl	8004cba <HAL_CAN_GetRxMessage>
	uint8_t base_id = rx_header.StdId - CAN_3508_M1_ID;
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	3b01      	subs	r3, #1
 800117a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (hcan == &hcan2) {
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a43      	ldr	r2, [pc, #268]	; (8001290 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d104      	bne.n	8001190 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
		base_id += 8;
 8001186:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800118a:	3308      	adds	r3, #8
 800118c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	663b      	str	r3, [r7, #96]	; 0x60
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	65fb      	str	r3, [r7, #92]	; 0x5c
	__from_bigendian(data, &(ptr->encoder));
 800119c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800119e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80011a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80011a2:	657b      	str	r3, [r7, #84]	; 0x54
	uint8_t *o = out;
 80011a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011a6:	653b      	str	r3, [r7, #80]	; 0x50
	*o = *(in + 1);
 80011a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011aa:	785a      	ldrb	r2, [r3, #1]
 80011ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011ae:	701a      	strb	r2, [r3, #0]
	*(o + 1) = *in;
 80011b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011b2:	3301      	adds	r3, #1
 80011b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80011b6:	7812      	ldrb	r2, [r2, #0]
 80011b8:	701a      	strb	r2, [r3, #0]
}
 80011ba:	bf00      	nop
	__from_bigendian(data + 2, &(ptr->vel_rpm));
 80011bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011be:	1c9a      	adds	r2, r3, #2
 80011c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011c2:	3302      	adds	r3, #2
 80011c4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80011c6:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t *o = out;
 80011c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011ca:	647b      	str	r3, [r7, #68]	; 0x44
	*o = *(in + 1);
 80011cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011ce:	785a      	ldrb	r2, [r3, #1]
 80011d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011d2:	701a      	strb	r2, [r3, #0]
	*(o + 1) = *in;
 80011d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011d6:	3301      	adds	r3, #1
 80011d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80011da:	7812      	ldrb	r2, [r2, #0]
 80011dc:	701a      	strb	r2, [r3, #0]
}
 80011de:	bf00      	nop
	__from_bigendian(data + 4, &(ptr->raw_current));
 80011e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011e2:	1d1a      	adds	r2, r3, #4
 80011e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011e6:	3304      	adds	r3, #4
 80011e8:	643a      	str	r2, [r7, #64]	; 0x40
 80011ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t *o = out;
 80011ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011ee:	63bb      	str	r3, [r7, #56]	; 0x38
	*o = *(in + 1);
 80011f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011f2:	785a      	ldrb	r2, [r3, #1]
 80011f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011f6:	701a      	strb	r2, [r3, #0]
	*(o + 1) = *in;
 80011f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011fa:	3301      	adds	r3, #1
 80011fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80011fe:	7812      	ldrb	r2, [r2, #0]
 8001200:	701a      	strb	r2, [r3, #0]
}
 8001202:	bf00      	nop
	ptr->temperature = data[6];
 8001204:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001206:	799a      	ldrb	r2, [r3, #6]
 8001208:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800120a:	719a      	strb	r2, [r3, #6]
}
 800120c:	bf00      	nop
	}
	MotorFeedback fb;
	__get_motor_fb(&fb, rx_data);
	rm_fb_cmd[base_id].encoder = fb.encoder;
 800120e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001212:	89b8      	ldrh	r0, [r7, #12]
 8001214:	491f      	ldr	r1, [pc, #124]	; (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001216:	4613      	mov	r3, r2
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	4413      	add	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	440b      	add	r3, r1
 8001220:	4602      	mov	r2, r0
 8001222:	801a      	strh	r2, [r3, #0]
	rm_fb_cmd[base_id].vel_rpm = fb.vel_rpm;
 8001224:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001228:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800122c:	4919      	ldr	r1, [pc, #100]	; (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	440b      	add	r3, r1
 8001238:	3302      	adds	r3, #2
 800123a:	4602      	mov	r2, r0
 800123c:	801a      	strh	r2, [r3, #0]
	rm_fb_cmd[base_id].actual_current = (float)fb.raw_current * 20.0f / 16384.0f;
 800123e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001242:	ee07 3a90 	vmov	s15, r3
 8001246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800124a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800124e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001252:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001256:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001298 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>
 800125a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800125e:	490d      	ldr	r1, [pc, #52]	; (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001260:	4613      	mov	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4413      	add	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	440b      	add	r3, r1
 800126a:	3304      	adds	r3, #4
 800126c:	edc3 7a00 	vstr	s15, [r3]
	rm_fb_cmd[base_id].temperature = fb.temperature;
 8001270:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001274:	7cb8      	ldrb	r0, [r7, #18]
 8001276:	4907      	ldr	r1, [pc, #28]	; (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001278:	4613      	mov	r3, r2
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4413      	add	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	440b      	add	r3, r1
 8001282:	3308      	adds	r3, #8
 8001284:	4602      	mov	r2, r0
 8001286:	701a      	strb	r2, [r3, #0]
}
 8001288:	bf00      	nop
 800128a:	3768      	adds	r7, #104	; 0x68
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000204 	.word	0x20000204
 8001294:	2000011c 	.word	0x2000011c
 8001298:	46800000 	.word	0x46800000

0800129c <can_transmit>:

void can_transmit(CAN_HandleTypeDef *hcan, uint16_t id, int16_t msg1, int16_t msg2, int16_t msg3, int16_t msg4) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b08e      	sub	sp, #56	; 0x38
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	4608      	mov	r0, r1
 80012a6:	4611      	mov	r1, r2
 80012a8:	461a      	mov	r2, r3
 80012aa:	4603      	mov	r3, r0
 80012ac:	817b      	strh	r3, [r7, #10]
 80012ae:	460b      	mov	r3, r1
 80012b0:	813b      	strh	r3, [r7, #8]
 80012b2:	4613      	mov	r3, r2
 80012b4:	80fb      	strh	r3, [r7, #6]
	CAN_TxHeaderTypeDef tx_header;
	uint8_t data[8];
	uint32_t pTxMailbox;

	tx_header.StdId = id;
 80012b6:	897b      	ldrh	r3, [r7, #10]
 80012b8:	623b      	str	r3, [r7, #32]
	tx_header.IDE = CAN_ID_STD;
 80012ba:	2300      	movs	r3, #0
 80012bc:	62bb      	str	r3, [r7, #40]	; 0x28
	tx_header.RTR = CAN_RTR_DATA;
 80012be:	2300      	movs	r3, #0
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	tx_header.DLC = CAN_DATA_SIZE;
 80012c2:	2308      	movs	r3, #8
 80012c4:	633b      	str	r3, [r7, #48]	; 0x30
	tx_header.TransmitGlobalTime = DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	data[0] = msg1 >> 8;
 80012cc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80012d0:	121b      	asrs	r3, r3, #8
 80012d2:	b21b      	sxth	r3, r3
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	763b      	strb	r3, [r7, #24]
	data[1] = msg1;
 80012d8:	893b      	ldrh	r3, [r7, #8]
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	767b      	strb	r3, [r7, #25]
	data[2] = msg2 >> 8;
 80012de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012e2:	121b      	asrs	r3, r3, #8
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	76bb      	strb	r3, [r7, #26]
	data[3] = msg2;
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	76fb      	strb	r3, [r7, #27]
	data[4] = msg3 >> 8;
 80012f0:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80012f4:	121b      	asrs	r3, r3, #8
 80012f6:	b21b      	sxth	r3, r3
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	773b      	strb	r3, [r7, #28]
	data[5] = msg3;
 80012fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001300:	b2db      	uxtb	r3, r3
 8001302:	777b      	strb	r3, [r7, #29]
	data[6] = msg4 >> 8;
 8001304:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001308:	121b      	asrs	r3, r3, #8
 800130a:	b21b      	sxth	r3, r3
 800130c:	b2db      	uxtb	r3, r3
 800130e:	77bb      	strb	r3, [r7, #30]
	data[7] = msg4;
 8001310:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001314:	b2db      	uxtb	r3, r3
 8001316:	77fb      	strb	r3, [r7, #31]

	if (HAL_CAN_AddTxMessage(hcan, &tx_header, data, &pTxMailbox) == HAL_OK) {
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	f107 0218 	add.w	r2, r7, #24
 8001320:	f107 0120 	add.w	r1, r7, #32
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	f003 fbc9 	bl	8004abc <HAL_CAN_AddTxMessage>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d108      	bne.n	8001342 <can_transmit+0xa6>
		while (HAL_CAN_IsTxMessagePending(hcan, pTxMailbox))
 8001330:	bf00      	nop
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	4619      	mov	r1, r3
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f003 fc9b 	bl	8004c72 <HAL_CAN_IsTxMessagePending>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f7      	bne.n	8001332 <can_transmit+0x96>
			;
	}
}
 8001342:	bf00      	nop
 8001344:	3738      	adds	r7, #56	; 0x38
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <can_ctrl_loop>:

void can_ctrl_loop() {
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af02      	add	r7, sp, #8
	/* ======= TX ======= */
	// CAN1
	can_transmit(&hcan1, RM_TX_GRP1_ID, rm_ctrl_cmd[CAN1_MOTOR0], rm_ctrl_cmd[CAN1_MOTOR1], rm_ctrl_cmd[CAN1_MOTOR2],
 8001352:	4b2e      	ldr	r3, [pc, #184]	; (800140c <can_ctrl_loop+0xc0>)
 8001354:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001358:	4b2c      	ldr	r3, [pc, #176]	; (800140c <can_ctrl_loop+0xc0>)
 800135a:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 800135e:	4b2b      	ldr	r3, [pc, #172]	; (800140c <can_ctrl_loop+0xc0>)
 8001360:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001364:	4a29      	ldr	r2, [pc, #164]	; (800140c <can_ctrl_loop+0xc0>)
 8001366:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800136a:	9201      	str	r2, [sp, #4]
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	4603      	mov	r3, r0
 8001370:	460a      	mov	r2, r1
 8001372:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001376:	4826      	ldr	r0, [pc, #152]	; (8001410 <can_ctrl_loop+0xc4>)
 8001378:	f7ff ff90 	bl	800129c <can_transmit>
				 rm_ctrl_cmd[CAN1_MOTOR3]);
	can_transmit(&hcan1, RM_TX_GRP2_ID, rm_ctrl_cmd[CAN1_MOTOR4], rm_ctrl_cmd[CAN1_MOTOR5], rm_ctrl_cmd[CAN1_MOTOR6],
 800137c:	4b23      	ldr	r3, [pc, #140]	; (800140c <can_ctrl_loop+0xc0>)
 800137e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8001382:	4b22      	ldr	r3, [pc, #136]	; (800140c <can_ctrl_loop+0xc0>)
 8001384:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8001388:	4b20      	ldr	r3, [pc, #128]	; (800140c <can_ctrl_loop+0xc0>)
 800138a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800138e:	4a1f      	ldr	r2, [pc, #124]	; (800140c <can_ctrl_loop+0xc0>)
 8001390:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001394:	9201      	str	r2, [sp, #4]
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	4603      	mov	r3, r0
 800139a:	460a      	mov	r2, r1
 800139c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013a0:	481b      	ldr	r0, [pc, #108]	; (8001410 <can_ctrl_loop+0xc4>)
 80013a2:	f7ff ff7b 	bl	800129c <can_transmit>
				 rm_ctrl_cmd[CAN1_MOTOR7]);

	// CAN2
	can_transmit(&hcan2, RM_TX_GRP1_ID, rm_ctrl_cmd[CAN2_MOTOR0], rm_ctrl_cmd[CAN2_MOTOR1], rm_ctrl_cmd[CAN2_MOTOR2],
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <can_ctrl_loop+0xc0>)
 80013a8:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 80013ac:	4b17      	ldr	r3, [pc, #92]	; (800140c <can_ctrl_loop+0xc0>)
 80013ae:	f9b3 0012 	ldrsh.w	r0, [r3, #18]
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <can_ctrl_loop+0xc0>)
 80013b4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80013b8:	4a14      	ldr	r2, [pc, #80]	; (800140c <can_ctrl_loop+0xc0>)
 80013ba:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 80013be:	9201      	str	r2, [sp, #4]
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	4603      	mov	r3, r0
 80013c4:	460a      	mov	r2, r1
 80013c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ca:	4812      	ldr	r0, [pc, #72]	; (8001414 <can_ctrl_loop+0xc8>)
 80013cc:	f7ff ff66 	bl	800129c <can_transmit>
				 rm_ctrl_cmd[CAN2_MOTOR3]);
	can_transmit(&hcan2, RM_TX_GRP2_ID, rm_ctrl_cmd[CAN2_MOTOR4], rm_ctrl_cmd[CAN2_MOTOR5], rm_ctrl_cmd[CAN2_MOTOR6],
 80013d0:	4b0e      	ldr	r3, [pc, #56]	; (800140c <can_ctrl_loop+0xc0>)
 80013d2:	f9b3 1018 	ldrsh.w	r1, [r3, #24]
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <can_ctrl_loop+0xc0>)
 80013d8:	f9b3 001a 	ldrsh.w	r0, [r3, #26]
 80013dc:	4b0b      	ldr	r3, [pc, #44]	; (800140c <can_ctrl_loop+0xc0>)
 80013de:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80013e2:	4a0a      	ldr	r2, [pc, #40]	; (800140c <can_ctrl_loop+0xc0>)
 80013e4:	f9b2 201e 	ldrsh.w	r2, [r2, #30]
 80013e8:	9201      	str	r2, [sp, #4]
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	4603      	mov	r3, r0
 80013ee:	460a      	mov	r2, r1
 80013f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013f4:	4807      	ldr	r0, [pc, #28]	; (8001414 <can_ctrl_loop+0xc8>)
 80013f6:	f7ff ff51 	bl	800129c <can_transmit>
				 rm_ctrl_cmd[CAN2_MOTOR7]);

	/* ======= RX ======= */
	HAL_CAN_RxFifo0MsgPendingCallback(&hcan1);
 80013fa:	4805      	ldr	r0, [pc, #20]	; (8001410 <can_ctrl_loop+0xc4>)
 80013fc:	f7ff feae 	bl	800115c <HAL_CAN_RxFifo0MsgPendingCallback>
	HAL_CAN_RxFifo0MsgPendingCallback(&hcan2);
 8001400:	4804      	ldr	r0, [pc, #16]	; (8001414 <can_ctrl_loop+0xc8>)
 8001402:	f7ff feab 	bl	800115c <HAL_CAN_RxFifo0MsgPendingCallback>
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200000fc 	.word	0x200000fc
 8001410:	200001dc 	.word	0x200001dc
 8001414:	20000204 	.word	0x20000204

08001418 <get_motor_feedback>:

/* USER FUNCTIONS */

MotorStats get_motor_feedback(Motor tar_motor) { return rm_fb_cmd[tar_motor]; }
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	70fb      	strb	r3, [r7, #3]
 8001424:	78fa      	ldrb	r2, [r7, #3]
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	4907      	ldr	r1, [pc, #28]	; (8001448 <get_motor_feedback+0x30>)
 800142a:	4613      	mov	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	18ca      	adds	r2, r1, r3
 8001434:	4603      	mov	r3, r0
 8001436:	ca07      	ldmia	r2, {r0, r1, r2}
 8001438:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	2000011c 	.word	0x2000011c

0800144c <set_motor_current>:

void set_motor_current(Motor tar_motor, int16_t tar_current) {
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	460a      	mov	r2, r1
 8001456:	71fb      	strb	r3, [r7, #7]
 8001458:	4613      	mov	r3, r2
 800145a:	80bb      	strh	r3, [r7, #4]
	if (tar_current > 16384) {
 800145c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001460:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001464:	dd03      	ble.n	800146e <set_motor_current+0x22>
		tar_current = 16384;
 8001466:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800146a:	80bb      	strh	r3, [r7, #4]
 800146c:	e007      	b.n	800147e <set_motor_current+0x32>
	} else if (tar_current < -16384) {
 800146e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001472:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8001476:	da02      	bge.n	800147e <set_motor_current+0x32>
		tar_current = -16384;
 8001478:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800147c:	80bb      	strh	r3, [r7, #4]
	}
	rm_ctrl_cmd[tar_motor] = tar_current;
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	4904      	ldr	r1, [pc, #16]	; (8001494 <set_motor_current+0x48>)
 8001482:	88ba      	ldrh	r2, [r7, #4]
 8001484:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	200000fc 	.word	0x200000fc

08001498 <max>:

int max (int currents[]) {
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	int tempmax = currents[0];
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < 500; i++) {
 80014a6:	2301      	movs	r3, #1
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	e010      	b.n	80014ce <max+0x36>
		if (tempmax < currents[i]) tempmax = currents[i];
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	4413      	add	r3, r2
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	da05      	bge.n	80014c8 <max+0x30>
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	4413      	add	r3, r2
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < 500; i++) {
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	3301      	adds	r3, #1
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014d4:	dbea      	blt.n	80014ac <max+0x14>
	}
	return tempmax;
 80014d6:	68fb      	ldr	r3, [r7, #12]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <min>:

int min (int currents[]) {
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	int tempmin = currents[0];
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < 500; i++) {
 80014f2:	2301      	movs	r3, #1
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	e010      	b.n	800151a <min+0x36>
		if (tempmin > currents[i]) tempmin = currents[i];
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	4413      	add	r3, r2
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	429a      	cmp	r2, r3
 8001506:	dd05      	ble.n	8001514 <min+0x30>
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	4413      	add	r3, r2
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < 500; i++) {
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	3301      	adds	r3, #1
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001520:	dbea      	blt.n	80014f8 <min+0x14>
	}
	return tempmin;
 8001522:	68fb      	ldr	r3, [r7, #12]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <average>:

int average (int currents[]) {
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	int tempsum = currents[0];
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < 500; i++) {
 800153e:	2301      	movs	r3, #1
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	e00a      	b.n	800155a <average+0x2a>
		tempsum += currents[i];
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	4413      	add	r3, r2
 8001552:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < 500; i++) {
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	3301      	adds	r3, #1
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001560:	dbf0      	blt.n	8001544 <average+0x14>
	}
	return tempsum/500;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4a05      	ldr	r2, [pc, #20]	; (800157c <average+0x4c>)
 8001566:	fb82 1203 	smull	r1, r2, r2, r3
 800156a:	1152      	asrs	r2, r2, #5
 800156c:	17db      	asrs	r3, r3, #31
 800156e:	1ad3      	subs	r3, r2, r3
}
 8001570:	4618      	mov	r0, r3
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	10624dd3 	.word	0x10624dd3

08001580 <General_PID>:
static double prev_error[MAX_NUM_OF_MOTORS];
static double accu[MAX_NUM_OF_MOTORS];
static double tar_current[MAX_NUM_OF_MOTORS];
//static double last_ticks[MAX_NUM_OF_MOTORS];

int32_t General_PID(Motor cur_motor, int16_t error, int16_t prev_error, double* accu, const double kp, const double ki, const double kd) {
 8001580:	b5b0      	push	{r4, r5, r7, lr}
 8001582:	b090      	sub	sp, #64	; 0x40
 8001584:	af00      	add	r7, sp, #0
 8001586:	61fb      	str	r3, [r7, #28]
 8001588:	ed87 0b04 	vstr	d0, [r7, #16]
 800158c:	ed87 1b02 	vstr	d1, [r7, #8]
 8001590:	ed87 2b00 	vstr	d2, [r7]
 8001594:	4603      	mov	r3, r0
 8001596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800159a:	460b      	mov	r3, r1
 800159c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800159e:	4613      	mov	r3, r2
 80015a0:	847b      	strh	r3, [r7, #34]	; 0x22

	// prevent 0
//	deltatime = (deltatime == 0)? 1 : deltatime; // Failed

	// P
	P_Gain = kp * error;
 80015a2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe ff60 	bl	800046c <__aeabi_i2d>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015b4:	f7fe ffc4 	bl	8000540 <__aeabi_dmul>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	// I
	*accu += error;
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80015c6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ff4e 	bl	800046c <__aeabi_i2d>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4620      	mov	r0, r4
 80015d6:	4629      	mov	r1, r5
 80015d8:	f7fe fdfc 	bl	80001d4 <__adddf3>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	69f9      	ldr	r1, [r7, #28]
 80015e2:	e9c1 2300 	strd	r2, r3, [r1]

	I_Gain = ki * (*accu);
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015f0:	f7fe ffa6 	bl	8000540 <__aeabi_dmul>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	// D
	D_Gain = kd * (error - prev_error) ;
 80015fc:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8001600:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe ff30 	bl	800046c <__aeabi_i2d>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001614:	f7fe ff94 	bl	8000540 <__aeabi_dmul>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

//	last_ticks[cur_motor] = HAL_GetTick();

	return (P_Gain + I_Gain + D_Gain);
 8001620:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001624:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001628:	f7fe fdd4 	bl	80001d4 <__adddf3>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001638:	f7fe fdcc 	bl	80001d4 <__adddf3>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4610      	mov	r0, r2
 8001642:	4619      	mov	r1, r3
 8001644:	f7ff fa2c 	bl	8000aa0 <__aeabi_d2iz>
 8001648:	4603      	mov	r3, r0

}
 800164a:	4618      	mov	r0, r3
 800164c:	3740      	adds	r7, #64	; 0x40
 800164e:	46bd      	mov	sp, r7
 8001650:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001654 <PID_variable_init>:



void PID_variable_init() {
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_NUM_OF_MOTORS; i++) {
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	e02f      	b.n	80016c0 <PID_variable_init+0x6c>
		indexes[i] = 0;
 8001660:	4a1c      	ldr	r2, [pc, #112]	; (80016d4 <PID_variable_init+0x80>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2100      	movs	r1, #0
 8001666:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		error[i] = 0;
 800166a:	4a1b      	ldr	r2, [pc, #108]	; (80016d8 <PID_variable_init+0x84>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	18d1      	adds	r1, r2, r3
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	f04f 0300 	mov.w	r3, #0
 800167a:	e9c1 2300 	strd	r2, r3, [r1]
		prev_error[i] = 0;
 800167e:	4a17      	ldr	r2, [pc, #92]	; (80016dc <PID_variable_init+0x88>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	18d1      	adds	r1, r2, r3
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	e9c1 2300 	strd	r2, r3, [r1]
		accu[i] = 0;
 8001692:	4a13      	ldr	r2, [pc, #76]	; (80016e0 <PID_variable_init+0x8c>)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	18d1      	adds	r1, r2, r3
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	e9c1 2300 	strd	r2, r3, [r1]
		tar_current[i] = 0;
 80016a6:	4a0f      	ldr	r2, [pc, #60]	; (80016e4 <PID_variable_init+0x90>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	18d1      	adds	r1, r2, r3
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < MAX_NUM_OF_MOTORS; i++) {
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3301      	adds	r3, #1
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b0f      	cmp	r3, #15
 80016c4:	ddcc      	ble.n	8001660 <PID_variable_init+0xc>
//		last_ticks[i] = 0;
	}
}
 80016c6:	bf00      	nop
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	20007f30 	.word	0x20007f30
 80016d8:	20007f70 	.word	0x20007f70
 80016dc:	20007ff0 	.word	0x20007ff0
 80016e0:	20008070 	.word	0x20008070
 80016e4:	200080f0 	.word	0x200080f0

080016e8 <set_motor_speed>:

//for (int i = 0, i < MAX_NUM_OF_MOTORS; i++) {
//	indexes[i]
//}

void set_motor_speed(Motor tar_motor, int16_t tar_vel, const double kp, const double ki, const double kd) {
 80016e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ea:	b08d      	sub	sp, #52	; 0x34
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	460a      	mov	r2, r1
 80016f2:	ed87 0b04 	vstr	d0, [r7, #16]
 80016f6:	ed87 1b02 	vstr	d1, [r7, #8]
 80016fa:	ed87 2b00 	vstr	d2, [r7]
 80016fe:	77fb      	strb	r3, [r7, #31]
 8001700:	4613      	mov	r3, r2
 8001702:	83bb      	strh	r3, [r7, #28]
	static double Cur_vel = 0;

	// collect current velocity
	Cur_vel = get_motor_feedback(tar_motor).vel_rpm;
 8001704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001708:	7ffa      	ldrb	r2, [r7, #31]
 800170a:	4611      	mov	r1, r2
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fe83 	bl	8001418 <get_motor_feedback>
 8001712:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe fea8 	bl	800046c <__aeabi_i2d>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	4944      	ldr	r1, [pc, #272]	; (8001834 <set_motor_speed+0x14c>)
 8001722:	e9c1 2300 	strd	r2, r3, [r1]
	error[tar_motor] = tar_vel - Cur_vel;
 8001726:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe fe9e 	bl	800046c <__aeabi_i2d>
 8001730:	4b40      	ldr	r3, [pc, #256]	; (8001834 <set_motor_speed+0x14c>)
 8001732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001736:	7ffc      	ldrb	r4, [r7, #31]
 8001738:	f7fe fd4a 	bl	80001d0 <__aeabi_dsub>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	483d      	ldr	r0, [pc, #244]	; (8001838 <set_motor_speed+0x150>)
 8001742:	00e1      	lsls	r1, r4, #3
 8001744:	4401      	add	r1, r0
 8001746:	e9c1 2300 	strd	r2, r3, [r1]

	// calculate error
	tar_current[tar_motor] = General_PID(tar_motor, error[tar_motor], prev_error[tar_motor], accu+tar_motor,kp,ki,kd);
 800174a:	7ffb      	ldrb	r3, [r7, #31]
 800174c:	4a3a      	ldr	r2, [pc, #232]	; (8001838 <set_motor_speed+0x150>)
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	4413      	add	r3, r2
 8001752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001756:	4610      	mov	r0, r2
 8001758:	4619      	mov	r1, r3
 800175a:	f7ff f9a1 	bl	8000aa0 <__aeabi_d2iz>
 800175e:	4603      	mov	r3, r0
 8001760:	b21c      	sxth	r4, r3
 8001762:	7ffb      	ldrb	r3, [r7, #31]
 8001764:	4a35      	ldr	r2, [pc, #212]	; (800183c <set_motor_speed+0x154>)
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	4413      	add	r3, r2
 800176a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	f7ff f995 	bl	8000aa0 <__aeabi_d2iz>
 8001776:	4603      	mov	r3, r0
 8001778:	b21a      	sxth	r2, r3
 800177a:	7ffb      	ldrb	r3, [r7, #31]
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	4930      	ldr	r1, [pc, #192]	; (8001840 <set_motor_speed+0x158>)
 8001780:	440b      	add	r3, r1
 8001782:	7ff8      	ldrb	r0, [r7, #31]
 8001784:	ed97 2b00 	vldr	d2, [r7]
 8001788:	ed97 1b02 	vldr	d1, [r7, #8]
 800178c:	ed97 0b04 	vldr	d0, [r7, #16]
 8001790:	4621      	mov	r1, r4
 8001792:	f7ff fef5 	bl	8001580 <General_PID>
 8001796:	4603      	mov	r3, r0
 8001798:	7ffc      	ldrb	r4, [r7, #31]
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fe66 	bl	800046c <__aeabi_i2d>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	4827      	ldr	r0, [pc, #156]	; (8001844 <set_motor_speed+0x15c>)
 80017a6:	00e1      	lsls	r1, r4, #3
 80017a8:	4401      	add	r1, r0
 80017aa:	e9c1 2300 	strd	r2, r3, [r1]
	prev_error[tar_motor] = error[tar_motor];
 80017ae:	7ffb      	ldrb	r3, [r7, #31]
 80017b0:	7ff9      	ldrb	r1, [r7, #31]
 80017b2:	4a21      	ldr	r2, [pc, #132]	; (8001838 <set_motor_speed+0x150>)
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	4413      	add	r3, r2
 80017b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017bc:	481f      	ldr	r0, [pc, #124]	; (800183c <set_motor_speed+0x154>)
 80017be:	00c9      	lsls	r1, r1, #3
 80017c0:	4401      	add	r1, r0
 80017c2:	e9c1 2300 	strd	r2, r3, [r1]

	set_motor_current(tar_motor,tar_current[tar_motor]);
 80017c6:	7ffb      	ldrb	r3, [r7, #31]
 80017c8:	4a1e      	ldr	r2, [pc, #120]	; (8001844 <set_motor_speed+0x15c>)
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	4413      	add	r3, r2
 80017ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f7ff f963 	bl	8000aa0 <__aeabi_d2iz>
 80017da:	4603      	mov	r3, r0
 80017dc:	b21a      	sxth	r2, r3
 80017de:	7ffb      	ldrb	r3, [r7, #31]
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fe32 	bl	800144c <set_motor_current>

	currents[tar_motor][indexes[tar_motor]++ % 500] = Cur_vel;
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <set_motor_speed+0x14c>)
 80017ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017ee:	7ffd      	ldrb	r5, [r7, #31]
 80017f0:	7ffa      	ldrb	r2, [r7, #31]
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <set_motor_speed+0x160>)
 80017f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f8:	1c5c      	adds	r4, r3, #1
 80017fa:	4e13      	ldr	r6, [pc, #76]	; (8001848 <set_motor_speed+0x160>)
 80017fc:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
 8001800:	4a12      	ldr	r2, [pc, #72]	; (800184c <set_motor_speed+0x164>)
 8001802:	fb82 4203 	smull	r4, r2, r2, r3
 8001806:	1154      	asrs	r4, r2, #5
 8001808:	17da      	asrs	r2, r3, #31
 800180a:	1aa4      	subs	r4, r4, r2
 800180c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001810:	fb04 f202 	mul.w	r2, r4, r2
 8001814:	1a9c      	subs	r4, r3, r2
 8001816:	f7ff f943 	bl	8000aa0 <__aeabi_d2iz>
 800181a:	4602      	mov	r2, r0
 800181c:	490c      	ldr	r1, [pc, #48]	; (8001850 <set_motor_speed+0x168>)
 800181e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001822:	fb05 f303 	mul.w	r3, r5, r3
 8001826:	4423      	add	r3, r4
 8001828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800182c:	bf00      	nop
 800182e:	3734      	adds	r7, #52	; 0x34
 8001830:	46bd      	mov	sp, r7
 8001832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001834:	20008170 	.word	0x20008170
 8001838:	20007f70 	.word	0x20007f70
 800183c:	20007ff0 	.word	0x20007ff0
 8001840:	20008070 	.word	0x20008070
 8001844:	200080f0 	.word	0x200080f0
 8001848:	20007f30 	.word	0x20007f30
 800184c:	10624dd3 	.word	0x10624dd3
 8001850:	20000230 	.word	0x20000230

08001854 <testing>:

void testing(Motor tar_motor) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af02      	add	r7, sp, #8
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
	int maximum = max(currents[tar_motor]);
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001864:	fb02 f303 	mul.w	r3, r2, r3
 8001868:	4a1a      	ldr	r2, [pc, #104]	; (80018d4 <testing+0x80>)
 800186a:	4413      	add	r3, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fe13 	bl	8001498 <max>
 8001872:	60f8      	str	r0, [r7, #12]
	int minimum = min(currents[tar_motor]);
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800187a:	fb02 f303 	mul.w	r3, r2, r3
 800187e:	4a15      	ldr	r2, [pc, #84]	; (80018d4 <testing+0x80>)
 8001880:	4413      	add	r3, r2
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fe2e 	bl	80014e4 <min>
 8001888:	60b8      	str	r0, [r7, #8]
//	tft_prints(0, 5, "%0.5f  ", HAL_GetTick() - last_ticks[tar_motor]);
//	tft_prints(0, 5, " %0.5f   ", accu[tar_motor]);
	tft_prints(0, 6, "   %d   ", maximum);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4a12      	ldr	r2, [pc, #72]	; (80018d8 <testing+0x84>)
 800188e:	2106      	movs	r1, #6
 8001890:	2000      	movs	r0, #0
 8001892:	f001 f9cf 	bl	8002c34 <tft_prints>
	tft_prints(0, 7, "   %d   ", minimum);
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	4a0f      	ldr	r2, [pc, #60]	; (80018d8 <testing+0x84>)
 800189a:	2107      	movs	r1, #7
 800189c:	2000      	movs	r0, #0
 800189e:	f001 f9c9 	bl	8002c34 <tft_prints>
	tft_prints(0, 8, "   %d   ", maximum-minimum);
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	4a0b      	ldr	r2, [pc, #44]	; (80018d8 <testing+0x84>)
 80018aa:	2108      	movs	r1, #8
 80018ac:	2000      	movs	r0, #0
 80018ae:	f001 f9c1 	bl	8002c34 <tft_prints>
	tft_prints(0, 9, "A: %0.5f  ", tar_current[tar_motor]);
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	4a09      	ldr	r2, [pc, #36]	; (80018dc <testing+0x88>)
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	4413      	add	r3, r2
 80018ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018be:	e9cd 2300 	strd	r2, r3, [sp]
 80018c2:	4a07      	ldr	r2, [pc, #28]	; (80018e0 <testing+0x8c>)
 80018c4:	2109      	movs	r1, #9
 80018c6:	2000      	movs	r0, #0
 80018c8:	f001 f9b4 	bl	8002c34 <tft_prints>
}
 80018cc:	bf00      	nop
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000230 	.word	0x20000230
 80018d8:	08009398 	.word	0x08009398
 80018dc:	200080f0 	.word	0x200080f0
 80018e0:	080093a4 	.word	0x080093a4

080018e4 <averagespeed>:

double averagespeed(Motor tar_motor) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
	return average(currents[tar_motor]);
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80018f4:	fb02 f303 	mul.w	r3, r2, r3
 80018f8:	4a09      	ldr	r2, [pc, #36]	; (8001920 <averagespeed+0x3c>)
 80018fa:	4413      	add	r3, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fe17 	bl	8001530 <average>
 8001902:	4603      	mov	r3, r0
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fdb1 	bl	800046c <__aeabi_i2d>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001912:	eeb0 0a47 	vmov.f32	s0, s14
 8001916:	eef0 0a67 	vmov.f32	s1, s15
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000230 	.word	0x20000230

08001924 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <MX_DMA_Init+0x3c>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a0b      	ldr	r2, [pc, #44]	; (8001960 <MX_DMA_Init+0x3c>)
 8001934:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <MX_DMA_Init+0x3c>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	203b      	movs	r0, #59	; 0x3b
 800194c:	f003 fbc9 	bl	80050e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001950:	203b      	movs	r0, #59	; 0x3b
 8001952:	f003 fbe2 	bl	800511a <HAL_NVIC_EnableIRQ>

}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800

08001964 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08a      	sub	sp, #40	; 0x28
 8001968:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
 8001978:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	4b6c      	ldr	r3, [pc, #432]	; (8001b30 <MX_GPIO_Init+0x1cc>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a6b      	ldr	r2, [pc, #428]	; (8001b30 <MX_GPIO_Init+0x1cc>)
 8001984:	f043 0304 	orr.w	r3, r3, #4
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b69      	ldr	r3, [pc, #420]	; (8001b30 <MX_GPIO_Init+0x1cc>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0304 	and.w	r3, r3, #4
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	4b65      	ldr	r3, [pc, #404]	; (8001b30 <MX_GPIO_Init+0x1cc>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a64      	ldr	r2, [pc, #400]	; (8001b30 <MX_GPIO_Init+0x1cc>)
 80019a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b62      	ldr	r3, [pc, #392]	; (8001b30 <MX_GPIO_Init+0x1cc>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	4b5e      	ldr	r3, [pc, #376]	; (8001b30 <MX_GPIO_Init+0x1cc>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a5d      	ldr	r2, [pc, #372]	; (8001b30 <MX_GPIO_Init+0x1cc>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b5b      	ldr	r3, [pc, #364]	; (8001b30 <MX_GPIO_Init+0x1cc>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	607b      	str	r3, [r7, #4]
 80019d2:	4b57      	ldr	r3, [pc, #348]	; (8001b30 <MX_GPIO_Init+0x1cc>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a56      	ldr	r2, [pc, #344]	; (8001b30 <MX_GPIO_Init+0x1cc>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b54      	ldr	r3, [pc, #336]	; (8001b30 <MX_GPIO_Init+0x1cc>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	603b      	str	r3, [r7, #0]
 80019ee:	4b50      	ldr	r3, [pc, #320]	; (8001b30 <MX_GPIO_Init+0x1cc>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a4f      	ldr	r2, [pc, #316]	; (8001b30 <MX_GPIO_Init+0x1cc>)
 80019f4:	f043 0308 	orr.w	r3, r3, #8
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b4d      	ldr	r3, [pc, #308]	; (8001b30 <MX_GPIO_Init+0x1cc>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAM_WRST_Pin|TFT_RES_Pin|CAM_OE_Pin, GPIO_PIN_RESET);
 8001a06:	2200      	movs	r2, #0
 8001a08:	f248 0150 	movw	r1, #32848	; 0x8050
 8001a0c:	4849      	ldr	r0, [pc, #292]	; (8001b34 <MX_GPIO_Init+0x1d0>)
 8001a0e:	f004 f955 	bl	8005cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TFT_DC_Pin|TFT_CS_Pin, GPIO_PIN_RESET);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2130      	movs	r1, #48	; 0x30
 8001a16:	4848      	ldr	r0, [pc, #288]	; (8001b38 <MX_GPIO_Init+0x1d4>)
 8001a18:	f004 f950 	bl	8005cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_BL_Pin|CAM_WEN_Pin|CAM_RCLK_Pin|LED4_Pin
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f248 01f3 	movw	r1, #33011	; 0x80f3
 8001a22:	4846      	ldr	r0, [pc, #280]	; (8001b3c <MX_GPIO_Init+0x1d8>)
 8001a24:	f004 f94a 	bl	8005cbc <HAL_GPIO_WritePin>
                          |LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CAM_D7_Pin|CAM_D0_Pin|CAM_D1_Pin|CAM_D2_Pin
 8001a28:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 8001a2c:	617b      	str	r3, [r7, #20]
                          |CAM_D3_Pin|CAM_D4_Pin|CAM_D5_Pin|CAM_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	483e      	ldr	r0, [pc, #248]	; (8001b38 <MX_GPIO_Init+0x1d4>)
 8001a3e:	f003 ff89 	bl	8005954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CAM_HREF_Pin|CAM_RRST_Pin;
 8001a42:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	4619      	mov	r1, r3
 8001a56:	4837      	ldr	r0, [pc, #220]	; (8001b34 <MX_GPIO_Init+0x1d0>)
 8001a58:	f003 ff7c 	bl	8005954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CAM_WRST_Pin|TFT_RES_Pin|CAM_OE_Pin;
 8001a5c:	f248 0350 	movw	r3, #32848	; 0x8050
 8001a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a62:	2301      	movs	r3, #1
 8001a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	4619      	mov	r1, r3
 8001a74:	482f      	ldr	r0, [pc, #188]	; (8001b34 <MX_GPIO_Init+0x1d0>)
 8001a76:	f003 ff6d 	bl	8005954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = TFT_DC_Pin|TFT_CS_Pin;
 8001a7a:	2330      	movs	r3, #48	; 0x30
 8001a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4829      	ldr	r0, [pc, #164]	; (8001b38 <MX_GPIO_Init+0x1d4>)
 8001a92:	f003 ff5f 	bl	8005954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TFT_BL_Pin|CAM_WEN_Pin|CAM_RCLK_Pin|LED4_Pin
 8001a96:	f248 03f3 	movw	r3, #33011	; 0x80f3
 8001a9a:	617b      	str	r3, [r7, #20]
                          |LED3_Pin|LED2_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	4619      	mov	r1, r3
 8001aae:	4823      	ldr	r0, [pc, #140]	; (8001b3c <MX_GPIO_Init+0x1d8>)
 8001ab0:	f003 ff50 	bl	8005954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Boot1_Pin;
 8001ab4:	2304      	movs	r3, #4
 8001ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boot1_GPIO_Port, &GPIO_InitStruct);
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	481d      	ldr	r0, [pc, #116]	; (8001b3c <MX_GPIO_Init+0x1d8>)
 8001ac8:	f003 ff44 	bl	8005954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_VSYNC_Pin;
 8001acc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ad2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAM_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4816      	ldr	r0, [pc, #88]	; (8001b3c <MX_GPIO_Init+0x1d8>)
 8001ae4:	f003 ff36 	bl	8005954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 8001ae8:	2304      	movs	r3, #4
 8001aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001af0:	2301      	movs	r3, #1
 8001af2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	4619      	mov	r1, r3
 8001afa:	4811      	ldr	r0, [pc, #68]	; (8001b40 <MX_GPIO_Init+0x1dc>)
 8001afc:	f003 ff2a 	bl	8005954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8001b00:	2308      	movs	r3, #8
 8001b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	4619      	mov	r1, r3
 8001b12:	480a      	ldr	r0, [pc, #40]	; (8001b3c <MX_GPIO_Init+0x1d8>)
 8001b14:	f003 ff1e 	bl	8005954 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	2028      	movs	r0, #40	; 0x28
 8001b1e:	f003 fae0 	bl	80050e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b22:	2028      	movs	r0, #40	; 0x28
 8001b24:	f003 faf9 	bl	800511a <HAL_NVIC_EnableIRQ>

}
 8001b28:	bf00      	nop
 8001b2a:	3728      	adds	r7, #40	; 0x28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40020000 	.word	0x40020000
 8001b38:	40020800 	.word	0x40020800
 8001b3c:	40020400 	.word	0x40020400
 8001b40:	40020c00 	.word	0x40020c00

08001b44 <tft_char_is_changed>:
/* Macro */
#define TFT_XY(x, y) ((y)*char_max_x + (x))  // 2D to 1D index

// Useful function to improve performance
static inline bool tft_char_is_changed(const TFTBuffer buf, uint8_t x,
        uint8_t y) {
 8001b44:	b490      	push	{r4, r7}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	70fb      	strb	r3, [r7, #3]
 8001b50:	4613      	mov	r3, r2
 8001b52:	70bb      	strb	r3, [r7, #2]
    const uint16_t idx = TFT_XY(x, y);
 8001b54:	78bb      	ldrb	r3, [r7, #2]
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	4b3e      	ldr	r3, [pc, #248]	; (8001c54 <tft_char_is_changed+0x110>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	fb12 f303 	smulbb	r3, r2, r3
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	4413      	add	r3, r2
 8001b6a:	81fb      	strh	r3, [r7, #14]
    return ((buf->text_buf[buf->curr_screen][idx]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	89fa      	ldrh	r2, [r7, #14]
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	4603      	mov	r3, r0
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4403      	add	r3, r0
 8001b7c:	015b      	lsls	r3, r3, #5
 8001b7e:	440b      	add	r3, r1
 8001b80:	4413      	add	r3, r2
 8001b82:	3301      	adds	r3, #1
 8001b84:	781a      	ldrb	r2, [r3, #0]
            != buf->text_buf[!buf->curr_screen][idx])
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	bf0c      	ite	eq
 8001b8e:	2301      	moveq	r3, #1
 8001b90:	2300      	movne	r3, #0
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	461c      	mov	r4, r3
 8001b96:	89f9      	ldrh	r1, [r7, #14]
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	4623      	mov	r3, r4
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4423      	add	r3, r4
 8001ba0:	015b      	lsls	r3, r3, #5
 8001ba2:	4403      	add	r3, r0
 8001ba4:	440b      	add	r3, r1
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	781b      	ldrb	r3, [r3, #0]
            || (buf->text_color_buf[buf->curr_screen][idx]
                    != buf->text_color_buf[!buf->curr_screen][idx])
            || (buf->bg_color_buf[buf->curr_screen][idx]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d147      	bne.n	8001c3e <tft_char_is_changed+0xfa>
            || (buf->text_color_buf[buf->curr_screen][idx]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	89f9      	ldrh	r1, [r7, #14]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	4603      	mov	r3, r0
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4403      	add	r3, r0
 8001bbe:	015b      	lsls	r3, r3, #5
 8001bc0:	440b      	add	r3, r1
 8001bc2:	33a0      	adds	r3, #160	; 0xa0
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	885a      	ldrh	r2, [r3, #2]
                    != buf->text_color_buf[!buf->curr_screen][idx])
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	bf0c      	ite	eq
 8001bd2:	2301      	moveq	r3, #1
 8001bd4:	2300      	movne	r3, #0
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	461c      	mov	r4, r3
 8001bda:	89f8      	ldrh	r0, [r7, #14]
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	4623      	mov	r3, r4
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4423      	add	r3, r4
 8001be4:	015b      	lsls	r3, r3, #5
 8001be6:	4403      	add	r3, r0
 8001be8:	33a0      	adds	r3, #160	; 0xa0
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	440b      	add	r3, r1
 8001bee:	885b      	ldrh	r3, [r3, #2]
            || (buf->text_color_buf[buf->curr_screen][idx]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d124      	bne.n	8001c3e <tft_char_is_changed+0xfa>
            || (buf->bg_color_buf[buf->curr_screen][idx]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	89f9      	ldrh	r1, [r7, #14]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	4603      	mov	r3, r0
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4403      	add	r3, r0
 8001c04:	015b      	lsls	r3, r3, #5
 8001c06:	440b      	add	r3, r1
 8001c08:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4413      	add	r3, r2
 8001c10:	885a      	ldrh	r2, [r3, #2]
                    != buf->bg_color_buf[!buf->curr_screen][idx]));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	bf0c      	ite	eq
 8001c1a:	2301      	moveq	r3, #1
 8001c1c:	2300      	movne	r3, #0
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	461c      	mov	r4, r3
 8001c22:	89f8      	ldrh	r0, [r7, #14]
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	4623      	mov	r3, r4
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4423      	add	r3, r4
 8001c2c:	015b      	lsls	r3, r3, #5
 8001c2e:	4403      	add	r3, r0
 8001c30:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	440b      	add	r3, r1
 8001c38:	885b      	ldrh	r3, [r3, #2]
            || (buf->bg_color_buf[buf->curr_screen][idx]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d001      	beq.n	8001c42 <tft_char_is_changed+0xfe>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <tft_char_is_changed+0x100>
 8001c42:	2300      	movs	r3, #0
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	b2db      	uxtb	r3, r3
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc90      	pop	{r4, r7}
 8001c52:	4770      	bx	lr
 8001c54:	20008181 	.word	0x20008181

08001c58 <itos>:
 * @param      data  The string to write to
 * @param[in]  i     The signed integer to convert
 *
 * @return     Returns the new end pointer of the string
 */
static inline char* itos(char *data, int32_t i) {
 8001c58:	b480      	push	{r7}
 8001c5a:	b089      	sub	sp, #36	; 0x24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
    if (i < 0) {
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	da07      	bge.n	8001c78 <itos+0x20>
        i = -i;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	425b      	negs	r3, r3
 8001c6c:	603b      	str	r3, [r7, #0]
        *data++ = '-';
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	607a      	str	r2, [r7, #4]
 8001c74:	222d      	movs	r2, #45	; 0x2d
 8001c76:	701a      	strb	r2, [r3, #0]
    }
    char buf[14] = { 0 };
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	f107 0310 	add.w	r3, r7, #16
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	811a      	strh	r2, [r3, #8]
    char *ptr = &buf[1];
 8001c88:	f107 030c 	add.w	r3, r7, #12
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	61fb      	str	r3, [r7, #28]
    do {
        *ptr++ = '0' + (i % 10);
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <itos+0xa8>)
 8001c94:	fb83 1302 	smull	r1, r3, r3, r2
 8001c98:	1099      	asrs	r1, r3, #2
 8001c9a:	17d3      	asrs	r3, r2, #31
 8001c9c:	1ac9      	subs	r1, r1, r3
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	1ad1      	subs	r1, r2, r3
 8001ca8:	b2ca      	uxtb	r2, r1
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	1c59      	adds	r1, r3, #1
 8001cae:	61f9      	str	r1, [r7, #28]
 8001cb0:	3230      	adds	r2, #48	; 0x30
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	701a      	strb	r2, [r3, #0]
        i /= 10;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	4a11      	ldr	r2, [pc, #68]	; (8001d00 <itos+0xa8>)
 8001cba:	fb82 1203 	smull	r1, r2, r2, r3
 8001cbe:	1092      	asrs	r2, r2, #2
 8001cc0:	17db      	asrs	r3, r3, #31
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	603b      	str	r3, [r7, #0]
    } while (i);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1e1      	bne.n	8001c90 <itos+0x38>
    ptr--;
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	61fb      	str	r3, [r7, #28]
    while (*ptr) {
 8001cd2:	e007      	b.n	8001ce4 <itos+0x8c>
        *data++ = *ptr--;
 8001cd4:	69fa      	ldr	r2, [r7, #28]
 8001cd6:	1e53      	subs	r3, r2, #1
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	1c59      	adds	r1, r3, #1
 8001cde:	6079      	str	r1, [r7, #4]
 8001ce0:	7812      	ldrb	r2, [r2, #0]
 8001ce2:	701a      	strb	r2, [r3, #0]
    while (*ptr) {
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1f3      	bne.n	8001cd4 <itos+0x7c>
    }
    *data = '\0';
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]
    return data;
 8001cf2:	687b      	ldr	r3, [r7, #4]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3724      	adds	r7, #36	; 0x24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	66666667 	.word	0x66666667

08001d04 <utos0>:
 * @param[in]  i       The unsigned integer
 * @param[in]  digits  The number of digits
 *
 * @return     Returns the new end pointer of the string
 */
static inline char* utos0(char *data, uint32_t i, uint32_t digits) {
 8001d04:	b480      	push	{r7}
 8001d06:	b08d      	sub	sp, #52	; 0x34
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
    char buf[20] = { 0 };
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	f107 0318 	add.w	r3, r7, #24
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
    char *ptr = &buf[1];
 8001d22:	f107 0314 	add.w	r3, r7, #20
 8001d26:	3301      	adds	r3, #1
 8001d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    digits--;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	607b      	str	r3, [r7, #4]
    uint32_t n = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	62bb      	str	r3, [r7, #40]	; 0x28
    do {
        *ptr++ = '0' + (i % 10);
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <utos0+0xb8>)
 8001d38:	fba3 2301 	umull	r2, r3, r3, r1
 8001d3c:	08da      	lsrs	r2, r3, #3
 8001d3e:	4613      	mov	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	1aca      	subs	r2, r1, r3
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4c:	1c59      	adds	r1, r3, #1
 8001d4e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001d50:	3230      	adds	r2, #48	; 0x30
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	701a      	strb	r2, [r3, #0]
        i /= 10;
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	4a18      	ldr	r2, [pc, #96]	; (8001dbc <utos0+0xb8>)
 8001d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5e:	08db      	lsrs	r3, r3, #3
 8001d60:	60bb      	str	r3, [r7, #8]
        n++;
 8001d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d64:	3301      	adds	r3, #1
 8001d66:	62bb      	str	r3, [r7, #40]	; 0x28
    } while (i);
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1e2      	bne.n	8001d34 <utos0+0x30>
    ptr--;
 8001d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d70:	3b01      	subs	r3, #1
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (n++ <= digits) {
 8001d74:	e004      	b.n	8001d80 <utos0+0x7c>
        *data++ = '0';
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	60fa      	str	r2, [r7, #12]
 8001d7c:	2230      	movs	r2, #48	; 0x30
 8001d7e:	701a      	strb	r2, [r3, #0]
    while (n++ <= digits) {
 8001d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	62ba      	str	r2, [r7, #40]	; 0x28
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d2f4      	bcs.n	8001d76 <utos0+0x72>
    }
    while (*ptr) {
 8001d8c:	e007      	b.n	8001d9e <utos0+0x9a>
        *data++ = *ptr--;
 8001d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d90:	1e53      	subs	r3, r2, #1
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	1c59      	adds	r1, r3, #1
 8001d98:	60f9      	str	r1, [r7, #12]
 8001d9a:	7812      	ldrb	r2, [r2, #0]
 8001d9c:	701a      	strb	r2, [r3, #0]
    while (*ptr) {
 8001d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f3      	bne.n	8001d8e <utos0+0x8a>
    }
    *data = '\0';
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	701a      	strb	r2, [r3, #0]
    return data;
 8001dac:	68fb      	ldr	r3, [r7, #12]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3734      	adds	r7, #52	; 0x34
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	cccccccd 	.word	0xcccccccd

08001dc0 <ftos>:
 * @param[in]  i       The float
 * @param[in]  digits  The number of decimal places
 *
 * @return     Returns the new end pointer of the string
 */
static inline char* ftos(char *data, float a, uint32_t dp) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001dcc:	6079      	str	r1, [r7, #4]
    int32_t i = a;
 8001dce:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dd6:	ee17 3a90 	vmov	r3, s15
 8001dda:	61fb      	str	r3, [r7, #28]
    if (a < 0) {
 8001ddc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001de0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de8:	d515      	bpl.n	8001e16 <ftos+0x56>
        *data++ = '-';
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	1c5a      	adds	r2, r3, #1
 8001dee:	60fa      	str	r2, [r7, #12]
 8001df0:	222d      	movs	r2, #45	; 0x2d
 8001df2:	701a      	strb	r2, [r3, #0]
        i = -i;
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	425b      	negs	r3, r3
 8001df8:	61fb      	str	r3, [r7, #28]
        a = -a - i;
 8001dfa:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dfe:	eeb1 7a67 	vneg.f32	s14, s15
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	ee07 3a90 	vmov	s15, r3
 8001e08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e10:	edc7 7a02 	vstr	s15, [r7, #8]
 8001e14:	e00a      	b.n	8001e2c <ftos+0x6c>
    } else {
        a = a - i;
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	ee07 3a90 	vmov	s15, r3
 8001e1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e20:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e28:	edc7 7a02 	vstr	s15, [r7, #8]
    }
    data = itos(data, i);
 8001e2c:	69f9      	ldr	r1, [r7, #28]
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f7ff ff12 	bl	8001c58 <itos>
 8001e34:	60f8      	str	r0, [r7, #12]
    *data++ = '.';
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	60fa      	str	r2, [r7, #12]
 8001e3c:	222e      	movs	r2, #46	; 0x2e
 8001e3e:	701a      	strb	r2, [r3, #0]
    float d = a;
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	61bb      	str	r3, [r7, #24]
    uint32_t __dp = dp;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	617b      	str	r3, [r7, #20]
    while (dp--) {
 8001e48:	e007      	b.n	8001e5a <ftos+0x9a>
        d *= 10;
 8001e4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e4e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e56:	edc7 7a06 	vstr	s15, [r7, #24]
    while (dp--) {
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	1e5a      	subs	r2, r3, #1
 8001e5e:	607a      	str	r2, [r7, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1f2      	bne.n	8001e4a <ftos+0x8a>
    }
    if (__dp != 0)
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00e      	beq.n	8001e88 <ftos+0xc8>
        data = utos0(data, (uint32_t) (d + 0.5f), __dp);
 8001e6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e6e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001e72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	ee17 1a90 	vmov	r1, s15
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f7ff ff3f 	bl	8001d04 <utos0>
 8001e86:	60f8      	str	r0, [r7, #12]
    return data;
 8001e88:	68fb      	ldr	r3, [r7, #12]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3720      	adds	r7, #32
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <prints>:
}

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad) {
 8001e92:	b4f0      	push	{r4, r5, r6, r7}
 8001e94:	b08a      	sub	sp, #40	; 0x28
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
 8001e9e:	603b      	str	r3, [r7, #0]
    register int pc = 0, padchar = ' ';
 8001ea0:	2400      	movs	r4, #0
 8001ea2:	2320      	movs	r3, #32
 8001ea4:	4619      	mov	r1, r3

    if (width > 0) {
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	dd17      	ble.n	8001edc <prints+0x4a>
        register int len = 0;
 8001eac:	2500      	movs	r5, #0
        register const char *ptr;
        for (ptr = string; *ptr; ++ptr)
 8001eae:	68be      	ldr	r6, [r7, #8]
 8001eb0:	e001      	b.n	8001eb6 <prints+0x24>
            ++len;
 8001eb2:	3501      	adds	r5, #1
        for (ptr = string; *ptr; ++ptr)
 8001eb4:	3601      	adds	r6, #1
 8001eb6:	7833      	ldrb	r3, [r6, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1fa      	bne.n	8001eb2 <prints+0x20>
        if (len >= width)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	429d      	cmp	r5, r3
 8001ec0:	db02      	blt.n	8001ec8 <prints+0x36>
            width = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	e002      	b.n	8001ece <prints+0x3c>
        else
            width -= len;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	1b5b      	subs	r3, r3, r5
 8001ecc:	607b      	str	r3, [r7, #4]
        if (pad & PAD_ZERO)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <prints+0x4a>
            padchar = '0';
 8001ed8:	2330      	movs	r3, #48	; 0x30
 8001eda:	4619      	mov	r1, r3
    }
    if (!(pad & PAD_RIGHT)) {
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d12c      	bne.n	8001f40 <prints+0xae>
        for (; width > 0; --width) {
 8001ee6:	e012      	b.n	8001f0e <prints+0x7c>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
 8001eec:	460b      	mov	r3, r1
 8001eee:	623b      	str	r3, [r7, #32]
    **str = (char) c;
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6a3a      	ldr	r2, [r7, #32]
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	701a      	strb	r2, [r3, #0]
    ++(*str);
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	601a      	str	r2, [r3, #0]
}
 8001f04:	bf00      	nop
            printchar(out, padchar);
            ++pc;
 8001f06:	3401      	adds	r4, #1
        for (; width > 0; --width) {
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	607b      	str	r3, [r7, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	dce9      	bgt.n	8001ee8 <prints+0x56>
        }
    }
    for (; *string; ++string) {
 8001f14:	e014      	b.n	8001f40 <prints+0xae>
        printchar(out, *string);
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	61fb      	str	r3, [r7, #28]
 8001f20:	61ba      	str	r2, [r7, #24]
    **str = (char) c;
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	701a      	strb	r2, [r3, #0]
    ++(*str);
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	1c5a      	adds	r2, r3, #1
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	601a      	str	r2, [r3, #0]
}
 8001f36:	bf00      	nop
        ++pc;
 8001f38:	3401      	adds	r4, #1
    for (; *string; ++string) {
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1e6      	bne.n	8001f16 <prints+0x84>
    }
    for (; width > 0; --width) {
 8001f48:	e012      	b.n	8001f70 <prints+0xde>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	613b      	str	r3, [r7, #16]
    **str = (char) c;
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	701a      	strb	r2, [r3, #0]
    ++(*str);
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	601a      	str	r2, [r3, #0]
}
 8001f66:	bf00      	nop
        printchar(out, padchar);
        ++pc;
 8001f68:	3401      	adds	r4, #1
    for (; width > 0; --width) {
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	607b      	str	r3, [r7, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	dce9      	bgt.n	8001f4a <prints+0xb8>
    }

    return pc;
 8001f76:	4623      	mov	r3, r4
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3728      	adds	r7, #40	; 0x28
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bcf0      	pop	{r4, r5, r6, r7}
 8001f80:	4770      	bx	lr

08001f82 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad,
        int letbase) {
 8001f82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f86:	b08b      	sub	sp, #44	; 0x2c
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
 8001f90:	603b      	str	r3, [r7, #0]
    char print_buf[PRINT_BUF_LEN];
    register char *s;
    register int t, neg = 0, pc = 0;
 8001f92:	f04f 0900 	mov.w	r9, #0
 8001f96:	2600      	movs	r6, #0
    register unsigned int u = (unsigned int) i;
 8001f98:	68bd      	ldr	r5, [r7, #8]

    if (i == 0) {
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10c      	bne.n	8001fba <printi+0x38>
        print_buf[0] = '0';
 8001fa0:	2330      	movs	r3, #48	; 0x30
 8001fa2:	753b      	strb	r3, [r7, #20]
        print_buf[1] = '\0';
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	757b      	strb	r3, [r7, #21]
        return prints(out, print_buf, width, pad);
 8001fa8:	f107 0114 	add.w	r1, r7, #20
 8001fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f7ff ff6e 	bl	8001e92 <prints>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	e055      	b.n	8002066 <printi+0xe4>
    }

    if (sg && b == 10 && i < 0) {
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00a      	beq.n	8001fd6 <printi+0x54>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b0a      	cmp	r3, #10
 8001fc4:	d107      	bne.n	8001fd6 <printi+0x54>
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	da04      	bge.n	8001fd6 <printi+0x54>
        neg = 1;
 8001fcc:	f04f 0901 	mov.w	r9, #1
        u = (unsigned int) -i;
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	425b      	negs	r3, r3
 8001fd4:	461d      	mov	r5, r3
    }

    s = print_buf + PRINT_BUF_LEN - 1;
 8001fd6:	f107 0414 	add.w	r4, r7, #20
 8001fda:	340b      	adds	r4, #11
    *s = '\0';
 8001fdc:	2300      	movs	r3, #0
 8001fde:	7023      	strb	r3, [r4, #0]

    while (u) {
 8001fe0:	e015      	b.n	800200e <printi+0x8c>
        t = (unsigned int) u % b;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	fbb5 f2f3 	udiv	r2, r5, r3
 8001fe8:	fb02 f303 	mul.w	r3, r2, r3
 8001fec:	1aeb      	subs	r3, r5, r3
 8001fee:	4698      	mov	r8, r3
        if (t >= 10)
 8001ff0:	f1b8 0f09 	cmp.w	r8, #9
 8001ff4:	dd02      	ble.n	8001ffc <printi+0x7a>
            t += letbase - '0' - 10;
 8001ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ff8:	3b3a      	subs	r3, #58	; 0x3a
 8001ffa:	4498      	add	r8, r3
        *--s = (char) (t + '0');
 8001ffc:	fa5f f388 	uxtb.w	r3, r8
 8002000:	3c01      	subs	r4, #1
 8002002:	3330      	adds	r3, #48	; 0x30
 8002004:	b2db      	uxtb	r3, r3
 8002006:	7023      	strb	r3, [r4, #0]
        u /= b;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	fbb5 f5f3 	udiv	r5, r5, r3
    while (u) {
 800200e:	2d00      	cmp	r5, #0
 8002010:	d1e7      	bne.n	8001fe2 <printi+0x60>
    }

    if (neg) {
 8002012:	f1b9 0f00 	cmp.w	r9, #0
 8002016:	d01e      	beq.n	8002056 <printi+0xd4>
        if (width && (pad & PAD_ZERO)) {
 8002018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800201a:	2b00      	cmp	r3, #0
 800201c:	d018      	beq.n	8002050 <printi+0xce>
 800201e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d013      	beq.n	8002050 <printi+0xce>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
 800202c:	232d      	movs	r3, #45	; 0x2d
 800202e:	623b      	str	r3, [r7, #32]
    **str = (char) c;
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6a3a      	ldr	r2, [r7, #32]
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	701a      	strb	r2, [r3, #0]
    ++(*str);
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	1c5a      	adds	r2, r3, #1
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	601a      	str	r2, [r3, #0]
}
 8002044:	bf00      	nop
            printchar(out, '-');
            ++pc;
 8002046:	3601      	adds	r6, #1
            --width;
 8002048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800204a:	3b01      	subs	r3, #1
 800204c:	64bb      	str	r3, [r7, #72]	; 0x48
 800204e:	e002      	b.n	8002056 <printi+0xd4>
        } else {
            *--s = '-';
 8002050:	3c01      	subs	r4, #1
 8002052:	232d      	movs	r3, #45	; 0x2d
 8002054:	7023      	strb	r3, [r4, #0]
        }
    }

    return pc + prints(out, s, width, pad);
 8002056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002058:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800205a:	4621      	mov	r1, r4
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f7ff ff18 	bl	8001e92 <prints>
 8002062:	4603      	mov	r3, r0
 8002064:	4433      	add	r3, r6
}
 8002066:	4618      	mov	r0, r3
 8002068:	372c      	adds	r7, #44	; 0x2c
 800206a:	46bd      	mov	sp, r7
 800206c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002070 <printf_>:

static int printf_(char **out, float f, int width, int dp, int pad) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b090      	sub	sp, #64	; 0x40
 8002074:	af00      	add	r7, sp, #0
 8002076:	6178      	str	r0, [r7, #20]
 8002078:	ed87 0a04 	vstr	s0, [r7, #16]
 800207c:	60f9      	str	r1, [r7, #12]
 800207e:	60ba      	str	r2, [r7, #8]
 8002080:	607b      	str	r3, [r7, #4]
    char buf[40] = { 0 };
 8002082:	2300      	movs	r3, #0
 8002084:	61bb      	str	r3, [r7, #24]
 8002086:	f107 031c 	add.w	r3, r7, #28
 800208a:	2224      	movs	r2, #36	; 0x24
 800208c:	2100      	movs	r1, #0
 800208e:	4618      	mov	r0, r3
 8002090:	f007 f890 	bl	80091b4 <memset>
    ftos(buf, f, dp);
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	f107 0318 	add.w	r3, r7, #24
 800209a:	4611      	mov	r1, r2
 800209c:	ed97 0a04 	vldr	s0, [r7, #16]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fe8d 	bl	8001dc0 <ftos>
    return prints(out, buf, width, pad);
 80020a6:	f107 0118 	add.w	r1, r7, #24
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	6978      	ldr	r0, [r7, #20]
 80020b0:	f7ff feef 	bl	8001e92 <prints>
 80020b4:	4603      	mov	r3, r0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3740      	adds	r7, #64	; 0x40
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <print>:
 * @param out pointer to Output string
 * @param format Format string
 * @param args Arguments
 * @return length of string
 */
static int print(char **out, const char *format, va_list args) {
 80020c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020c4:	b08c      	sub	sp, #48	; 0x30
 80020c6:	af04      	add	r7, sp, #16
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
    register int width, pad, dp;
    register int pc = 0;
 80020ce:	2400      	movs	r4, #0
    char scr[2];

    for (; *format != 0; ++format) {
 80020d0:	e109      	b.n	80022e6 <print+0x226>
        if (*format == '%') {
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b25      	cmp	r3, #37	; 0x25
 80020d8:	f040 80ed 	bne.w	80022b6 <print+0x1f6>
            ++format;
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	3301      	adds	r3, #1
 80020e0:	60bb      	str	r3, [r7, #8]
            width = pad = dp = 0;
 80020e2:	f04f 0800 	mov.w	r8, #0
 80020e6:	4646      	mov	r6, r8
 80020e8:	4635      	mov	r5, r6
            if (*format == '\0')
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 80ff 	beq.w	80022f2 <print+0x232>
                break;
            if (*format == '%')
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b25      	cmp	r3, #37	; 0x25
 80020fa:	f000 80de 	beq.w	80022ba <print+0x1fa>
                goto out;
            if (*format == '-') {
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b2d      	cmp	r3, #45	; 0x2d
 8002104:	d109      	bne.n	800211a <print+0x5a>
                ++format;
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	3301      	adds	r3, #1
 800210a:	60bb      	str	r3, [r7, #8]
                pad = PAD_RIGHT;
 800210c:	2601      	movs	r6, #1
            }
            while (*format == '0') {
 800210e:	e004      	b.n	800211a <print+0x5a>
                ++format;
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	3301      	adds	r3, #1
 8002114:	60bb      	str	r3, [r7, #8]
                pad |= PAD_ZERO;
 8002116:	f046 0602 	orr.w	r6, r6, #2
            while (*format == '0') {
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b30      	cmp	r3, #48	; 0x30
 8002120:	d0f6      	beq.n	8002110 <print+0x50>
            }
            for (; *format >= '0' && *format <= '9'; ++format) {
 8002122:	e00b      	b.n	800213c <print+0x7c>
                width *= 10;
 8002124:	462b      	mov	r3, r5
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	442b      	add	r3, r5
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	461d      	mov	r5, r3
                width += *format - '0';
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	3b30      	subs	r3, #48	; 0x30
 8002134:	441d      	add	r5, r3
            for (; *format >= '0' && *format <= '9'; ++format) {
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	3301      	adds	r3, #1
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b2f      	cmp	r3, #47	; 0x2f
 8002142:	d903      	bls.n	800214c <print+0x8c>
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b39      	cmp	r3, #57	; 0x39
 800214a:	d9eb      	bls.n	8002124 <print+0x64>
            }
            if (*format == '.') {
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b2e      	cmp	r3, #46	; 0x2e
 8002152:	d117      	bne.n	8002184 <print+0xc4>
                ++format;
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	3301      	adds	r3, #1
 8002158:	60bb      	str	r3, [r7, #8]
                for (; *format >= '0' && *format <= '9'; ++format) {
 800215a:	e00b      	b.n	8002174 <print+0xb4>
                    dp *= 10;
 800215c:	4643      	mov	r3, r8
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4443      	add	r3, r8
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	4698      	mov	r8, r3
                    dp += *format - '0';
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	3b30      	subs	r3, #48	; 0x30
 800216c:	4498      	add	r8, r3
                for (; *format >= '0' && *format <= '9'; ++format) {
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	3301      	adds	r3, #1
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b2f      	cmp	r3, #47	; 0x2f
 800217a:	d903      	bls.n	8002184 <print+0xc4>
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b39      	cmp	r3, #57	; 0x39
 8002182:	d9eb      	bls.n	800215c <print+0x9c>
                }
            }
            if (*format == 's') {
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b73      	cmp	r3, #115	; 0x73
 800218a:	d112      	bne.n	80021b2 <print+0xf2>
                register char *s = (char*) va_arg(args, int);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	1d1a      	adds	r2, r3, #4
 8002190:	607a      	str	r2, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4698      	mov	r8, r3
                pc += prints(out, s ? s : "(null)", width, pad);
 8002196:	f1b8 0f00 	cmp.w	r8, #0
 800219a:	d001      	beq.n	80021a0 <print+0xe0>
 800219c:	4641      	mov	r1, r8
 800219e:	e000      	b.n	80021a2 <print+0xe2>
 80021a0:	4957      	ldr	r1, [pc, #348]	; (8002300 <print+0x240>)
 80021a2:	4633      	mov	r3, r6
 80021a4:	462a      	mov	r2, r5
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f7ff fe73 	bl	8001e92 <prints>
 80021ac:	4603      	mov	r3, r0
 80021ae:	441c      	add	r4, r3
                continue;
 80021b0:	e096      	b.n	80022e0 <print+0x220>
            }
            if (*format == 'd') {
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b64      	cmp	r3, #100	; 0x64
 80021b8:	d10f      	bne.n	80021da <print+0x11a>
                pc += printi(out, va_arg(args, int), 10, 1, width, pad, 'a');
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	1d1a      	adds	r2, r3, #4
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	6819      	ldr	r1, [r3, #0]
 80021c2:	2361      	movs	r3, #97	; 0x61
 80021c4:	9302      	str	r3, [sp, #8]
 80021c6:	9601      	str	r6, [sp, #4]
 80021c8:	9500      	str	r5, [sp, #0]
 80021ca:	2301      	movs	r3, #1
 80021cc:	220a      	movs	r2, #10
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f7ff fed7 	bl	8001f82 <printi>
 80021d4:	4603      	mov	r3, r0
 80021d6:	441c      	add	r4, r3
                continue;
 80021d8:	e082      	b.n	80022e0 <print+0x220>
            }
            if (*format == 'x') {
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b78      	cmp	r3, #120	; 0x78
 80021e0:	d10f      	bne.n	8002202 <print+0x142>
                pc += printi(out, va_arg(args, int), 16, 0, width, pad, 'a');
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	1d1a      	adds	r2, r3, #4
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	6819      	ldr	r1, [r3, #0]
 80021ea:	2361      	movs	r3, #97	; 0x61
 80021ec:	9302      	str	r3, [sp, #8]
 80021ee:	9601      	str	r6, [sp, #4]
 80021f0:	9500      	str	r5, [sp, #0]
 80021f2:	2300      	movs	r3, #0
 80021f4:	2210      	movs	r2, #16
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f7ff fec3 	bl	8001f82 <printi>
 80021fc:	4603      	mov	r3, r0
 80021fe:	441c      	add	r4, r3
                continue;
 8002200:	e06e      	b.n	80022e0 <print+0x220>
            }
            if (*format == 'X') {
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b58      	cmp	r3, #88	; 0x58
 8002208:	d10f      	bne.n	800222a <print+0x16a>
                pc += printi(out, va_arg(args, int), 16, 0, width, pad, 'A');
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	1d1a      	adds	r2, r3, #4
 800220e:	607a      	str	r2, [r7, #4]
 8002210:	6819      	ldr	r1, [r3, #0]
 8002212:	2341      	movs	r3, #65	; 0x41
 8002214:	9302      	str	r3, [sp, #8]
 8002216:	9601      	str	r6, [sp, #4]
 8002218:	9500      	str	r5, [sp, #0]
 800221a:	2300      	movs	r3, #0
 800221c:	2210      	movs	r2, #16
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f7ff feaf 	bl	8001f82 <printi>
 8002224:	4603      	mov	r3, r0
 8002226:	441c      	add	r4, r3
                continue;
 8002228:	e05a      	b.n	80022e0 <print+0x220>
            }
            if (*format == 'u') {
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b75      	cmp	r3, #117	; 0x75
 8002230:	d10f      	bne.n	8002252 <print+0x192>
                pc += printi(out, va_arg(args, int), 10, 0, width, pad, 'a');
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	1d1a      	adds	r2, r3, #4
 8002236:	607a      	str	r2, [r7, #4]
 8002238:	6819      	ldr	r1, [r3, #0]
 800223a:	2361      	movs	r3, #97	; 0x61
 800223c:	9302      	str	r3, [sp, #8]
 800223e:	9601      	str	r6, [sp, #4]
 8002240:	9500      	str	r5, [sp, #0]
 8002242:	2300      	movs	r3, #0
 8002244:	220a      	movs	r2, #10
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f7ff fe9b 	bl	8001f82 <printi>
 800224c:	4603      	mov	r3, r0
 800224e:	441c      	add	r4, r3
                continue;
 8002250:	e046      	b.n	80022e0 <print+0x220>
            }
            if (*format == 'c') {
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b63      	cmp	r3, #99	; 0x63
 8002258:	d111      	bne.n	800227e <print+0x1be>
                /* char are converted to int then pushed on the stack */
                scr[0] = (char) va_arg(args, int);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	1d1a      	adds	r2, r3, #4
 800225e:	607a      	str	r2, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	b2db      	uxtb	r3, r3
 8002264:	753b      	strb	r3, [r7, #20]
                scr[1] = '\0';
 8002266:	2300      	movs	r3, #0
 8002268:	757b      	strb	r3, [r7, #21]
                pc += prints(out, scr, width, pad);
 800226a:	f107 0114 	add.w	r1, r7, #20
 800226e:	4633      	mov	r3, r6
 8002270:	462a      	mov	r2, r5
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f7ff fe0d 	bl	8001e92 <prints>
 8002278:	4603      	mov	r3, r0
 800227a:	441c      	add	r4, r3
                continue;
 800227c:	e030      	b.n	80022e0 <print+0x220>
            }
            if (*format == 'f') {
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b66      	cmp	r3, #102	; 0x66
 8002284:	d12c      	bne.n	80022e0 <print+0x220>
                pc += printf_(out, va_arg(args, double), width, dp, pad);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3307      	adds	r3, #7
 800228a:	f023 0307 	bic.w	r3, r3, #7
 800228e:	f103 0208 	add.w	r2, r3, #8
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002298:	4610      	mov	r0, r2
 800229a:	4619      	mov	r1, r3
 800229c:	f7fe fc48 	bl	8000b30 <__aeabi_d2f>
 80022a0:	4633      	mov	r3, r6
 80022a2:	4642      	mov	r2, r8
 80022a4:	4629      	mov	r1, r5
 80022a6:	ee00 0a10 	vmov	s0, r0
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f7ff fee0 	bl	8002070 <printf_>
 80022b0:	4603      	mov	r3, r0
 80022b2:	441c      	add	r4, r3
                continue;
 80022b4:	e014      	b.n	80022e0 <print+0x220>
            }
        } else {
            out: printchar(out, *format);
 80022b6:	bf00      	nop
 80022b8:	e000      	b.n	80022bc <print+0x1fc>
                goto out;
 80022ba:	bf00      	nop
            out: printchar(out, *format);
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	461a      	mov	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	61fb      	str	r3, [r7, #28]
 80022c6:	61ba      	str	r2, [r7, #24]
    **str = (char) c;
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	701a      	strb	r2, [r3, #0]
    ++(*str);
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	601a      	str	r2, [r3, #0]
}
 80022dc:	bf00      	nop
            ++pc;
 80022de:	3401      	adds	r4, #1
    for (; *format != 0; ++format) {
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	3301      	adds	r3, #1
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f47f aef1 	bne.w	80020d2 <print+0x12>
 80022f0:	e000      	b.n	80022f4 <print+0x234>
                break;
 80022f2:	bf00      	nop
        }
    }
    va_end(args);
    return pc;
 80022f4:	4623      	mov	r3, r4
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3720      	adds	r7, #32
 80022fa:	46bd      	mov	sp, r7
 80022fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002300:	080093b0 	.word	0x080093b0

08002304 <write_command>:
uint8_t buf_ptr = 0;
static uint8_t tft_dma_bufs[2][TFT_DMA_BUF_SIZE];
#define curr_tft_dma_buf tft_dma_bufs[buf_ptr]

/* TFT SPI communication - with MCU */
static inline void write_command(uint8_t command) {
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	71fb      	strb	r3, [r7, #7]
    while (HAL_SPI_GetState(&TFT_SPI) != HAL_SPI_STATE_READY)
 800230e:	bf00      	nop
 8002310:	480c      	ldr	r0, [pc, #48]	; (8002344 <write_command+0x40>)
 8002312:	f004 fd5d 	bl	8006dd0 <HAL_SPI_GetState>
 8002316:	4603      	mov	r3, r0
 8002318:	2b01      	cmp	r3, #1
 800231a:	d1f9      	bne.n	8002310 <write_command+0xc>
        // wait for the spi to be ready
        ;

    HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_RESET); // Data-Command Pin 0-Command 1-Data
 800231c:	2200      	movs	r2, #0
 800231e:	2110      	movs	r1, #16
 8002320:	4809      	ldr	r0, [pc, #36]	; (8002348 <write_command+0x44>)
 8002322:	f003 fccb 	bl	8005cbc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&TFT_SPI, (uint8_t*) &command, 1, 1);
 8002326:	1df9      	adds	r1, r7, #7
 8002328:	2301      	movs	r3, #1
 800232a:	2201      	movs	r2, #1
 800232c:	4805      	ldr	r0, [pc, #20]	; (8002344 <write_command+0x40>)
 800232e:	f004 fa3e 	bl	80067ae <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);
 8002332:	2201      	movs	r2, #1
 8002334:	2110      	movs	r1, #16
 8002336:	4804      	ldr	r0, [pc, #16]	; (8002348 <write_command+0x44>)
 8002338:	f003 fcc0 	bl	8005cbc <HAL_GPIO_WritePin>
}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	2000d7f0 	.word	0x2000d7f0
 8002348:	40020800 	.word	0x40020800

0800234c <write_data>:
static inline void write_data(uint8_t *data, uint16_t size) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&TFT_SPI, (uint8_t*) data, size, 1);
 8002358:	887a      	ldrh	r2, [r7, #2]
 800235a:	2301      	movs	r3, #1
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4803      	ldr	r0, [pc, #12]	; (800236c <write_data+0x20>)
 8002360:	f004 fa25 	bl	80067ae <HAL_SPI_Transmit>
}
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	2000d7f0 	.word	0x2000d7f0

08002370 <write_many>:
static inline void write_many(uint8_t command, uint8_t *data, uint16_t size) {
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	6039      	str	r1, [r7, #0]
 800237a:	71fb      	strb	r3, [r7, #7]
 800237c:	4613      	mov	r3, r2
 800237e:	80bb      	strh	r3, [r7, #4]
    write_command(command);
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ffbe 	bl	8002304 <write_command>
    write_data(data, size);
 8002388:	88bb      	ldrh	r3, [r7, #4]
 800238a:	4619      	mov	r1, r3
 800238c:	6838      	ldr	r0, [r7, #0]
 800238e:	f7ff ffdd 	bl	800234c <write_data>
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <write_many_dma>:
static inline void write_many_dma(uint8_t command, uint8_t *data, uint16_t size) {
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	6039      	str	r1, [r7, #0]
 80023a6:	71fb      	strb	r3, [r7, #7]
 80023a8:	4613      	mov	r3, r2
 80023aa:	80bb      	strh	r3, [r7, #4]
    write_command(command);
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff ffa8 	bl	8002304 <write_command>
    HAL_SPI_Transmit_DMA(&TFT_SPI, (uint8_t*) data, size);
 80023b4:	88bb      	ldrh	r3, [r7, #4]
 80023b6:	461a      	mov	r2, r3
 80023b8:	6839      	ldr	r1, [r7, #0]
 80023ba:	4803      	ldr	r0, [pc, #12]	; (80023c8 <write_many_dma+0x2c>)
 80023bc:	f004 fb34 	bl	8006a28 <HAL_SPI_Transmit_DMA>
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	2000d7f0 	.word	0x2000d7f0

080023cc <write_byte>:
static inline void write_byte(uint8_t command, uint8_t data) {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	460a      	mov	r2, r1
 80023d6:	71fb      	strb	r3, [r7, #7]
 80023d8:	4613      	mov	r3, r2
 80023da:	71bb      	strb	r3, [r7, #6]
    write_command(command);
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff ff90 	bl	8002304 <write_command>
    write_data(&data, 1);
 80023e4:	1dbb      	adds	r3, r7, #6
 80023e6:	2101      	movs	r1, #1
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ffaf 	bl	800234c <write_data>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <write_2hword>:
static inline void write_2hword(uint8_t command, uint16_t a, uint16_t b) {
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	71fb      	strb	r3, [r7, #7]
 8002400:	460b      	mov	r3, r1
 8002402:	80bb      	strh	r3, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	807b      	strh	r3, [r7, #2]
    write_command(command);
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff ff7a 	bl	8002304 <write_command>
    uint8_t buf[4] = { a >> 8, a & 0xFF, b >> 8, b & 0xFF };
 8002410:	88bb      	ldrh	r3, [r7, #4]
 8002412:	0a1b      	lsrs	r3, r3, #8
 8002414:	b29b      	uxth	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	733b      	strb	r3, [r7, #12]
 800241a:	88bb      	ldrh	r3, [r7, #4]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	737b      	strb	r3, [r7, #13]
 8002420:	887b      	ldrh	r3, [r7, #2]
 8002422:	0a1b      	lsrs	r3, r3, #8
 8002424:	b29b      	uxth	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	73bb      	strb	r3, [r7, #14]
 800242a:	887b      	ldrh	r3, [r7, #2]
 800242c:	b2db      	uxtb	r3, r3
 800242e:	73fb      	strb	r3, [r7, #15]
    write_data(buf, 4);
 8002430:	f107 030c 	add.w	r3, r7, #12
 8002434:	2104      	movs	r1, #4
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff ff88 	bl	800234c <write_data>
}
 800243c:	bf00      	nop
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <tft_clear>:

/**
 * @brief Clear the whole text buffer
 *
 */
static inline void tft_clear(void) {
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
    for (uint8_t y = 0; y < char_max_y; y++) {
 800244a:	2300      	movs	r3, #0
 800244c:	71fb      	strb	r3, [r7, #7]
 800244e:	e023      	b.n	8002498 <tft_clear+0x54>
        for (uint8_t x = 0; x < char_max_x; x++) {
 8002450:	2300      	movs	r3, #0
 8002452:	71bb      	strb	r3, [r7, #6]
 8002454:	e018      	b.n	8002488 <tft_clear+0x44>
            curr_text_buf[TFT_XY(x, y)] = ' ';
 8002456:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <tft_clear+0x6c>)
 8002458:	6819      	ldr	r1, [r3, #0]
 800245a:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <tft_clear+0x6c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	4a13      	ldr	r2, [pc, #76]	; (80024b4 <tft_clear+0x70>)
 8002466:	7812      	ldrb	r2, [r2, #0]
 8002468:	fb03 f202 	mul.w	r2, r3, r2
 800246c:	79bb      	ldrb	r3, [r7, #6]
 800246e:	441a      	add	r2, r3
 8002470:	4603      	mov	r3, r0
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4403      	add	r3, r0
 8002476:	015b      	lsls	r3, r3, #5
 8002478:	440b      	add	r3, r1
 800247a:	4413      	add	r3, r2
 800247c:	3301      	adds	r3, #1
 800247e:	2220      	movs	r2, #32
 8002480:	701a      	strb	r2, [r3, #0]
        for (uint8_t x = 0; x < char_max_x; x++) {
 8002482:	79bb      	ldrb	r3, [r7, #6]
 8002484:	3301      	adds	r3, #1
 8002486:	71bb      	strb	r3, [r7, #6]
 8002488:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <tft_clear+0x70>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	79ba      	ldrb	r2, [r7, #6]
 800248e:	429a      	cmp	r2, r3
 8002490:	d3e1      	bcc.n	8002456 <tft_clear+0x12>
    for (uint8_t y = 0; y < char_max_y; y++) {
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	3301      	adds	r3, #1
 8002496:	71fb      	strb	r3, [r7, #7]
 8002498:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <tft_clear+0x74>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	79fa      	ldrb	r2, [r7, #7]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d3d6      	bcc.n	8002450 <tft_clear+0xc>
        }
    }
}
 80024a2:	bf00      	nop
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	20000000 	.word	0x20000000
 80024b4:	20008181 	.word	0x20008181
 80024b8:	20008182 	.word	0x20008182

080024bc <tft_clear_full>:

/**
 * @brief Clear the whole text buffer and color buffers
 *
 */
static inline void tft_clear_full(void) {
 80024bc:	b490      	push	{r4, r7}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
    for (uint8_t y = 0; y < char_max_y; y++) {
 80024c2:	2300      	movs	r3, #0
 80024c4:	71fb      	strb	r3, [r7, #7]
 80024c6:	e050      	b.n	800256a <tft_clear_full+0xae>
        for (uint8_t x = 0; x < char_max_x; x++) {
 80024c8:	2300      	movs	r3, #0
 80024ca:	71bb      	strb	r3, [r7, #6]
 80024cc:	e045      	b.n	800255a <tft_clear_full+0x9e>
            uint16_t idx = TFT_XY(x, y);
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	4b2b      	ldr	r3, [pc, #172]	; (8002580 <tft_clear_full+0xc4>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	fb12 f303 	smulbb	r3, r2, r3
 80024dc:	b29a      	uxth	r2, r3
 80024de:	79bb      	ldrb	r3, [r7, #6]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	4413      	add	r3, r2
 80024e4:	80bb      	strh	r3, [r7, #4]
            curr_text_buf[idx] = ' ';
 80024e6:	4b27      	ldr	r3, [pc, #156]	; (8002584 <tft_clear_full+0xc8>)
 80024e8:	6819      	ldr	r1, [r3, #0]
 80024ea:	4b26      	ldr	r3, [pc, #152]	; (8002584 <tft_clear_full+0xc8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	88ba      	ldrh	r2, [r7, #4]
 80024f4:	4603      	mov	r3, r0
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4403      	add	r3, r0
 80024fa:	015b      	lsls	r3, r3, #5
 80024fc:	440b      	add	r3, r1
 80024fe:	4413      	add	r3, r2
 8002500:	3301      	adds	r3, #1
 8002502:	2220      	movs	r2, #32
 8002504:	701a      	strb	r2, [r3, #0]
            curr_text_color_buf[idx] = curr_text_color;
 8002506:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <tft_clear_full+0xc8>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	4b1e      	ldr	r3, [pc, #120]	; (8002584 <tft_clear_full+0xc8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	88b9      	ldrh	r1, [r7, #4]
 8002514:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <tft_clear_full+0xcc>)
 8002516:	881c      	ldrh	r4, [r3, #0]
 8002518:	4603      	mov	r3, r0
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4403      	add	r3, r0
 800251e:	015b      	lsls	r3, r3, #5
 8002520:	440b      	add	r3, r1
 8002522:	33a0      	adds	r3, #160	; 0xa0
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	4413      	add	r3, r2
 8002528:	4622      	mov	r2, r4
 800252a:	805a      	strh	r2, [r3, #2]
            curr_bg_color_buf[idx] = curr_bg_color;
 800252c:	4b15      	ldr	r3, [pc, #84]	; (8002584 <tft_clear_full+0xc8>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4b14      	ldr	r3, [pc, #80]	; (8002584 <tft_clear_full+0xc8>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	88b9      	ldrh	r1, [r7, #4]
 800253a:	4b14      	ldr	r3, [pc, #80]	; (800258c <tft_clear_full+0xd0>)
 800253c:	881c      	ldrh	r4, [r3, #0]
 800253e:	4603      	mov	r3, r0
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4403      	add	r3, r0
 8002544:	015b      	lsls	r3, r3, #5
 8002546:	440b      	add	r3, r1
 8002548:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	4413      	add	r3, r2
 8002550:	4622      	mov	r2, r4
 8002552:	805a      	strh	r2, [r3, #2]
        for (uint8_t x = 0; x < char_max_x; x++) {
 8002554:	79bb      	ldrb	r3, [r7, #6]
 8002556:	3301      	adds	r3, #1
 8002558:	71bb      	strb	r3, [r7, #6]
 800255a:	4b09      	ldr	r3, [pc, #36]	; (8002580 <tft_clear_full+0xc4>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	79ba      	ldrb	r2, [r7, #6]
 8002560:	429a      	cmp	r2, r3
 8002562:	d3b4      	bcc.n	80024ce <tft_clear_full+0x12>
    for (uint8_t y = 0; y < char_max_y; y++) {
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	3301      	adds	r3, #1
 8002568:	71fb      	strb	r3, [r7, #7]
 800256a:	4b09      	ldr	r3, [pc, #36]	; (8002590 <tft_clear_full+0xd4>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	79fa      	ldrb	r2, [r7, #7]
 8002570:	429a      	cmp	r2, r3
 8002572:	d3a9      	bcc.n	80024c8 <tft_clear_full+0xc>
        }
    }
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bc90      	pop	{r4, r7}
 800257e:	4770      	bx	lr
 8002580:	20008181 	.word	0x20008181
 8002584:	20000000 	.word	0x20000000
 8002588:	2000817c 	.word	0x2000817c
 800258c:	20008178 	.word	0x20008178
 8002590:	20008182 	.word	0x20008182

08002594 <tft_set_region>:

static inline void tft_set_region(uint16_t x, uint16_t y, uint16_t w,
        uint16_t h) {
 8002594:	b590      	push	{r4, r7, lr}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	4604      	mov	r4, r0
 800259c:	4608      	mov	r0, r1
 800259e:	4611      	mov	r1, r2
 80025a0:	461a      	mov	r2, r3
 80025a2:	4623      	mov	r3, r4
 80025a4:	80fb      	strh	r3, [r7, #6]
 80025a6:	4603      	mov	r3, r0
 80025a8:	80bb      	strh	r3, [r7, #4]
 80025aa:	460b      	mov	r3, r1
 80025ac:	807b      	strh	r3, [r7, #2]
 80025ae:	4613      	mov	r3, r2
 80025b0:	803b      	strh	r3, [r7, #0]
    uint16_t startx = x;
 80025b2:	88fb      	ldrh	r3, [r7, #6]
 80025b4:	81fb      	strh	r3, [r7, #14]
    uint16_t starty = y;
 80025b6:	88bb      	ldrh	r3, [r7, #4]
 80025b8:	81bb      	strh	r3, [r7, #12]
    uint16_t endx = x + w;
 80025ba:	88fa      	ldrh	r2, [r7, #6]
 80025bc:	887b      	ldrh	r3, [r7, #2]
 80025be:	4413      	add	r3, r2
 80025c0:	817b      	strh	r3, [r7, #10]
    uint16_t endy = y + h;
 80025c2:	88ba      	ldrh	r2, [r7, #4]
 80025c4:	883b      	ldrh	r3, [r7, #0]
 80025c6:	4413      	add	r3, r2
 80025c8:	813b      	strh	r3, [r7, #8]

#ifdef MODEL_ST7735
    startx += col_shift;
 80025ca:	4b14      	ldr	r3, [pc, #80]	; (800261c <tft_set_region+0x88>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	89fb      	ldrh	r3, [r7, #14]
 80025d2:	4413      	add	r3, r2
 80025d4:	81fb      	strh	r3, [r7, #14]
    starty += row_shift;
 80025d6:	4b12      	ldr	r3, [pc, #72]	; (8002620 <tft_set_region+0x8c>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	b29a      	uxth	r2, r3
 80025dc:	89bb      	ldrh	r3, [r7, #12]
 80025de:	4413      	add	r3, r2
 80025e0:	81bb      	strh	r3, [r7, #12]
    endx += col_shift;
 80025e2:	4b0e      	ldr	r3, [pc, #56]	; (800261c <tft_set_region+0x88>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	897b      	ldrh	r3, [r7, #10]
 80025ea:	4413      	add	r3, r2
 80025ec:	817b      	strh	r3, [r7, #10]
    endy += row_shift;
 80025ee:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <tft_set_region+0x8c>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	893b      	ldrh	r3, [r7, #8]
 80025f6:	4413      	add	r3, r2
 80025f8:	813b      	strh	r3, [r7, #8]
#endif

    write_2hword(0x2a, startx, endx);  // Column addr set
 80025fa:	897a      	ldrh	r2, [r7, #10]
 80025fc:	89fb      	ldrh	r3, [r7, #14]
 80025fe:	4619      	mov	r1, r3
 8002600:	202a      	movs	r0, #42	; 0x2a
 8002602:	f7ff fef8 	bl	80023f6 <write_2hword>
    write_2hword(0x2b, starty, endy);  // Row addr set
 8002606:	893a      	ldrh	r2, [r7, #8]
 8002608:	89bb      	ldrh	r3, [r7, #12]
 800260a:	4619      	mov	r1, r3
 800260c:	202b      	movs	r0, #43	; 0x2b
 800260e:	f7ff fef2 	bl	80023f6 <write_2hword>
}
 8002612:	bf00      	nop
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	bd90      	pop	{r4, r7, pc}
 800261a:	bf00      	nop
 800261c:	200087c6 	.word	0x200087c6
 8002620:	200087c7 	.word	0x200087c7

08002624 <tft_init>:
 * @param  text_color: default text color
 * @param  text_color_sp: default special text color
 * @param  highlight_color: default highlight color
 */
void tft_init(TFT_ORIENTATION orientation, uint16_t bg_color,
        uint16_t text_color, uint16_t text_color_sp, uint16_t highlight_color) {
 8002624:	b590      	push	{r4, r7, lr}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	4604      	mov	r4, r0
 800262c:	4608      	mov	r0, r1
 800262e:	4611      	mov	r1, r2
 8002630:	461a      	mov	r2, r3
 8002632:	4623      	mov	r3, r4
 8002634:	71fb      	strb	r3, [r7, #7]
 8002636:	4603      	mov	r3, r0
 8002638:	80bb      	strh	r3, [r7, #4]
 800263a:	460b      	mov	r3, r1
 800263c:	807b      	strh	r3, [r7, #2]
 800263e:	4613      	mov	r3, r2
 8002640:	803b      	strh	r3, [r7, #0]
    curr_screen = 0;
 8002642:	4b6e      	ldr	r3, [pc, #440]	; (80027fc <tft_init+0x1d8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2200      	movs	r2, #0
 8002648:	701a      	strb	r2, [r3, #0]
    tft_orientation = orientation;
 800264a:	4a6d      	ldr	r2, [pc, #436]	; (8002800 <tft_init+0x1dc>)
 800264c:	79fb      	ldrb	r3, [r7, #7]
 800264e:	7013      	strb	r3, [r2, #0]

    char_max_x =
            (orientation % 2) ? CHAR_MAX_X_HORIZONTAL : CHAR_MAX_X_VERTICAL;
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	b2db      	uxtb	r3, r3
    char_max_x =
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <tft_init+0x3c>
 800265c:	2214      	movs	r2, #20
 800265e:	e000      	b.n	8002662 <tft_init+0x3e>
 8002660:	2210      	movs	r2, #16
 8002662:	4b68      	ldr	r3, [pc, #416]	; (8002804 <tft_init+0x1e0>)
 8002664:	701a      	strb	r2, [r3, #0]
    char_max_y =
            (orientation % 2) ? CHAR_MAX_Y_HORIZONTAL : CHAR_MAX_Y_VERTICAL;
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	b2db      	uxtb	r3, r3
    char_max_y =
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <tft_init+0x52>
 8002672:	2208      	movs	r2, #8
 8002674:	e000      	b.n	8002678 <tft_init+0x54>
 8002676:	220a      	movs	r2, #10
 8002678:	4b63      	ldr	r3, [pc, #396]	; (8002808 <tft_init+0x1e4>)
 800267a:	701a      	strb	r2, [r3, #0]

    TFT_SPI_INIT();
 800267c:	f001 f90c 	bl	8003898 <MX_SPI1_Init>

    HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_SET);
 8002680:	2201      	movs	r2, #1
 8002682:	2140      	movs	r1, #64	; 0x40
 8002684:	4861      	ldr	r0, [pc, #388]	; (800280c <tft_init+0x1e8>)
 8002686:	f003 fb19 	bl	8005cbc <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800268a:	2064      	movs	r0, #100	; 0x64
 800268c:	f001 ffd2 	bl	8004634 <HAL_Delay>
    HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_RESET);
 8002690:	2200      	movs	r2, #0
 8002692:	2140      	movs	r1, #64	; 0x40
 8002694:	485d      	ldr	r0, [pc, #372]	; (800280c <tft_init+0x1e8>)
 8002696:	f003 fb11 	bl	8005cbc <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800269a:	2064      	movs	r0, #100	; 0x64
 800269c:	f001 ffca 	bl	8004634 <HAL_Delay>
    HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_SET);
 80026a0:	2201      	movs	r2, #1
 80026a2:	2140      	movs	r1, #64	; 0x40
 80026a4:	4859      	ldr	r0, [pc, #356]	; (800280c <tft_init+0x1e8>)
 80026a6:	f003 fb09 	bl	8005cbc <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80026aa:	2064      	movs	r0, #100	; 0x64
 80026ac:	f001 ffc2 	bl	8004634 <HAL_Delay>

    HAL_GPIO_WritePin(TFT_BL_GPIO_Port, TFT_BL_Pin, GPIO_PIN_SET);
 80026b0:	2201      	movs	r2, #1
 80026b2:	2101      	movs	r1, #1
 80026b4:	4856      	ldr	r0, [pc, #344]	; (8002810 <tft_init+0x1ec>)
 80026b6:	f003 fb01 	bl	8005cbc <HAL_GPIO_WritePin>

#if defined(TFT_CS_Pin) && !defined(MODEL_ST7735)
    HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_SET);
#endif

    uint32_t i = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
    while (tft_init_code[++i] != TFT_EOF_MARKER) {
 80026be:	e058      	b.n	8002772 <tft_init+0x14e>
        if (tft_init_code[i] == TFT_ORIENTATION_CMD) {
 80026c0:	4a54      	ldr	r2, [pc, #336]	; (8002814 <tft_init+0x1f0>)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	4413      	add	r3, r2
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b36      	cmp	r3, #54	; 0x36
 80026ca:	d110      	bne.n	80026ee <tft_init+0xca>
            write_byte(tft_init_code[i],
 80026cc:	4a51      	ldr	r2, [pc, #324]	; (8002814 <tft_init+0x1f0>)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4413      	add	r3, r2
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	4a4a      	ldr	r2, [pc, #296]	; (8002800 <tft_init+0x1dc>)
 80026d6:	7812      	ldrb	r2, [r2, #0]
 80026d8:	4611      	mov	r1, r2
 80026da:	4a4f      	ldr	r2, [pc, #316]	; (8002818 <tft_init+0x1f4>)
 80026dc:	5c52      	ldrb	r2, [r2, r1]
 80026de:	4611      	mov	r1, r2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fe73 	bl	80023cc <write_byte>
                    tft_orientation_init_code[tft_orientation]);
            i++;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	3301      	adds	r3, #1
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	e041      	b.n	8002772 <tft_init+0x14e>
        } else if (tft_init_code[i] == TFT_DELAY_MARKER) {
 80026ee:	4a49      	ldr	r2, [pc, #292]	; (8002814 <tft_init+0x1f0>)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4413      	add	r3, r2
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2bff      	cmp	r3, #255	; 0xff
 80026f8:	d10a      	bne.n	8002710 <tft_init+0xec>
            i += 3;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	3303      	adds	r3, #3
 80026fe:	60fb      	str	r3, [r7, #12]
            HAL_Delay(tft_init_code[i]);
 8002700:	4a44      	ldr	r2, [pc, #272]	; (8002814 <tft_init+0x1f0>)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	4413      	add	r3, r2
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f001 ff93 	bl	8004634 <HAL_Delay>
 800270e:	e030      	b.n	8002772 <tft_init+0x14e>
        } else if (tft_init_code[i + 1] == TFT_EOL_MARKER) {
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	3301      	adds	r3, #1
 8002714:	4a3f      	ldr	r2, [pc, #252]	; (8002814 <tft_init+0x1f0>)
 8002716:	5cd3      	ldrb	r3, [r2, r3]
 8002718:	2b43      	cmp	r3, #67	; 0x43
 800271a:	d10a      	bne.n	8002732 <tft_init+0x10e>
            write_command(tft_init_code[i]);
 800271c:	4a3d      	ldr	r2, [pc, #244]	; (8002814 <tft_init+0x1f0>)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4413      	add	r3, r2
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff fded 	bl	8002304 <write_command>
            i++;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	3301      	adds	r3, #1
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	e01f      	b.n	8002772 <tft_init+0x14e>
        } else {
            int len;
            for (len = 0; tft_init_code[i + len + 1] != TFT_EOL_MARKER; len++) {
 8002732:	2300      	movs	r3, #0
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	e002      	b.n	800273e <tft_init+0x11a>
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	3301      	adds	r3, #1
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4413      	add	r3, r2
 8002744:	3301      	adds	r3, #1
 8002746:	4a33      	ldr	r2, [pc, #204]	; (8002814 <tft_init+0x1f0>)
 8002748:	5cd3      	ldrb	r3, [r2, r3]
 800274a:	2b43      	cmp	r3, #67	; 0x43
 800274c:	d1f4      	bne.n	8002738 <tft_init+0x114>
            }
            write_many(tft_init_code[i], (uint8_t*) &tft_init_code[i + 1], len);
 800274e:	4a31      	ldr	r2, [pc, #196]	; (8002814 <tft_init+0x1f0>)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4413      	add	r3, r2
 8002754:	7818      	ldrb	r0, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	3301      	adds	r3, #1
 800275a:	4a2e      	ldr	r2, [pc, #184]	; (8002814 <tft_init+0x1f0>)
 800275c:	4413      	add	r3, r2
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	b292      	uxth	r2, r2
 8002762:	4619      	mov	r1, r3
 8002764:	f7ff fe04 	bl	8002370 <write_many>
            i += len + 1;
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4413      	add	r3, r2
 800276e:	3301      	adds	r3, #1
 8002770:	60fb      	str	r3, [r7, #12]
    while (tft_init_code[++i] != TFT_EOF_MARKER) {
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	3301      	adds	r3, #1
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	4a26      	ldr	r2, [pc, #152]	; (8002814 <tft_init+0x1f0>)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4413      	add	r3, r2
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b42      	cmp	r3, #66	; 0x42
 8002782:	d19d      	bne.n	80026c0 <tft_init+0x9c>
        }
    }

#ifdef MODEL_ST7735
    switch (tft_orientation) {
 8002784:	4b1e      	ldr	r3, [pc, #120]	; (8002800 <tft_init+0x1dc>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b03      	cmp	r3, #3
 800278a:	d01a      	beq.n	80027c2 <tft_init+0x19e>
 800278c:	2b03      	cmp	r3, #3
 800278e:	dc03      	bgt.n	8002798 <tft_init+0x174>
 8002790:	2b01      	cmp	r3, #1
 8002792:	d008      	beq.n	80027a6 <tft_init+0x182>
 8002794:	2b02      	cmp	r3, #2
 8002796:	d00d      	beq.n	80027b4 <tft_init+0x190>
    default:
    case 0:
        col_shift = 2;
 8002798:	4b20      	ldr	r3, [pc, #128]	; (800281c <tft_init+0x1f8>)
 800279a:	2202      	movs	r2, #2
 800279c:	701a      	strb	r2, [r3, #0]
        row_shift = 1;
 800279e:	4b20      	ldr	r3, [pc, #128]	; (8002820 <tft_init+0x1fc>)
 80027a0:	2201      	movs	r2, #1
 80027a2:	701a      	strb	r2, [r3, #0]
        break;
 80027a4:	e014      	b.n	80027d0 <tft_init+0x1ac>
    case 1:
        col_shift = 1;
 80027a6:	4b1d      	ldr	r3, [pc, #116]	; (800281c <tft_init+0x1f8>)
 80027a8:	2201      	movs	r2, #1
 80027aa:	701a      	strb	r2, [r3, #0]
        row_shift = 2;
 80027ac:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <tft_init+0x1fc>)
 80027ae:	2202      	movs	r2, #2
 80027b0:	701a      	strb	r2, [r3, #0]
        break;
 80027b2:	e00d      	b.n	80027d0 <tft_init+0x1ac>
    case 2:
        col_shift = 2;
 80027b4:	4b19      	ldr	r3, [pc, #100]	; (800281c <tft_init+0x1f8>)
 80027b6:	2202      	movs	r2, #2
 80027b8:	701a      	strb	r2, [r3, #0]
        row_shift = 2;
 80027ba:	4b19      	ldr	r3, [pc, #100]	; (8002820 <tft_init+0x1fc>)
 80027bc:	2202      	movs	r2, #2
 80027be:	701a      	strb	r2, [r3, #0]
        break;
 80027c0:	e006      	b.n	80027d0 <tft_init+0x1ac>
    case 3:
        col_shift = 1;
 80027c2:	4b16      	ldr	r3, [pc, #88]	; (800281c <tft_init+0x1f8>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	701a      	strb	r2, [r3, #0]
        row_shift = 2;
 80027c8:	4b15      	ldr	r3, [pc, #84]	; (8002820 <tft_init+0x1fc>)
 80027ca:	2202      	movs	r2, #2
 80027cc:	701a      	strb	r2, [r3, #0]
        break;
 80027ce:	bf00      	nop
    }
#endif

    tft_set_bg_color(bg_color);
 80027d0:	88bb      	ldrh	r3, [r7, #4]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 f826 	bl	8002824 <tft_set_bg_color>
    tft_set_text_color(text_color);
 80027d8:	887b      	ldrh	r3, [r7, #2]
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 f842 	bl	8002864 <tft_set_text_color>
    tft_set_special_color(text_color_sp);
 80027e0:	883b      	ldrh	r3, [r7, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 f84e 	bl	8002884 <tft_set_special_color>
    tft_set_highlight_color(highlight_color);
 80027e8:	8c3b      	ldrh	r3, [r7, #32]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 f82a 	bl	8002844 <tft_set_highlight_color>

    tft_force_clear();
 80027f0:	f000 f858 	bl	80028a4 <tft_force_clear>
}
 80027f4:	bf00      	nop
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd90      	pop	{r4, r7, pc}
 80027fc:	20000000 	.word	0x20000000
 8002800:	20008180 	.word	0x20008180
 8002804:	20008181 	.word	0x20008181
 8002808:	20008182 	.word	0x20008182
 800280c:	40020000 	.word	0x40020000
 8002810:	40020400 	.word	0x40020400
 8002814:	0800a2f4 	.word	0x0800a2f4
 8002818:	0800a368 	.word	0x0800a368
 800281c:	200087c6 	.word	0x200087c6
 8002820:	200087c7 	.word	0x200087c7

08002824 <tft_set_bg_color>:
/**
 * @brief Set current background color
 *
 * @param bg_color (BLACK, BLUE, RED, ...)
 */
void tft_set_bg_color(uint16_t bg_color) {
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	80fb      	strh	r3, [r7, #6]
    curr_bg_color = bg_color;
 800282e:	4a04      	ldr	r2, [pc, #16]	; (8002840 <tft_set_bg_color+0x1c>)
 8002830:	88fb      	ldrh	r3, [r7, #6]
 8002832:	8013      	strh	r3, [r2, #0]
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	20008178 	.word	0x20008178

08002844 <tft_set_highlight_color>:
/**
 * @brief Set current highlight color
 *
 * @param highlight_color (YELLOW, ORANGE, CYAN, ...)
 */
void tft_set_highlight_color(uint16_t highlight_color) {
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	80fb      	strh	r3, [r7, #6]
    curr_highlight_color = highlight_color;
 800284e:	4a04      	ldr	r2, [pc, #16]	; (8002860 <tft_set_highlight_color+0x1c>)
 8002850:	88fb      	ldrh	r3, [r7, #6]
 8002852:	8013      	strh	r3, [r2, #0]
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	2000817a 	.word	0x2000817a

08002864 <tft_set_text_color>:
/**
 * @brief Set current text color
 *
 * @param text_color (WHITE, SKYBLUE, GREEN, ...)
 */
void tft_set_text_color(uint16_t text_color) {
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	80fb      	strh	r3, [r7, #6]
    curr_text_color = text_color;
 800286e:	4a04      	ldr	r2, [pc, #16]	; (8002880 <tft_set_text_color+0x1c>)
 8002870:	88fb      	ldrh	r3, [r7, #6]
 8002872:	8013      	strh	r3, [r2, #0]
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	2000817c 	.word	0x2000817c

08002884 <tft_set_special_color>:
/**
 * @brief Set current special text color
 *
 * @param text_color_sp (YELLOW, ORANGE, CYAN, ...)
 */
void tft_set_special_color(uint16_t text_color_sp) {
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	80fb      	strh	r3, [r7, #6]
    curr_text_color_sp = text_color_sp;
 800288e:	4a04      	ldr	r2, [pc, #16]	; (80028a0 <tft_set_special_color+0x1c>)
 8002890:	88fb      	ldrh	r3, [r7, #6]
 8002892:	8013      	strh	r3, [r2, #0]
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	2000817e 	.word	0x2000817e

080028a4 <tft_force_clear>:

/**
 * @brief  Clear every pixels on the screen
 */
void tft_force_clear(void) {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af02      	add	r7, sp, #8
    tft_clear_full();
 80028aa:	f7ff fe07 	bl	80024bc <tft_clear_full>
    tft_update(0);
 80028ae:	2000      	movs	r0, #0
 80028b0:	f000 fb22 	bl	8002ef8 <tft_update>
    tft_clear_full();
 80028b4:	f7ff fe02 	bl	80024bc <tft_clear_full>
    if (tft_orientation % 2)
 80028b8:	4b0e      	ldr	r3, [pc, #56]	; (80028f4 <tft_force_clear+0x50>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d009      	beq.n	80028da <tft_force_clear+0x36>
        tft_print_rectangle(curr_bg_color, 0, 0, MAX_HEIGHT, MAX_WIDTH);
 80028c6:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <tft_force_clear+0x54>)
 80028c8:	8818      	ldrh	r0, [r3, #0]
 80028ca:	2380      	movs	r3, #128	; 0x80
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	23a0      	movs	r3, #160	; 0xa0
 80028d0:	2200      	movs	r2, #0
 80028d2:	2100      	movs	r1, #0
 80028d4:	f000 fa5a 	bl	8002d8c <tft_print_rectangle>
    else
        tft_print_rectangle(curr_bg_color, 0, 0, MAX_WIDTH, MAX_HEIGHT);
}
 80028d8:	e008      	b.n	80028ec <tft_force_clear+0x48>
        tft_print_rectangle(curr_bg_color, 0, 0, MAX_WIDTH, MAX_HEIGHT);
 80028da:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <tft_force_clear+0x54>)
 80028dc:	8818      	ldrh	r0, [r3, #0]
 80028de:	23a0      	movs	r3, #160	; 0xa0
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	2380      	movs	r3, #128	; 0x80
 80028e4:	2200      	movs	r2, #0
 80028e6:	2100      	movs	r1, #0
 80028e8:	f000 fa50 	bl	8002d8c <tft_print_rectangle>
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20008180 	.word	0x20008180
 80028f8:	20008178 	.word	0x20008178

080028fc <tft_print_colored>:
 * @param x starting x-coordinate
 * @param y starting y-coordinate
 * @param fp pointer to the character(s)
 */
void tft_print_colored(uint8_t x, uint8_t y, const char *fp,
        uint16_t text_color, uint16_t bg_color) {
 80028fc:	b490      	push	{r4, r7}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	603a      	str	r2, [r7, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	4603      	mov	r3, r0
 8002908:	71fb      	strb	r3, [r7, #7]
 800290a:	460b      	mov	r3, r1
 800290c:	71bb      	strb	r3, [r7, #6]
 800290e:	4613      	mov	r3, r2
 8002910:	80bb      	strh	r3, [r7, #4]
    uint8_t i = x;
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	73fb      	strb	r3, [r7, #15]
    uint8_t j = y;
 8002916:	79bb      	ldrb	r3, [r7, #6]
 8002918:	73bb      	strb	r3, [r7, #14]
    uint8_t is_special = 0;
 800291a:	2300      	movs	r3, #0
 800291c:	737b      	strb	r3, [r7, #13]
    uint8_t is_highlighted = 0;
 800291e:	2300      	movs	r3, #0
 8002920:	733b      	strb	r3, [r7, #12]
    uint8_t is_underlined = 0;
 8002922:	2300      	movs	r3, #0
 8002924:	72fb      	strb	r3, [r7, #11]

    while (*fp && i < char_max_x && j < char_max_y) {
 8002926:	e14a      	b.n	8002bbe <tft_print_colored+0x2c2>
        switch (*fp) {
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b7d      	cmp	r3, #125	; 0x7d
 800292e:	f300 80e0 	bgt.w	8002af2 <tft_print_colored+0x1f6>
 8002932:	2b5b      	cmp	r3, #91	; 0x5b
 8002934:	da04      	bge.n	8002940 <tft_print_colored+0x44>
 8002936:	2b0a      	cmp	r3, #10
 8002938:	d050      	beq.n	80029dc <tft_print_colored+0xe0>
 800293a:	2b0d      	cmp	r3, #13
 800293c:	d051      	beq.n	80029e2 <tft_print_colored+0xe6>
 800293e:	e0d8      	b.n	8002af2 <tft_print_colored+0x1f6>
 8002940:	3b5b      	subs	r3, #91	; 0x5b
 8002942:	2b22      	cmp	r3, #34	; 0x22
 8002944:	f200 80d5 	bhi.w	8002af2 <tft_print_colored+0x1f6>
 8002948:	a201      	add	r2, pc, #4	; (adr r2, 8002950 <tft_print_colored+0x54>)
 800294a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294e:	bf00      	nop
 8002950:	08002abf 	.word	0x08002abf
 8002954:	08002af3 	.word	0x08002af3
 8002958:	08002abf 	.word	0x08002abf
 800295c:	08002af3 	.word	0x08002af3
 8002960:	08002af3 	.word	0x08002af3
 8002964:	080029e9 	.word	0x080029e9
 8002968:	08002af3 	.word	0x08002af3
 800296c:	08002af3 	.word	0x08002af3
 8002970:	08002af3 	.word	0x08002af3
 8002974:	08002af3 	.word	0x08002af3
 8002978:	08002af3 	.word	0x08002af3
 800297c:	08002af3 	.word	0x08002af3
 8002980:	08002af3 	.word	0x08002af3
 8002984:	08002af3 	.word	0x08002af3
 8002988:	08002af3 	.word	0x08002af3
 800298c:	08002af3 	.word	0x08002af3
 8002990:	08002af3 	.word	0x08002af3
 8002994:	08002af3 	.word	0x08002af3
 8002998:	08002af3 	.word	0x08002af3
 800299c:	08002af3 	.word	0x08002af3
 80029a0:	08002af3 	.word	0x08002af3
 80029a4:	08002af3 	.word	0x08002af3
 80029a8:	08002af3 	.word	0x08002af3
 80029ac:	08002af3 	.word	0x08002af3
 80029b0:	08002af3 	.word	0x08002af3
 80029b4:	08002af3 	.word	0x08002af3
 80029b8:	08002af3 	.word	0x08002af3
 80029bc:	08002af3 	.word	0x08002af3
 80029c0:	08002af3 	.word	0x08002af3
 80029c4:	08002af3 	.word	0x08002af3
 80029c8:	08002af3 	.word	0x08002af3
 80029cc:	08002af3 	.word	0x08002af3
 80029d0:	08002ad1 	.word	0x08002ad1
 80029d4:	08002ae3 	.word	0x08002ae3
 80029d8:	08002ad1 	.word	0x08002ad1
        case '\n':
            j++;  // fall through
 80029dc:	7bbb      	ldrb	r3, [r7, #14]
 80029de:	3301      	adds	r3, #1
 80029e0:	73bb      	strb	r3, [r7, #14]
        case '\r':
            i = x;
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	73fb      	strb	r3, [r7, #15]
            break;
 80029e6:	e0e7      	b.n	8002bb8 <tft_print_colored+0x2bc>
        case '`': // escape character
            if (*(fp + 1) != '\0') {
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	3301      	adds	r3, #1
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 80e1 	beq.w	8002bb6 <tft_print_colored+0x2ba>
                fp++;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	3301      	adds	r3, #1
 80029f8:	603b      	str	r3, [r7, #0]
                curr_text_buf[TFT_XY(i, j)] = ((*fp) | (is_underlined ? 0x80 : 0x00));
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	b25b      	sxtb	r3, r3
 8002a00:	7afa      	ldrb	r2, [r7, #11]
 8002a02:	2a00      	cmp	r2, #0
 8002a04:	d002      	beq.n	8002a0c <tft_print_colored+0x110>
 8002a06:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002a0a:	e000      	b.n	8002a0e <tft_print_colored+0x112>
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	b25c      	sxtb	r4, r3
 8002a12:	4b75      	ldr	r3, [pc, #468]	; (8002be8 <tft_print_colored+0x2ec>)
 8002a14:	6819      	ldr	r1, [r3, #0]
 8002a16:	4b74      	ldr	r3, [pc, #464]	; (8002be8 <tft_print_colored+0x2ec>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	7bbb      	ldrb	r3, [r7, #14]
 8002a20:	4a72      	ldr	r2, [pc, #456]	; (8002bec <tft_print_colored+0x2f0>)
 8002a22:	7812      	ldrb	r2, [r2, #0]
 8002a24:	fb03 f202 	mul.w	r2, r3, r2
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	441a      	add	r2, r3
 8002a2c:	b2e4      	uxtb	r4, r4
 8002a2e:	4603      	mov	r3, r0
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4403      	add	r3, r0
 8002a34:	015b      	lsls	r3, r3, #5
 8002a36:	440b      	add	r3, r1
 8002a38:	4413      	add	r3, r2
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	4622      	mov	r2, r4
 8002a3e:	701a      	strb	r2, [r3, #0]
                curr_text_color_buf[TFT_XY(i, j)] = is_special ? curr_text_color_sp : text_color;
 8002a40:	7b7b      	ldrb	r3, [r7, #13]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d002      	beq.n	8002a4c <tft_print_colored+0x150>
 8002a46:	4b6a      	ldr	r3, [pc, #424]	; (8002bf0 <tft_print_colored+0x2f4>)
 8002a48:	881a      	ldrh	r2, [r3, #0]
 8002a4a:	e000      	b.n	8002a4e <tft_print_colored+0x152>
 8002a4c:	88ba      	ldrh	r2, [r7, #4]
 8002a4e:	4b66      	ldr	r3, [pc, #408]	; (8002be8 <tft_print_colored+0x2ec>)
 8002a50:	6819      	ldr	r1, [r3, #0]
 8002a52:	4b65      	ldr	r3, [pc, #404]	; (8002be8 <tft_print_colored+0x2ec>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	461c      	mov	r4, r3
 8002a5a:	7bbb      	ldrb	r3, [r7, #14]
 8002a5c:	4863      	ldr	r0, [pc, #396]	; (8002bec <tft_print_colored+0x2f0>)
 8002a5e:	7800      	ldrb	r0, [r0, #0]
 8002a60:	fb03 f000 	mul.w	r0, r3, r0
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	4418      	add	r0, r3
 8002a68:	4623      	mov	r3, r4
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4423      	add	r3, r4
 8002a6e:	015b      	lsls	r3, r3, #5
 8002a70:	4403      	add	r3, r0
 8002a72:	33a0      	adds	r3, #160	; 0xa0
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	440b      	add	r3, r1
 8002a78:	805a      	strh	r2, [r3, #2]
                curr_bg_color_buf[TFT_XY(i, j)] = is_highlighted ? curr_highlight_color : bg_color;
 8002a7a:	7b3b      	ldrb	r3, [r7, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d002      	beq.n	8002a86 <tft_print_colored+0x18a>
 8002a80:	4b5c      	ldr	r3, [pc, #368]	; (8002bf4 <tft_print_colored+0x2f8>)
 8002a82:	881a      	ldrh	r2, [r3, #0]
 8002a84:	e000      	b.n	8002a88 <tft_print_colored+0x18c>
 8002a86:	8b3a      	ldrh	r2, [r7, #24]
 8002a88:	4b57      	ldr	r3, [pc, #348]	; (8002be8 <tft_print_colored+0x2ec>)
 8002a8a:	6819      	ldr	r1, [r3, #0]
 8002a8c:	4b56      	ldr	r3, [pc, #344]	; (8002be8 <tft_print_colored+0x2ec>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	461c      	mov	r4, r3
 8002a94:	7bbb      	ldrb	r3, [r7, #14]
 8002a96:	4855      	ldr	r0, [pc, #340]	; (8002bec <tft_print_colored+0x2f0>)
 8002a98:	7800      	ldrb	r0, [r0, #0]
 8002a9a:	fb03 f000 	mul.w	r0, r3, r0
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
 8002aa0:	4418      	add	r0, r3
 8002aa2:	4623      	mov	r3, r4
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4423      	add	r3, r4
 8002aa8:	015b      	lsls	r3, r3, #5
 8002aaa:	4403      	add	r3, r0
 8002aac:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	440b      	add	r3, r1
 8002ab4:	805a      	strh	r2, [r3, #2]
                i++;
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8002abc:	e07b      	b.n	8002bb6 <tft_print_colored+0x2ba>
        case '[':
        case ']':
            is_special = (*fp == '[');
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b5b      	cmp	r3, #91	; 0x5b
 8002ac4:	bf0c      	ite	eq
 8002ac6:	2301      	moveq	r3, #1
 8002ac8:	2300      	movne	r3, #0
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	737b      	strb	r3, [r7, #13]
            break;
 8002ace:	e073      	b.n	8002bb8 <tft_print_colored+0x2bc>
        case '{':
        case '}':
            is_highlighted = (*fp == '{');
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b7b      	cmp	r3, #123	; 0x7b
 8002ad6:	bf0c      	ite	eq
 8002ad8:	2301      	moveq	r3, #1
 8002ada:	2300      	movne	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	733b      	strb	r3, [r7, #12]
            break;
 8002ae0:	e06a      	b.n	8002bb8 <tft_print_colored+0x2bc>
        case '|':
            is_underlined = !is_underlined;
 8002ae2:	7afb      	ldrb	r3, [r7, #11]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	bf0c      	ite	eq
 8002ae8:	2301      	moveq	r3, #1
 8002aea:	2300      	movne	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	72fb      	strb	r3, [r7, #11]
            break;
 8002af0:	e062      	b.n	8002bb8 <tft_print_colored+0x2bc>
        default:
            curr_text_buf[TFT_XY(i, j)] = ((*fp) | (is_underlined ? 0x80 : 0x00));
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	b25b      	sxtb	r3, r3
 8002af8:	7afa      	ldrb	r2, [r7, #11]
 8002afa:	2a00      	cmp	r2, #0
 8002afc:	d002      	beq.n	8002b04 <tft_print_colored+0x208>
 8002afe:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002b02:	e000      	b.n	8002b06 <tft_print_colored+0x20a>
 8002b04:	2200      	movs	r2, #0
 8002b06:	4313      	orrs	r3, r2
 8002b08:	b25c      	sxtb	r4, r3
 8002b0a:	4b37      	ldr	r3, [pc, #220]	; (8002be8 <tft_print_colored+0x2ec>)
 8002b0c:	6819      	ldr	r1, [r3, #0]
 8002b0e:	4b36      	ldr	r3, [pc, #216]	; (8002be8 <tft_print_colored+0x2ec>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	7bbb      	ldrb	r3, [r7, #14]
 8002b18:	4a34      	ldr	r2, [pc, #208]	; (8002bec <tft_print_colored+0x2f0>)
 8002b1a:	7812      	ldrb	r2, [r2, #0]
 8002b1c:	fb03 f202 	mul.w	r2, r3, r2
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
 8002b22:	441a      	add	r2, r3
 8002b24:	b2e4      	uxtb	r4, r4
 8002b26:	4603      	mov	r3, r0
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4403      	add	r3, r0
 8002b2c:	015b      	lsls	r3, r3, #5
 8002b2e:	440b      	add	r3, r1
 8002b30:	4413      	add	r3, r2
 8002b32:	3301      	adds	r3, #1
 8002b34:	4622      	mov	r2, r4
 8002b36:	701a      	strb	r2, [r3, #0]
            curr_text_color_buf[TFT_XY(i, j)] = is_special ? curr_text_color_sp : text_color;
 8002b38:	7b7b      	ldrb	r3, [r7, #13]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <tft_print_colored+0x248>
 8002b3e:	4b2c      	ldr	r3, [pc, #176]	; (8002bf0 <tft_print_colored+0x2f4>)
 8002b40:	881a      	ldrh	r2, [r3, #0]
 8002b42:	e000      	b.n	8002b46 <tft_print_colored+0x24a>
 8002b44:	88ba      	ldrh	r2, [r7, #4]
 8002b46:	4b28      	ldr	r3, [pc, #160]	; (8002be8 <tft_print_colored+0x2ec>)
 8002b48:	6819      	ldr	r1, [r3, #0]
 8002b4a:	4b27      	ldr	r3, [pc, #156]	; (8002be8 <tft_print_colored+0x2ec>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	461c      	mov	r4, r3
 8002b52:	7bbb      	ldrb	r3, [r7, #14]
 8002b54:	4825      	ldr	r0, [pc, #148]	; (8002bec <tft_print_colored+0x2f0>)
 8002b56:	7800      	ldrb	r0, [r0, #0]
 8002b58:	fb03 f000 	mul.w	r0, r3, r0
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
 8002b5e:	4418      	add	r0, r3
 8002b60:	4623      	mov	r3, r4
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4423      	add	r3, r4
 8002b66:	015b      	lsls	r3, r3, #5
 8002b68:	4403      	add	r3, r0
 8002b6a:	33a0      	adds	r3, #160	; 0xa0
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	440b      	add	r3, r1
 8002b70:	805a      	strh	r2, [r3, #2]
            curr_bg_color_buf[TFT_XY(i, j)] = is_highlighted ? curr_highlight_color : bg_color;
 8002b72:	7b3b      	ldrb	r3, [r7, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d002      	beq.n	8002b7e <tft_print_colored+0x282>
 8002b78:	4b1e      	ldr	r3, [pc, #120]	; (8002bf4 <tft_print_colored+0x2f8>)
 8002b7a:	881a      	ldrh	r2, [r3, #0]
 8002b7c:	e000      	b.n	8002b80 <tft_print_colored+0x284>
 8002b7e:	8b3a      	ldrh	r2, [r7, #24]
 8002b80:	4b19      	ldr	r3, [pc, #100]	; (8002be8 <tft_print_colored+0x2ec>)
 8002b82:	6819      	ldr	r1, [r3, #0]
 8002b84:	4b18      	ldr	r3, [pc, #96]	; (8002be8 <tft_print_colored+0x2ec>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	461c      	mov	r4, r3
 8002b8c:	7bbb      	ldrb	r3, [r7, #14]
 8002b8e:	4817      	ldr	r0, [pc, #92]	; (8002bec <tft_print_colored+0x2f0>)
 8002b90:	7800      	ldrb	r0, [r0, #0]
 8002b92:	fb03 f000 	mul.w	r0, r3, r0
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	4418      	add	r0, r3
 8002b9a:	4623      	mov	r3, r4
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4423      	add	r3, r4
 8002ba0:	015b      	lsls	r3, r3, #5
 8002ba2:	4403      	add	r3, r0
 8002ba4:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	440b      	add	r3, r1
 8002bac:	805a      	strh	r2, [r3, #2]
            i++;
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
            break;
 8002bb4:	e000      	b.n	8002bb8 <tft_print_colored+0x2bc>
            break;
 8002bb6:	bf00      	nop
        }
        fp++;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	603b      	str	r3, [r7, #0]
    while (*fp && i < char_max_x && j < char_max_y) {
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00a      	beq.n	8002bdc <tft_print_colored+0x2e0>
 8002bc6:	4b09      	ldr	r3, [pc, #36]	; (8002bec <tft_print_colored+0x2f0>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	7bfa      	ldrb	r2, [r7, #15]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d205      	bcs.n	8002bdc <tft_print_colored+0x2e0>
 8002bd0:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <tft_print_colored+0x2fc>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	7bba      	ldrb	r2, [r7, #14]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	f4ff aea6 	bcc.w	8002928 <tft_print_colored+0x2c>
    }
}
 8002bdc:	bf00      	nop
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc90      	pop	{r4, r7}
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	20000000 	.word	0x20000000
 8002bec:	20008181 	.word	0x20008181
 8002bf0:	2000817e 	.word	0x2000817e
 8002bf4:	2000817a 	.word	0x2000817a
 8002bf8:	20008182 	.word	0x20008182

08002bfc <tft_printc>:
 *
 * @param x x-coordinate
 * @param y y-coordinate
 * @param fp pointer to character
 */
void tft_printc(uint8_t x, uint8_t y, const char *fp) {
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af02      	add	r7, sp, #8
 8002c02:	4603      	mov	r3, r0
 8002c04:	603a      	str	r2, [r7, #0]
 8002c06:	71fb      	strb	r3, [r7, #7]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	71bb      	strb	r3, [r7, #6]
    tft_print_colored(x, y, fp, curr_text_color, curr_bg_color);
 8002c0c:	4b07      	ldr	r3, [pc, #28]	; (8002c2c <tft_printc+0x30>)
 8002c0e:	881a      	ldrh	r2, [r3, #0]
 8002c10:	4b07      	ldr	r3, [pc, #28]	; (8002c30 <tft_printc+0x34>)
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	79b9      	ldrb	r1, [r7, #6]
 8002c16:	79f8      	ldrb	r0, [r7, #7]
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	f7ff fe6d 	bl	80028fc <tft_print_colored>
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	2000817c 	.word	0x2000817c
 8002c30:	20008178 	.word	0x20008178

08002c34 <tft_prints>:
 * @param x starting x-coordinate
 * @param y starting y-coordinate
 * @param fmt string to be printed with format
 * @param __VA_ARGS__ variables to replace spaceholders
 */
void tft_prints(uint8_t x, uint8_t y, const char *fmt, ...) {
 8002c34:	b40c      	push	{r2, r3}
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b08e      	sub	sp, #56	; 0x38
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	460a      	mov	r2, r1
 8002c40:	71fb      	strb	r3, [r7, #7]
 8002c42:	4613      	mov	r3, r2
 8002c44:	71bb      	strb	r3, [r7, #6]
    char buf[CHAR_MAX_X * 2] = { 0 }, *fp = buf;
 8002c46:	2300      	movs	r3, #0
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	f107 0314 	add.w	r3, r7, #20
 8002c4e:	2224      	movs	r2, #36	; 0x24
 8002c50:	2100      	movs	r1, #0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f006 faae 	bl	80091b4 <memset>
 8002c58:	f107 0310 	add.w	r3, r7, #16
 8002c5c:	60fb      	str	r3, [r7, #12]

    va_list args;
    va_start(args, fmt);
 8002c5e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c62:	60bb      	str	r3, [r7, #8]
    print(&fp, fmt, args);
 8002c64:	f107 030c 	add.w	r3, r7, #12
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff fa27 	bl	80020c0 <print>

    tft_printc(x, y, buf);
 8002c72:	f107 0210 	add.w	r2, r7, #16
 8002c76:	79b9      	ldrb	r1, [r7, #6]
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff ffbe 	bl	8002bfc <tft_printc>
}
 8002c80:	bf00      	nop
 8002c82:	3738      	adds	r7, #56	; 0x38
 8002c84:	46bd      	mov	sp, r7
 8002c86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c8a:	b002      	add	sp, #8
 8002c8c:	4770      	bx	lr
	...

08002c90 <tft_print_rectangle_dma>:
#endif
    }
}

void tft_print_rectangle_dma(uint16_t color, uint32_t x, uint32_t y, uint32_t w,
        uint32_t h) {
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08c      	sub	sp, #48	; 0x30
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	607a      	str	r2, [r7, #4]
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	81fb      	strh	r3, [r7, #14]
    uint32_t i = w * h;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ca4:	fb02 f303 	mul.w	r3, r2, r3
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t l = (i > TFT_DMA_BUF_PIXELS) ? TFT_DMA_BUF_PIXELS : i; // safety guard
 8002caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002cb0:	bf28      	it	cs
 8002cb2:	f44f 53a0 	movcs.w	r3, #5120	; 0x1400
 8002cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    tft_buffer_pixels(curr_tft_dma_buf, color, l);
 8002cb8:	4b31      	ldr	r3, [pc, #196]	; (8002d80 <tft_print_rectangle_dma+0xf0>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	02db      	lsls	r3, r3, #11
 8002cc6:	4a2f      	ldr	r2, [pc, #188]	; (8002d84 <tft_print_rectangle_dma+0xf4>)
 8002cc8:	441a      	add	r2, r3
 8002cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ccc:	627a      	str	r2, [r7, #36]	; 0x24
 8002cce:	89fa      	ldrh	r2, [r7, #14]
 8002cd0:	847a      	strh	r2, [r7, #34]	; 0x22
 8002cd2:	61fb      	str	r3, [r7, #28]
 8002cd4:	f107 0314 	add.w	r3, r7, #20
 8002cd8:	61bb      	str	r3, [r7, #24]
 8002cda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002cdc:	82fb      	strh	r3, [r7, #22]
    out[0] = rgb565 >> 8;
 8002cde:	8afb      	ldrh	r3, [r7, #22]
 8002ce0:	0a1b      	lsrs	r3, r3, #8
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	701a      	strb	r2, [r3, #0]
    out[1] = rgb565;
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	3301      	adds	r3, #1
 8002cee:	8afa      	ldrh	r2, [r7, #22]
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	701a      	strb	r2, [r3, #0]
}
 8002cf4:	bf00      	nop
    while (len--) {
 8002cf6:	e009      	b.n	8002d0c <tft_print_rectangle_dma+0x7c>
        *out++ = buf[0];
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	627a      	str	r2, [r7, #36]	; 0x24
 8002cfe:	7d3a      	ldrb	r2, [r7, #20]
 8002d00:	701a      	strb	r2, [r3, #0]
        *out++ = buf[1];
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	627a      	str	r2, [r7, #36]	; 0x24
 8002d08:	7d7a      	ldrb	r2, [r7, #21]
 8002d0a:	701a      	strb	r2, [r3, #0]
    while (len--) {
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	1e5a      	subs	r2, r3, #1
 8002d10:	61fa      	str	r2, [r7, #28]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <tft_print_rectangle_dma+0x68>
}
 8002d16:	bf00      	nop
    tft_set_region(x, y, w - 1, h - 1);
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	b298      	uxth	r0, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	b299      	uxth	r1, r3
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	f7ff fc30 	bl	8002594 <tft_set_region>
    write_command(0x2c);
 8002d34:	202c      	movs	r0, #44	; 0x2c
 8002d36:	f7ff fae5 	bl	8002304 <write_command>
    while (HAL_SPI_GetState(&TFT_SPI) != HAL_SPI_STATE_READY)
 8002d3a:	bf00      	nop
 8002d3c:	4812      	ldr	r0, [pc, #72]	; (8002d88 <tft_print_rectangle_dma+0xf8>)
 8002d3e:	f004 f847 	bl	8006dd0 <HAL_SPI_GetState>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d1f9      	bne.n	8002d3c <tft_print_rectangle_dma+0xac>
        ;
    write_many_dma(0x2c, curr_tft_dma_buf, l * PIXEL_BYTES);
 8002d48:	4b0d      	ldr	r3, [pc, #52]	; (8002d80 <tft_print_rectangle_dma+0xf0>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	02db      	lsls	r3, r3, #11
 8002d56:	4a0b      	ldr	r2, [pc, #44]	; (8002d84 <tft_print_rectangle_dma+0xf4>)
 8002d58:	1899      	adds	r1, r3, r2
 8002d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	461a      	mov	r2, r3
 8002d64:	202c      	movs	r0, #44	; 0x2c
 8002d66:	f7ff fb19 	bl	800239c <write_many_dma>
    buf_ptr ^= 0x1;
 8002d6a:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <tft_print_rectangle_dma+0xf0>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	f083 0301 	eor.w	r3, r3, #1
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	4b02      	ldr	r3, [pc, #8]	; (8002d80 <tft_print_rectangle_dma+0xf0>)
 8002d76:	701a      	strb	r2, [r3, #0]
}
 8002d78:	bf00      	nop
 8002d7a:	3730      	adds	r7, #48	; 0x30
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	200087c8 	.word	0x200087c8
 8002d84:	200087cc 	.word	0x200087cc
 8002d88:	2000d7f0 	.word	0x2000d7f0

08002d8c <tft_print_rectangle>:
 * @param y starting y-coordinate
 * @param w width
 * @param h height
 */
void tft_print_rectangle(uint16_t color, uint32_t x, uint32_t y, uint32_t w,
        uint32_t h) {
 8002d8c:	b590      	push	{r4, r7, lr}
 8002d8e:	b08d      	sub	sp, #52	; 0x34
 8002d90:	af02      	add	r7, sp, #8
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	603b      	str	r3, [r7, #0]
 8002d98:	4603      	mov	r3, r0
 8002d9a:	81fb      	strh	r3, [r7, #14]
    uint32_t i = w * h;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002da0:	fb02 f303 	mul.w	r3, r2, r3
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
    if (i <= (64)) {
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	2b40      	cmp	r3, #64	; 0x40
 8002daa:	d82f      	bhi.n	8002e0c <tft_print_rectangle+0x80>
 8002dac:	f107 0314 	add.w	r3, r7, #20
 8002db0:	61bb      	str	r3, [r7, #24]
 8002db2:	89fb      	ldrh	r3, [r7, #14]
 8002db4:	82fb      	strh	r3, [r7, #22]
    out[0] = rgb565 >> 8;
 8002db6:	8afb      	ldrh	r3, [r7, #22]
 8002db8:	0a1b      	lsrs	r3, r3, #8
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	701a      	strb	r2, [r3, #0]
    out[1] = rgb565;
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	8afa      	ldrh	r2, [r7, #22]
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	701a      	strb	r2, [r3, #0]
}
 8002dcc:	bf00      	nop
        uint8_t buf[PIXEL_BYTES];
        tft_buffer_pixel(buf, color);

        tft_set_region(x, y, w - 1, h - 1);
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	b298      	uxth	r0, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	b299      	uxth	r1, r3
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	f7ff fbd5 	bl	8002594 <tft_set_region>
        write_command(0x2c);
 8002dea:	202c      	movs	r0, #44	; 0x2c
 8002dec:	f7ff fa8a 	bl	8002304 <write_command>
        for (; i != 0; i--) {
 8002df0:	e008      	b.n	8002e04 <tft_print_rectangle+0x78>
            write_data(buf, PIXEL_BYTES);
 8002df2:	f107 0314 	add.w	r3, r7, #20
 8002df6:	2102      	movs	r1, #2
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff faa7 	bl	800234c <write_data>
        for (; i != 0; i--) {
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	3b01      	subs	r3, #1
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f3      	bne.n	8002df2 <tft_print_rectangle+0x66>
        if (h % buf_max_h > 0) {
            tft_print_rectangle_dma(color, x, y + num_section * buf_max_h, w,
                    h % buf_max_h);
        }
    }
}
 8002e0a:	e040      	b.n	8002e8e <tft_print_rectangle+0x102>
        uint16_t buf_max_h = TFT_DMA_BUF_PIXELS / w;
 8002e0c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e16:	83fb      	strh	r3, [r7, #30]
        uint16_t num_section = h / buf_max_h;
 8002e18:	8bfb      	ldrh	r3, [r7, #30]
 8002e1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e20:	83bb      	strh	r3, [r7, #28]
        for (int k = 0; k < num_section; ++k) {
 8002e22:	2300      	movs	r3, #0
 8002e24:	623b      	str	r3, [r7, #32]
 8002e26:	e010      	b.n	8002e4a <tft_print_rectangle+0xbe>
            tft_print_rectangle_dma(color, x, y + k * buf_max_h, w, buf_max_h);
 8002e28:	8bfb      	ldrh	r3, [r7, #30]
 8002e2a:	6a3a      	ldr	r2, [r7, #32]
 8002e2c:	fb02 f303 	mul.w	r3, r2, r3
 8002e30:	461a      	mov	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	441a      	add	r2, r3
 8002e36:	8bfb      	ldrh	r3, [r7, #30]
 8002e38:	89f8      	ldrh	r0, [r7, #14]
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	68b9      	ldr	r1, [r7, #8]
 8002e40:	f7ff ff26 	bl	8002c90 <tft_print_rectangle_dma>
        for (int k = 0; k < num_section; ++k) {
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	3301      	adds	r3, #1
 8002e48:	623b      	str	r3, [r7, #32]
 8002e4a:	8bbb      	ldrh	r3, [r7, #28]
 8002e4c:	6a3a      	ldr	r2, [r7, #32]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	dbea      	blt.n	8002e28 <tft_print_rectangle+0x9c>
        if (h % buf_max_h > 0) {
 8002e52:	8bfa      	ldrh	r2, [r7, #30]
 8002e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e56:	fbb3 f1f2 	udiv	r1, r3, r2
 8002e5a:	fb01 f202 	mul.w	r2, r1, r2
 8002e5e:	1a9b      	subs	r3, r3, r2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d014      	beq.n	8002e8e <tft_print_rectangle+0x102>
            tft_print_rectangle_dma(color, x, y + num_section * buf_max_h, w,
 8002e64:	8bbb      	ldrh	r3, [r7, #28]
 8002e66:	8bfa      	ldrh	r2, [r7, #30]
 8002e68:	fb02 f303 	mul.w	r3, r2, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	18d4      	adds	r4, r2, r3
 8002e72:	8bfa      	ldrh	r2, [r7, #30]
 8002e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e76:	fbb3 f1f2 	udiv	r1, r3, r2
 8002e7a:	fb01 f202 	mul.w	r2, r1, r2
 8002e7e:	1a9b      	subs	r3, r3, r2
 8002e80:	89f8      	ldrh	r0, [r7, #14]
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	4622      	mov	r2, r4
 8002e88:	68b9      	ldr	r1, [r7, #8]
 8002e8a:	f7ff ff01 	bl	8002c90 <tft_print_rectangle_dma>
}
 8002e8e:	bf00      	nop
 8002e90:	372c      	adds	r7, #44	; 0x2c
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd90      	pop	{r4, r7, pc}
	...

08002e98 <tft_print_image>:
 * @param x starting x-coordinate
 * @param y starting y-coordinate
 * @param w width
 * @param h height
 */
void tft_print_image(void *buf, uint32_t x, uint32_t y, uint32_t w, uint32_t h) {
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
 8002ea4:	603b      	str	r3, [r7, #0]
    while (HAL_SPI_GetState(&TFT_SPI) != HAL_SPI_STATE_READY)
 8002ea6:	bf00      	nop
 8002ea8:	4812      	ldr	r0, [pc, #72]	; (8002ef4 <tft_print_image+0x5c>)
 8002eaa:	f003 ff91 	bl	8006dd0 <HAL_SPI_GetState>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d1f9      	bne.n	8002ea8 <tft_print_image+0x10>
        ;  // wait for the SPI to be ready

    tft_set_region(x, y, w - 1, h - 1);
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	b298      	uxth	r0, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	b299      	uxth	r1, r3
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	f7ff fb62 	bl	8002594 <tft_set_region>

    write_many_dma(0x2c, buf, w * h * PIXEL_BYTES);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	fb12 f303 	smulbb	r3, r2, r3
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	68f9      	ldr	r1, [r7, #12]
 8002ee6:	202c      	movs	r0, #44	; 0x2c
 8002ee8:	f7ff fa58 	bl	800239c <write_many_dma>
}
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	2000d7f0 	.word	0x2000d7f0

08002ef8 <tft_update>:
 * @brief Update the screen in certain period
 *
 * @param period time in ms
 * @return state
 */
uint8_t tft_update(uint32_t period) {
 8002ef8:	b590      	push	{r4, r7, lr}
 8002efa:	b08d      	sub	sp, #52	; 0x34
 8002efc:	af02      	add	r7, sp, #8
 8002efe:	6078      	str	r0, [r7, #4]
    static uint32_t last_update = 0;
    if ((HAL_GetTick() - last_update) < period)
 8002f00:	f001 fb8c 	bl	800461c <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	4ba0      	ldr	r3, [pc, #640]	; (8003188 <tft_update+0x290>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d901      	bls.n	8002f16 <tft_update+0x1e>
        return 2;
 8002f12:	2302      	movs	r3, #2
 8002f14:	e133      	b.n	800317e <tft_update+0x286>
    last_update = HAL_GetTick();
 8002f16:	f001 fb81 	bl	800461c <HAL_GetTick>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	4a9a      	ldr	r2, [pc, #616]	; (8003188 <tft_update+0x290>)
 8002f1e:	6013      	str	r3, [r2, #0]

    for (uint8_t j = 0; j < char_max_y; j++) {
 8002f20:	2300      	movs	r3, #0
 8002f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002f26:	e115      	b.n	8003154 <tft_update+0x25c>
        for (uint8_t i = 0; i < char_max_x; i++) {
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002f2e:	e105      	b.n	800313c <tft_update+0x244>
            if (tft_char_is_changed(tft_screens, i, j)) {
 8002f30:	4b96      	ldr	r3, [pc, #600]	; (800318c <tft_update+0x294>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002f38:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fe fe01 	bl	8001b44 <tft_char_is_changed>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 80f4 	beq.w	8003132 <tft_update+0x23a>
                uint8_t adj_cnt = 1;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                while ((i + adj_cnt < char_max_x)
 8002f50:	e004      	b.n	8002f5c <tft_update+0x64>
                        && tft_char_is_changed(tft_screens, i + (adj_cnt), j)
                        && (adj_cnt < THREADED_TFT_BUF_LEN))
                    adj_cnt++;  // Search for diff char
 8002f52:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f56:	3301      	adds	r3, #1
 8002f58:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                while ((i + adj_cnt < char_max_x)
 8002f5c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002f60:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f64:	4413      	add	r3, r2
 8002f66:	4a8a      	ldr	r2, [pc, #552]	; (8003190 <tft_update+0x298>)
 8002f68:	7812      	ldrb	r2, [r2, #0]
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	da13      	bge.n	8002f96 <tft_update+0x9e>
                        && tft_char_is_changed(tft_screens, i + (adj_cnt), j)
 8002f6e:	4b87      	ldr	r3, [pc, #540]	; (800318c <tft_update+0x294>)
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002f76:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f7a:	4413      	add	r3, r2
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002f82:	4619      	mov	r1, r3
 8002f84:	f7fe fdde 	bl	8001b44 <tft_char_is_changed>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <tft_update+0x9e>
                        && (adj_cnt < THREADED_TFT_BUF_LEN))
 8002f8e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f92:	2b27      	cmp	r3, #39	; 0x27
 8002f94:	d9dd      	bls.n	8002f52 <tft_update+0x5a>

                uint16_t px = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	847b      	strh	r3, [r7, #34]	; 0x22
                uint16_t y = 0;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	843b      	strh	r3, [r7, #32]
                while (y < CHAR_HEIGHT) {
 8002f9e:	e09a      	b.n	80030d6 <tft_update+0x1de>
                    uint8_t char_cnt = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	77fb      	strb	r3, [r7, #31]
                    while (char_cnt != adj_cnt) {
 8002fa4:	e08e      	b.n	80030c4 <tft_update+0x1cc>
                        const uint8_t char_ptr = (CHAR_PTR(
 8002fa6:	4b79      	ldr	r3, [pc, #484]	; (800318c <tft_update+0x294>)
 8002fa8:	6819      	ldr	r1, [r3, #0]
 8002faa:	4b78      	ldr	r3, [pc, #480]	; (800318c <tft_update+0x294>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	461c      	mov	r4, r3
 8002fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fb6:	4a76      	ldr	r2, [pc, #472]	; (8003190 <tft_update+0x298>)
 8002fb8:	7812      	ldrb	r2, [r2, #0]
 8002fba:	fb03 f202 	mul.w	r2, r3, r2
 8002fbe:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002fc2:	7ffb      	ldrb	r3, [r7, #31]
 8002fc4:	4403      	add	r3, r0
 8002fc6:	441a      	add	r2, r3
 8002fc8:	4623      	mov	r3, r4
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4423      	add	r3, r4
 8002fce:	015b      	lsls	r3, r3, #5
 8002fd0:	440b      	add	r3, r1
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	3b20      	subs	r3, #32
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	461a      	mov	r2, r3
                                curr_text_buf[TFT_XY(i + char_cnt, j)]))[y];
 8002fde:	8c3b      	ldrh	r3, [r7, #32]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	4a6c      	ldr	r2, [pc, #432]	; (8003194 <tft_update+0x29c>)
 8002fe4:	4413      	add	r3, r2
                        const uint8_t char_ptr = (CHAR_PTR(
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	777b      	strb	r3, [r7, #29]
                        uint16_t fg = curr_text_color_buf[TFT_XY(i + char_cnt, j)];
 8002fea:	4b68      	ldr	r3, [pc, #416]	; (800318c <tft_update+0x294>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	4b67      	ldr	r3, [pc, #412]	; (800318c <tft_update+0x294>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	461c      	mov	r4, r3
 8002ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ffa:	4965      	ldr	r1, [pc, #404]	; (8003190 <tft_update+0x298>)
 8002ffc:	7809      	ldrb	r1, [r1, #0]
 8002ffe:	fb03 f101 	mul.w	r1, r3, r1
 8003002:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8003006:	7ffb      	ldrb	r3, [r7, #31]
 8003008:	4403      	add	r3, r0
 800300a:	4419      	add	r1, r3
 800300c:	4623      	mov	r3, r4
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4423      	add	r3, r4
 8003012:	015b      	lsls	r3, r3, #5
 8003014:	440b      	add	r3, r1
 8003016:	33a0      	adds	r3, #160	; 0xa0
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	4413      	add	r3, r2
 800301c:	885b      	ldrh	r3, [r3, #2]
 800301e:	837b      	strh	r3, [r7, #26]
                        uint16_t bg = curr_bg_color_buf[TFT_XY(i + char_cnt, j)];
 8003020:	4b5a      	ldr	r3, [pc, #360]	; (800318c <tft_update+0x294>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	4b59      	ldr	r3, [pc, #356]	; (800318c <tft_update+0x294>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	461c      	mov	r4, r3
 800302c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003030:	4957      	ldr	r1, [pc, #348]	; (8003190 <tft_update+0x298>)
 8003032:	7809      	ldrb	r1, [r1, #0]
 8003034:	fb03 f101 	mul.w	r1, r3, r1
 8003038:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800303c:	7ffb      	ldrb	r3, [r7, #31]
 800303e:	4403      	add	r3, r0
 8003040:	4419      	add	r1, r3
 8003042:	4623      	mov	r3, r4
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4423      	add	r3, r4
 8003048:	015b      	lsls	r3, r3, #5
 800304a:	440b      	add	r3, r1
 800304c:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	4413      	add	r3, r2
 8003054:	885b      	ldrh	r3, [r3, #2]
 8003056:	833b      	strh	r3, [r7, #24]
                        for (uint8_t x = CHAR_WIDTH; x > 0; x--) {
 8003058:	2308      	movs	r3, #8
 800305a:	77bb      	strb	r3, [r7, #30]
 800305c:	e02c      	b.n	80030b8 <tft_update+0x1c0>
                            uint16_t color =
                                    ((char_ptr >> (x - 1)) & 0x01) ? fg : bg;
 800305e:	7f7a      	ldrb	r2, [r7, #29]
 8003060:	7fbb      	ldrb	r3, [r7, #30]
 8003062:	3b01      	subs	r3, #1
 8003064:	fa42 f303 	asr.w	r3, r2, r3
 8003068:	f003 0301 	and.w	r3, r3, #1
                            uint16_t color =
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <tft_update+0x17c>
 8003070:	8b7b      	ldrh	r3, [r7, #26]
 8003072:	e000      	b.n	8003076 <tft_update+0x17e>
 8003074:	8b3b      	ldrh	r3, [r7, #24]
 8003076:	82fb      	strh	r3, [r7, #22]
                            tft_buffer_pixel(&tft_dma_bufs[buf_ptr][px], color);
 8003078:	4b47      	ldr	r3, [pc, #284]	; (8003198 <tft_update+0x2a0>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	4619      	mov	r1, r3
 800307e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003080:	460b      	mov	r3, r1
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	02db      	lsls	r3, r3, #11
 8003088:	4413      	add	r3, r2
 800308a:	4a44      	ldr	r2, [pc, #272]	; (800319c <tft_update+0x2a4>)
 800308c:	4413      	add	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	8afb      	ldrh	r3, [r7, #22]
 8003092:	81fb      	strh	r3, [r7, #14]
    out[0] = rgb565 >> 8;
 8003094:	89fb      	ldrh	r3, [r7, #14]
 8003096:	0a1b      	lsrs	r3, r3, #8
 8003098:	b29b      	uxth	r3, r3
 800309a:	b2da      	uxtb	r2, r3
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	701a      	strb	r2, [r3, #0]
    out[1] = rgb565;
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	3301      	adds	r3, #1
 80030a4:	89fa      	ldrh	r2, [r7, #14]
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	701a      	strb	r2, [r3, #0]
}
 80030aa:	bf00      	nop
                            px += PIXEL_BYTES;
 80030ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80030ae:	3302      	adds	r3, #2
 80030b0:	847b      	strh	r3, [r7, #34]	; 0x22
                        for (uint8_t x = CHAR_WIDTH; x > 0; x--) {
 80030b2:	7fbb      	ldrb	r3, [r7, #30]
 80030b4:	3b01      	subs	r3, #1
 80030b6:	77bb      	strb	r3, [r7, #30]
 80030b8:	7fbb      	ldrb	r3, [r7, #30]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1cf      	bne.n	800305e <tft_update+0x166>
                        }
                        char_cnt++;
 80030be:	7ffb      	ldrb	r3, [r7, #31]
 80030c0:	3301      	adds	r3, #1
 80030c2:	77fb      	strb	r3, [r7, #31]
                    while (char_cnt != adj_cnt) {
 80030c4:	7ffa      	ldrb	r2, [r7, #31]
 80030c6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80030ca:	429a      	cmp	r2, r3
 80030cc:	f47f af6b 	bne.w	8002fa6 <tft_update+0xae>
                    }
                    y++;
 80030d0:	8c3b      	ldrh	r3, [r7, #32]
 80030d2:	3301      	adds	r3, #1
 80030d4:	843b      	strh	r3, [r7, #32]
                while (y < CHAR_HEIGHT) {
 80030d6:	8c3b      	ldrh	r3, [r7, #32]
 80030d8:	2b0f      	cmp	r3, #15
 80030da:	f67f af61 	bls.w	8002fa0 <tft_update+0xa8>
                }

                tft_print_image(&tft_dma_bufs[buf_ptr][0], i * CHAR_WIDTH,
 80030de:	4b2e      	ldr	r3, [pc, #184]	; (8003198 <tft_update+0x2a0>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	4613      	mov	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	02db      	lsls	r3, r3, #11
 80030ec:	4a2b      	ldr	r2, [pc, #172]	; (800319c <tft_update+0x2a4>)
 80030ee:	1898      	adds	r0, r3, r2
 80030f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	4619      	mov	r1, r3
                        j * CHAR_HEIGHT, adj_cnt * CHAR_WIDTH,
 80030f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030fc:	011b      	lsls	r3, r3, #4
                tft_print_image(&tft_dma_bufs[buf_ptr][0], i * CHAR_WIDTH,
 80030fe:	461a      	mov	r2, r3
                        j * CHAR_HEIGHT, adj_cnt * CHAR_WIDTH,
 8003100:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003104:	00db      	lsls	r3, r3, #3
                tft_print_image(&tft_dma_bufs[buf_ptr][0], i * CHAR_WIDTH,
 8003106:	461c      	mov	r4, r3
 8003108:	2310      	movs	r3, #16
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	4623      	mov	r3, r4
 800310e:	f7ff fec3 	bl	8002e98 <tft_print_image>
                        CHAR_HEIGHT);
                buf_ptr ^= 0x1;
 8003112:	4b21      	ldr	r3, [pc, #132]	; (8003198 <tft_update+0x2a0>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	f083 0301 	eor.w	r3, r3, #1
 800311a:	b2da      	uxtb	r2, r3
 800311c:	4b1e      	ldr	r3, [pc, #120]	; (8003198 <tft_update+0x2a0>)
 800311e:	701a      	strb	r2, [r3, #0]
                i += adj_cnt - 1;
 8003120:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003124:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003128:	4413      	add	r3, r2
 800312a:	b2db      	uxtb	r3, r3
 800312c:	3b01      	subs	r3, #1
 800312e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        for (uint8_t i = 0; i < char_max_x; i++) {
 8003132:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003136:	3301      	adds	r3, #1
 8003138:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800313c:	4b14      	ldr	r3, [pc, #80]	; (8003190 <tft_update+0x298>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003144:	429a      	cmp	r2, r3
 8003146:	f4ff aef3 	bcc.w	8002f30 <tft_update+0x38>
    for (uint8_t j = 0; j < char_max_y; j++) {
 800314a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800314e:	3301      	adds	r3, #1
 8003150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003154:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <tft_update+0x2a8>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800315c:	429a      	cmp	r2, r3
 800315e:	f4ff aee3 	bcc.w	8002f28 <tft_update+0x30>
            }
        }
    }

    // Swap pointers
    curr_screen = !curr_screen;
 8003162:	4b0a      	ldr	r3, [pc, #40]	; (800318c <tft_update+0x294>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	bf0c      	ite	eq
 800316c:	2301      	moveq	r3, #1
 800316e:	2300      	movne	r3, #0
 8003170:	b2da      	uxtb	r2, r3
 8003172:	4b06      	ldr	r3, [pc, #24]	; (800318c <tft_update+0x294>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	701a      	strb	r2, [r3, #0]

    tft_clear();
 8003178:	f7ff f964 	bl	8002444 <tft_clear>

    return 0;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	372c      	adds	r7, #44	; 0x2c
 8003182:	46bd      	mov	sp, r7
 8003184:	bd90      	pop	{r4, r7, pc}
 8003186:	bf00      	nop
 8003188:	2000d7cc 	.word	0x2000d7cc
 800318c:	20000000 	.word	0x20000000
 8003190:	20008181 	.word	0x20008181
 8003194:	080094f4 	.word	0x080094f4
 8003198:	200087c8 	.word	0x200087c8
 800319c:	200087cc 	.word	0x200087cc
 80031a0:	20008182 	.word	0x20008182
 80031a4:	00000000 	.word	0x00000000

080031a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b0c9      	sub	sp, #292	; 0x124
 80031ac:	af02      	add	r7, sp, #8
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80031ae:	f001 f9cf 	bl	8004550 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80031b2:	f000 fb01 	bl	80037b8 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80031b6:	f7fe fbd5 	bl	8001964 <MX_GPIO_Init>
    MX_CAN1_Init();
 80031ba:	f7fd fe8b 	bl	8000ed4 <MX_CAN1_Init>
    MX_CAN2_Init();
 80031be:	f7fd febf 	bl	8000f40 <MX_CAN2_Init>
    MX_USART1_UART_Init();
 80031c2:	f000 fdb9 	bl	8003d38 <MX_USART1_UART_Init>
    MX_DMA_Init();
 80031c6:	f7fe fbad 	bl	8001924 <MX_DMA_Init>
    MX_USART2_UART_Init();
 80031ca:	f000 fddf 	bl	8003d8c <MX_USART2_UART_Init>
    MX_TIM5_Init();
 80031ce:	f000 fcc3 	bl	8003b58 <MX_TIM5_Init>
    /* USER CODE BEGIN 2 */
    volatile uint32_t last_ticks = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    volatile uint32_t last_ticks_inc = 0;
 80031d8:	2300      	movs	r3, #0
 80031da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    // we turn off all the led first
    led_off(LED1);
 80031de:	2201      	movs	r2, #1
 80031e0:	2180      	movs	r1, #128	; 0x80
 80031e2:	48b4      	ldr	r0, [pc, #720]	; (80034b4 <main+0x30c>)
 80031e4:	f002 fd6a 	bl	8005cbc <HAL_GPIO_WritePin>
    led_off(LED2);
 80031e8:	2201      	movs	r2, #1
 80031ea:	2140      	movs	r1, #64	; 0x40
 80031ec:	48b1      	ldr	r0, [pc, #708]	; (80034b4 <main+0x30c>)
 80031ee:	f002 fd65 	bl	8005cbc <HAL_GPIO_WritePin>
    led_off(LED3);
 80031f2:	2201      	movs	r2, #1
 80031f4:	2120      	movs	r1, #32
 80031f6:	48af      	ldr	r0, [pc, #700]	; (80034b4 <main+0x30c>)
 80031f8:	f002 fd60 	bl	8005cbc <HAL_GPIO_WritePin>
    led_off(LED4);
 80031fc:	2201      	movs	r2, #1
 80031fe:	2110      	movs	r1, #16
 8003200:	48ac      	ldr	r0, [pc, #688]	; (80034b4 <main+0x30c>)
 8003202:	f002 fd5b 	bl	8005cbc <HAL_GPIO_WritePin>
    tft_init(PIN_ON_TOP, BLACK, WHITE, YELLOW, DARK_GREEN);
 8003206:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003214:	2100      	movs	r1, #0
 8003216:	2000      	movs	r0, #0
 8003218:	f7ff fa04 	bl	8002624 <tft_init>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800321c:	2201      	movs	r2, #1
 800321e:	2108      	movs	r1, #8
 8003220:	48a5      	ldr	r0, [pc, #660]	; (80034b8 <main+0x310>)
 8003222:	f002 fd4b 	bl	8005cbc <HAL_GPIO_WritePin>
    pwm_init();
 8003226:	f000 fd6f 	bl	8003d08 <pwm_init>

    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    tft_force_clear();
 800322a:	f7ff fb3b 	bl	80028a4 <tft_force_clear>
    can_init();
 800322e:	f7fd ff5f 	bl	80010f0 <can_init>
    PID_variable_init();
 8003232:	f7fe fa0f 	bl	8001654 <PID_variable_init>
    Reset_dat_init();
 8003236:	f000 fe5f 	bl	8003ef8 <Reset_dat_init>

	// pre-define constant
	const Motor motorchoice[] = {CAN1_MOTOR0, CAN1_MOTOR1, CAN1_MOTOR2, CAN1_MOTOR3};
 800323a:	4ba0      	ldr	r3, [pc, #640]	; (80034bc <main+0x314>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	const char text_k[6][20] = {"kp-up", "kp-down", "ki-up", "ki-down", "kd-up", "kd-down"};
 8003242:	4a9f      	ldr	r2, [pc, #636]	; (80034c0 <main+0x318>)
 8003244:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003248:	4611      	mov	r1, r2
 800324a:	2278      	movs	r2, #120	; 0x78
 800324c:	4618      	mov	r0, r3
 800324e:	f005 ffa3 	bl	8009198 <memcpy>
	const char test_m[5][20] = {"First Motor", "Second Motor", "Third Motor", "Fourth Motor", "Motor Status"};
 8003252:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003256:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800325a:	4a9a      	ldr	r2, [pc, #616]	; (80034c4 <main+0x31c>)
 800325c:	4618      	mov	r0, r3
 800325e:	4611      	mov	r1, r2
 8003260:	2364      	movs	r3, #100	; 0x64
 8003262:	461a      	mov	r2, r3
 8003264:	f005 ff98 	bl	8009198 <memcpy>
	static int motornum = 1;
	enum {kp_increase, kp_decrease, ki_increase, ki_decrease, kd_increase, kd_decrease} k_choice;
	static int target_vel[4] = {0,0,0,0};

	//initialize
	k_choice = kp_increase;
 8003268:	2300      	movs	r3, #0
 800326a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	static double kp[4] = {20,20,20,20},
				kd[4] = {-0.5,-0.6,-0.5,-0.5},
				ki[4] = {0.001,0.001,0.001,0.001};

    while (1) {
    	can_ctrl_loop();
 800326e:	f7fe f86d 	bl	800134c <can_ctrl_loop>
    	if (HAL_GetTick() - last_ticks >= 100) {
 8003272:	f001 f9d3 	bl	800461c <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b63      	cmp	r3, #99	; 0x63
 8003280:	d908      	bls.n	8003294 <main+0xec>
			led_toggle(LED1);
 8003282:	2180      	movs	r1, #128	; 0x80
 8003284:	488b      	ldr	r0, [pc, #556]	; (80034b4 <main+0x30c>)
 8003286:	f002 fd32 	bl	8005cee <HAL_GPIO_TogglePin>
			last_ticks = HAL_GetTick();
 800328a:	f001 f9c7 	bl	800461c <HAL_GetTick>
 800328e:	4603      	mov	r3, r0
 8003290:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		}

        tft_prints(0, 0, "VEL: %d          ", get_motor_feedback(motorchoice[motornum]).vel_rpm);
 8003294:	4b8c      	ldr	r3, [pc, #560]	; (80034c8 <main+0x320>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800329c:	443b      	add	r3, r7
 800329e:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80032a2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80032a6:	4611      	mov	r1, r2
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fe f8b5 	bl	8001418 <get_motor_feedback>
 80032ae:	f9b7 30ee 	ldrsh.w	r3, [r7, #238]	; 0xee
 80032b2:	4a86      	ldr	r2, [pc, #536]	; (80034cc <main+0x324>)
 80032b4:	2100      	movs	r1, #0
 80032b6:	2000      	movs	r0, #0
 80032b8:	f7ff fcbc 	bl	8002c34 <tft_prints>
        tft_prints(0, 1, "ENC: %d   ", get_motor_feedback(motorchoice[motornum]).encoder);
 80032bc:	4b82      	ldr	r3, [pc, #520]	; (80034c8 <main+0x320>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80032c4:	443b      	add	r3, r7
 80032c6:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80032ca:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80032ce:	4611      	mov	r1, r2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fe f8a1 	bl	8001418 <get_motor_feedback>
 80032d6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80032da:	4a7d      	ldr	r2, [pc, #500]	; (80034d0 <main+0x328>)
 80032dc:	2101      	movs	r1, #1
 80032de:	2000      	movs	r0, #0
 80032e0:	f7ff fca8 	bl	8002c34 <tft_prints>
        tft_prints(0, 2, "CUR: %0.3f   ", (double)get_motor_feedback(motorchoice[motornum]).actual_current);
 80032e4:	4b78      	ldr	r3, [pc, #480]	; (80034c8 <main+0x320>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80032ec:	443b      	add	r3, r7
 80032ee:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80032f2:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80032f6:	4611      	mov	r1, r2
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fe f88d 	bl	8001418 <get_motor_feedback>
 80032fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003302:	4618      	mov	r0, r3
 8003304:	f7fd f8c4 	bl	8000490 <__aeabi_f2d>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	e9cd 2300 	strd	r2, r3, [sp]
 8003310:	4a70      	ldr	r2, [pc, #448]	; (80034d4 <main+0x32c>)
 8003312:	2102      	movs	r1, #2
 8003314:	2000      	movs	r0, #0
 8003316:	f7ff fc8d 	bl	8002c34 <tft_prints>

    	switch(Btn1_mode) {
 800331a:	4b6f      	ldr	r3, [pc, #444]	; (80034d8 <main+0x330>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b03      	cmp	r3, #3
 8003320:	d874      	bhi.n	800340c <main+0x264>
 8003322:	a201      	add	r2, pc, #4	; (adr r2, 8003328 <main+0x180>)
 8003324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003328:	08003339 	.word	0x08003339
 800332c:	0800335f 	.word	0x0800335f
 8003330:	08003397 	.word	0x08003397
 8003334:	080033bf 	.word	0x080033bf
    	    // listening
    	    case (0):
    	        if (!btn_read(BTN1)) {
 8003338:	2108      	movs	r1, #8
 800333a:	485e      	ldr	r0, [pc, #376]	; (80034b4 <main+0x30c>)
 800333c:	f002 fca6 	bl	8005c8c <HAL_GPIO_ReadPin>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d15d      	bne.n	8003402 <main+0x25a>
    	        	Btn1_mode++;
 8003346:	4b64      	ldr	r3, [pc, #400]	; (80034d8 <main+0x330>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	3301      	adds	r3, #1
 800334c:	4a62      	ldr	r2, [pc, #392]	; (80034d8 <main+0x330>)
 800334e:	6013      	str	r3, [r2, #0]
    	        	Btn1_HoldTime = HAL_GetTick();
 8003350:	f001 f964 	bl	800461c <HAL_GetTick>
 8003354:	4603      	mov	r3, r0
 8003356:	461a      	mov	r2, r3
 8003358:	4b60      	ldr	r3, [pc, #384]	; (80034dc <main+0x334>)
 800335a:	601a      	str	r2, [r3, #0]
    	        }
    	    break;
 800335c:	e051      	b.n	8003402 <main+0x25a>

    	    // Holding
    	    case (1):
				if (HAL_GetTick() - Btn1_HoldTime < 500) {
 800335e:	f001 f95d 	bl	800461c <HAL_GetTick>
 8003362:	4603      	mov	r3, r0
 8003364:	4a5d      	ldr	r2, [pc, #372]	; (80034dc <main+0x334>)
 8003366:	6812      	ldr	r2, [r2, #0]
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800336e:	d20a      	bcs.n	8003386 <main+0x1de>
					if (btn_read(BTN1)) Btn1_mode = 2;
 8003370:	2108      	movs	r1, #8
 8003372:	4850      	ldr	r0, [pc, #320]	; (80034b4 <main+0x30c>)
 8003374:	f002 fc8a 	bl	8005c8c <HAL_GPIO_ReadPin>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d043      	beq.n	8003406 <main+0x25e>
 800337e:	4b56      	ldr	r3, [pc, #344]	; (80034d8 <main+0x330>)
 8003380:	2202      	movs	r2, #2
 8003382:	601a      	str	r2, [r3, #0]
				}
				else if (motornum < 4) Btn1_mode = 3;
    	    break;
 8003384:	e03f      	b.n	8003406 <main+0x25e>
				else if (motornum < 4) Btn1_mode = 3;
 8003386:	4b50      	ldr	r3, [pc, #320]	; (80034c8 <main+0x320>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b03      	cmp	r3, #3
 800338c:	dc3b      	bgt.n	8003406 <main+0x25e>
 800338e:	4b52      	ldr	r3, [pc, #328]	; (80034d8 <main+0x330>)
 8003390:	2203      	movs	r2, #3
 8003392:	601a      	str	r2, [r3, #0]
    	    break;
 8003394:	e037      	b.n	8003406 <main+0x25e>

    	    //Clicking
    	    case (2):
				motornum++; motornum %= 4;
 8003396:	4b4c      	ldr	r3, [pc, #304]	; (80034c8 <main+0x320>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	3301      	adds	r3, #1
 800339c:	4a4a      	ldr	r2, [pc, #296]	; (80034c8 <main+0x320>)
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	4b49      	ldr	r3, [pc, #292]	; (80034c8 <main+0x320>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	425a      	negs	r2, r3
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	f002 0203 	and.w	r2, r2, #3
 80033ae:	bf58      	it	pl
 80033b0:	4253      	negpl	r3, r2
 80033b2:	4a45      	ldr	r2, [pc, #276]	; (80034c8 <main+0x320>)
 80033b4:	6013      	str	r3, [r2, #0]
    	    	Btn1_mode = 0;
 80033b6:	4b48      	ldr	r3, [pc, #288]	; (80034d8 <main+0x330>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
    	    break;
 80033bc:	e026      	b.n	800340c <main+0x264>

    	    //Holding
    	    case (3):
    	    	target_vel[motornum] = 1000;
 80033be:	4b42      	ldr	r3, [pc, #264]	; (80034c8 <main+0x320>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a47      	ldr	r2, [pc, #284]	; (80034e0 <main+0x338>)
 80033c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80033c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	    	testing(motorchoice[motornum]);
 80033cc:	4b3e      	ldr	r3, [pc, #248]	; (80034c8 <main+0x320>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80033d4:	443b      	add	r3, r7
 80033d6:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fe fa3a 	bl	8001854 <testing>
    	    	if (btn_read(BTN1)) {
 80033e0:	2108      	movs	r1, #8
 80033e2:	4834      	ldr	r0, [pc, #208]	; (80034b4 <main+0x30c>)
 80033e4:	f002 fc52 	bl	8005c8c <HAL_GPIO_ReadPin>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00d      	beq.n	800340a <main+0x262>
    	    		target_vel[motornum] = 0;
 80033ee:	4b36      	ldr	r3, [pc, #216]	; (80034c8 <main+0x320>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a3b      	ldr	r2, [pc, #236]	; (80034e0 <main+0x338>)
 80033f4:	2100      	movs	r1, #0
 80033f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	    		Btn1_mode = 0;
 80033fa:	4b37      	ldr	r3, [pc, #220]	; (80034d8 <main+0x330>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
    	    	}
			break;
 8003400:	e003      	b.n	800340a <main+0x262>
    	    break;
 8003402:	bf00      	nop
 8003404:	e002      	b.n	800340c <main+0x264>
    	    break;
 8003406:	bf00      	nop
 8003408:	e000      	b.n	800340c <main+0x264>
			break;
 800340a:	bf00      	nop
    	}

    	switch(Btn2_mode) {
 800340c:	4b35      	ldr	r3, [pc, #212]	; (80034e4 <main+0x33c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b03      	cmp	r3, #3
 8003412:	f200 814e 	bhi.w	80036b2 <main+0x50a>
 8003416:	a201      	add	r2, pc, #4	; (adr r2, 800341c <main+0x274>)
 8003418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341c:	0800342d 	.word	0x0800342d
 8003420:	08003455 	.word	0x08003455
 8003424:	08003487 	.word	0x08003487
 8003428:	080034f5 	.word	0x080034f5
			// listening
			case (0):
				if (!btn_read(BTN2)) {
 800342c:	2104      	movs	r1, #4
 800342e:	482e      	ldr	r0, [pc, #184]	; (80034e8 <main+0x340>)
 8003430:	f002 fc2c 	bl	8005c8c <HAL_GPIO_ReadPin>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	f040 8138 	bne.w	80036ac <main+0x504>
					Btn2_mode++;
 800343c:	4b29      	ldr	r3, [pc, #164]	; (80034e4 <main+0x33c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3301      	adds	r3, #1
 8003442:	4a28      	ldr	r2, [pc, #160]	; (80034e4 <main+0x33c>)
 8003444:	6013      	str	r3, [r2, #0]
					Btn2_HoldTime = HAL_GetTick();
 8003446:	f001 f8e9 	bl	800461c <HAL_GetTick>
 800344a:	4603      	mov	r3, r0
 800344c:	461a      	mov	r2, r3
 800344e:	4b27      	ldr	r3, [pc, #156]	; (80034ec <main+0x344>)
 8003450:	601a      	str	r2, [r3, #0]
				}
			break;
 8003452:	e12b      	b.n	80036ac <main+0x504>

			// Holding
			case (1):
				if (HAL_GetTick() - Btn2_HoldTime < 500) {
 8003454:	f001 f8e2 	bl	800461c <HAL_GetTick>
 8003458:	4603      	mov	r3, r0
 800345a:	4a24      	ldr	r2, [pc, #144]	; (80034ec <main+0x344>)
 800345c:	6812      	ldr	r2, [r2, #0]
 800345e:	1a9b      	subs	r3, r3, r2
 8003460:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003464:	d20b      	bcs.n	800347e <main+0x2d6>
					if (btn_read(BTN2)) Btn2_mode = 2;
 8003466:	2104      	movs	r1, #4
 8003468:	481f      	ldr	r0, [pc, #124]	; (80034e8 <main+0x340>)
 800346a:	f002 fc0f 	bl	8005c8c <HAL_GPIO_ReadPin>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 811d 	beq.w	80036b0 <main+0x508>
 8003476:	4b1b      	ldr	r3, [pc, #108]	; (80034e4 <main+0x33c>)
 8003478:	2202      	movs	r2, #2
 800347a:	601a      	str	r2, [r3, #0]
				}
				else Btn2_mode = 3;
			break;
 800347c:	e118      	b.n	80036b0 <main+0x508>
				else Btn2_mode = 3;
 800347e:	4b19      	ldr	r3, [pc, #100]	; (80034e4 <main+0x33c>)
 8003480:	2203      	movs	r2, #3
 8003482:	601a      	str	r2, [r3, #0]
			break;
 8003484:	e114      	b.n	80036b0 <main+0x508>

			//Clicking
			case (2):
				k_choice++; k_choice %= 6;
 8003486:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800348a:	3301      	adds	r3, #1
 800348c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8003490:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8003494:	4b16      	ldr	r3, [pc, #88]	; (80034f0 <main+0x348>)
 8003496:	fba3 1302 	umull	r1, r3, r3, r2
 800349a:	0899      	lsrs	r1, r3, #2
 800349c:	460b      	mov	r3, r1
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	440b      	add	r3, r1
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

				Btn2_mode = 0;
 80034aa:	4b0e      	ldr	r3, [pc, #56]	; (80034e4 <main+0x33c>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]
			break;
 80034b0:	e0ff      	b.n	80036b2 <main+0x50a>
 80034b2:	bf00      	nop
 80034b4:	40020400 	.word	0x40020400
 80034b8:	40020800 	.word	0x40020800
 80034bc:	080093fc 	.word	0x080093fc
 80034c0:	08009400 	.word	0x08009400
 80034c4:	08009478 	.word	0x08009478
 80034c8:	20000004 	.word	0x20000004
 80034cc:	080093b8 	.word	0x080093b8
 80034d0:	080093cc 	.word	0x080093cc
 80034d4:	080093d8 	.word	0x080093d8
 80034d8:	2000d7d0 	.word	0x2000d7d0
 80034dc:	2000d7d4 	.word	0x2000d7d4
 80034e0:	2000d7d8 	.word	0x2000d7d8
 80034e4:	2000d7e8 	.word	0x2000d7e8
 80034e8:	40020c00 	.word	0x40020c00
 80034ec:	2000d7ec 	.word	0x2000d7ec
 80034f0:	aaaaaaab 	.word	0xaaaaaaab

			//Holding
			case (3):
				if (btn_read(BTN2)) Btn2_mode = 0;
 80034f4:	2104      	movs	r1, #4
 80034f6:	48a6      	ldr	r0, [pc, #664]	; (8003790 <main+0x5e8>)
 80034f8:	f002 fbc8 	bl	8005c8c <HAL_GPIO_ReadPin>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d002      	beq.n	8003508 <main+0x360>
 8003502:	4ba4      	ldr	r3, [pc, #656]	; (8003794 <main+0x5ec>)
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]

				if (HAL_GetTick() - last_ticks_inc >= 100) {
 8003508:	f001 f888 	bl	800461c <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b63      	cmp	r3, #99	; 0x63
 8003516:	f240 809e 	bls.w	8003656 <main+0x4ae>
					switch (k_choice) {
 800351a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800351e:	2b05      	cmp	r3, #5
 8003520:	f200 8094 	bhi.w	800364c <main+0x4a4>
 8003524:	a201      	add	r2, pc, #4	; (adr r2, 800352c <main+0x384>)
 8003526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352a:	bf00      	nop
 800352c:	08003545 	.word	0x08003545
 8003530:	08003571 	.word	0x08003571
 8003534:	0800359d 	.word	0x0800359d
 8003538:	080035c9 	.word	0x080035c9
 800353c:	080035f5 	.word	0x080035f5
 8003540:	08003621 	.word	0x08003621
						case (kp_increase):
							kp[motornum] *= 1.1;
 8003544:	4b94      	ldr	r3, [pc, #592]	; (8003798 <main+0x5f0>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a94      	ldr	r2, [pc, #592]	; (800379c <main+0x5f4>)
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003552:	4b91      	ldr	r3, [pc, #580]	; (8003798 <main+0x5f0>)
 8003554:	681c      	ldr	r4, [r3, #0]
 8003556:	a38a      	add	r3, pc, #552	; (adr r3, 8003780 <main+0x5d8>)
 8003558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355c:	f7fc fff0 	bl	8000540 <__aeabi_dmul>
 8003560:	4602      	mov	r2, r0
 8003562:	460b      	mov	r3, r1
 8003564:	488d      	ldr	r0, [pc, #564]	; (800379c <main+0x5f4>)
 8003566:	00e1      	lsls	r1, r4, #3
 8003568:	4401      	add	r1, r0
 800356a:	e9c1 2300 	strd	r2, r3, [r1]
						break;
 800356e:	e06d      	b.n	800364c <main+0x4a4>

						case (kp_decrease):
							kp[motornum] *= 0.9;
 8003570:	4b89      	ldr	r3, [pc, #548]	; (8003798 <main+0x5f0>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a89      	ldr	r2, [pc, #548]	; (800379c <main+0x5f4>)
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4413      	add	r3, r2
 800357a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800357e:	4b86      	ldr	r3, [pc, #536]	; (8003798 <main+0x5f0>)
 8003580:	681c      	ldr	r4, [r3, #0]
 8003582:	a381      	add	r3, pc, #516	; (adr r3, 8003788 <main+0x5e0>)
 8003584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003588:	f7fc ffda 	bl	8000540 <__aeabi_dmul>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	4882      	ldr	r0, [pc, #520]	; (800379c <main+0x5f4>)
 8003592:	00e1      	lsls	r1, r4, #3
 8003594:	4401      	add	r1, r0
 8003596:	e9c1 2300 	strd	r2, r3, [r1]
						break;
 800359a:	e057      	b.n	800364c <main+0x4a4>

						case (ki_increase):
							ki[motornum] *= 1.1;
 800359c:	4b7e      	ldr	r3, [pc, #504]	; (8003798 <main+0x5f0>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a7f      	ldr	r2, [pc, #508]	; (80037a0 <main+0x5f8>)
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	4413      	add	r3, r2
 80035a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035aa:	4b7b      	ldr	r3, [pc, #492]	; (8003798 <main+0x5f0>)
 80035ac:	681c      	ldr	r4, [r3, #0]
 80035ae:	a374      	add	r3, pc, #464	; (adr r3, 8003780 <main+0x5d8>)
 80035b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b4:	f7fc ffc4 	bl	8000540 <__aeabi_dmul>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4878      	ldr	r0, [pc, #480]	; (80037a0 <main+0x5f8>)
 80035be:	00e1      	lsls	r1, r4, #3
 80035c0:	4401      	add	r1, r0
 80035c2:	e9c1 2300 	strd	r2, r3, [r1]
						break;
 80035c6:	e041      	b.n	800364c <main+0x4a4>

						case (ki_decrease):
							ki[motornum] *= 0.9;
 80035c8:	4b73      	ldr	r3, [pc, #460]	; (8003798 <main+0x5f0>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a74      	ldr	r2, [pc, #464]	; (80037a0 <main+0x5f8>)
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4413      	add	r3, r2
 80035d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035d6:	4b70      	ldr	r3, [pc, #448]	; (8003798 <main+0x5f0>)
 80035d8:	681c      	ldr	r4, [r3, #0]
 80035da:	a36b      	add	r3, pc, #428	; (adr r3, 8003788 <main+0x5e0>)
 80035dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e0:	f7fc ffae 	bl	8000540 <__aeabi_dmul>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	486d      	ldr	r0, [pc, #436]	; (80037a0 <main+0x5f8>)
 80035ea:	00e1      	lsls	r1, r4, #3
 80035ec:	4401      	add	r1, r0
 80035ee:	e9c1 2300 	strd	r2, r3, [r1]
						break;
 80035f2:	e02b      	b.n	800364c <main+0x4a4>

						case (kd_increase):
							kd[motornum] *= 1.1;
 80035f4:	4b68      	ldr	r3, [pc, #416]	; (8003798 <main+0x5f0>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a6a      	ldr	r2, [pc, #424]	; (80037a4 <main+0x5fc>)
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	4413      	add	r3, r2
 80035fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003602:	4b65      	ldr	r3, [pc, #404]	; (8003798 <main+0x5f0>)
 8003604:	681c      	ldr	r4, [r3, #0]
 8003606:	a35e      	add	r3, pc, #376	; (adr r3, 8003780 <main+0x5d8>)
 8003608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360c:	f7fc ff98 	bl	8000540 <__aeabi_dmul>
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	4863      	ldr	r0, [pc, #396]	; (80037a4 <main+0x5fc>)
 8003616:	00e1      	lsls	r1, r4, #3
 8003618:	4401      	add	r1, r0
 800361a:	e9c1 2300 	strd	r2, r3, [r1]
						break;
 800361e:	e015      	b.n	800364c <main+0x4a4>

						case (kd_decrease):
							kd[motornum] *= 0.9;
 8003620:	4b5d      	ldr	r3, [pc, #372]	; (8003798 <main+0x5f0>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a5f      	ldr	r2, [pc, #380]	; (80037a4 <main+0x5fc>)
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4413      	add	r3, r2
 800362a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800362e:	4b5a      	ldr	r3, [pc, #360]	; (8003798 <main+0x5f0>)
 8003630:	681c      	ldr	r4, [r3, #0]
 8003632:	a355      	add	r3, pc, #340	; (adr r3, 8003788 <main+0x5e0>)
 8003634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003638:	f7fc ff82 	bl	8000540 <__aeabi_dmul>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4858      	ldr	r0, [pc, #352]	; (80037a4 <main+0x5fc>)
 8003642:	00e1      	lsls	r1, r4, #3
 8003644:	4401      	add	r1, r0
 8003646:	e9c1 2300 	strd	r2, r3, [r1]
						break;
 800364a:	bf00      	nop
					}
					last_ticks_inc = HAL_GetTick();
 800364c:	f000 ffe6 	bl	800461c <HAL_GetTick>
 8003650:	4603      	mov	r3, r0
 8003652:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
				}
				tft_prints(0, 7, "%0.5f", kp[motornum]);
 8003656:	4b50      	ldr	r3, [pc, #320]	; (8003798 <main+0x5f0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a50      	ldr	r2, [pc, #320]	; (800379c <main+0x5f4>)
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	4413      	add	r3, r2
 8003660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003664:	e9cd 2300 	strd	r2, r3, [sp]
 8003668:	4a4f      	ldr	r2, [pc, #316]	; (80037a8 <main+0x600>)
 800366a:	2107      	movs	r1, #7
 800366c:	2000      	movs	r0, #0
 800366e:	f7ff fae1 	bl	8002c34 <tft_prints>
				tft_prints(0, 8, "%0.5f", ki[motornum]);
 8003672:	4b49      	ldr	r3, [pc, #292]	; (8003798 <main+0x5f0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a4a      	ldr	r2, [pc, #296]	; (80037a0 <main+0x5f8>)
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	4413      	add	r3, r2
 800367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003680:	e9cd 2300 	strd	r2, r3, [sp]
 8003684:	4a48      	ldr	r2, [pc, #288]	; (80037a8 <main+0x600>)
 8003686:	2108      	movs	r1, #8
 8003688:	2000      	movs	r0, #0
 800368a:	f7ff fad3 	bl	8002c34 <tft_prints>
				tft_prints(0, 9, "%0.5f", kd[motornum]);
 800368e:	4b42      	ldr	r3, [pc, #264]	; (8003798 <main+0x5f0>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a44      	ldr	r2, [pc, #272]	; (80037a4 <main+0x5fc>)
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	4413      	add	r3, r2
 8003698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369c:	e9cd 2300 	strd	r2, r3, [sp]
 80036a0:	4a41      	ldr	r2, [pc, #260]	; (80037a8 <main+0x600>)
 80036a2:	2109      	movs	r1, #9
 80036a4:	2000      	movs	r0, #0
 80036a6:	f7ff fac5 	bl	8002c34 <tft_prints>
			break;
 80036aa:	e002      	b.n	80036b2 <main+0x50a>
			break;
 80036ac:	bf00      	nop
 80036ae:	e000      	b.n	80036b2 <main+0x50a>
			break;
 80036b0:	bf00      	nop
		}
    	ReceiveData(target_vel);
 80036b2:	483e      	ldr	r0, [pc, #248]	; (80037ac <main+0x604>)
 80036b4:	f000 fdee 	bl	8004294 <ReceiveData>
    	for (int i = 0; i < 4; i++ ) {
 80036b8:	2300      	movs	r3, #0
 80036ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80036be:	e034      	b.n	800372a <main+0x582>
    		set_motor_speed(motorchoice[i],target_vel[i],kp[i],ki[i],kd[i]);
 80036c0:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80036c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80036c8:	4413      	add	r3, r2
 80036ca:	781a      	ldrb	r2, [r3, #0]
 80036cc:	4937      	ldr	r1, [pc, #220]	; (80037ac <main+0x604>)
 80036ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80036d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036d6:	b219      	sxth	r1, r3
 80036d8:	4830      	ldr	r0, [pc, #192]	; (800379c <main+0x5f4>)
 80036da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4403      	add	r3, r0
 80036e2:	ed93 7b00 	vldr	d7, [r3]
 80036e6:	482e      	ldr	r0, [pc, #184]	; (80037a0 <main+0x5f8>)
 80036e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	4403      	add	r3, r0
 80036f0:	ed93 6b00 	vldr	d6, [r3]
 80036f4:	482b      	ldr	r0, [pc, #172]	; (80037a4 <main+0x5fc>)
 80036f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	4403      	add	r3, r0
 80036fe:	ed93 5b00 	vldr	d5, [r3]
 8003702:	eeb0 2a45 	vmov.f32	s4, s10
 8003706:	eef0 2a65 	vmov.f32	s5, s11
 800370a:	eeb0 1a46 	vmov.f32	s2, s12
 800370e:	eef0 1a66 	vmov.f32	s3, s13
 8003712:	eeb0 0a47 	vmov.f32	s0, s14
 8003716:	eef0 0a67 	vmov.f32	s1, s15
 800371a:	4610      	mov	r0, r2
 800371c:	f7fd ffe4 	bl	80016e8 <set_motor_speed>
    	for (int i = 0; i < 4; i++ ) {
 8003720:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003724:	3301      	adds	r3, #1
 8003726:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800372a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800372e:	2b03      	cmp	r3, #3
 8003730:	ddc6      	ble.n	80036c0 <main+0x518>
    	    // tft_prints(0, 6+i, "%d", target_vel[i]);
    	}

    	tft_prints(0, 3, "%s", test_m[motornum]);
 8003732:	4b19      	ldr	r3, [pc, #100]	; (8003798 <main+0x5f0>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	1d39      	adds	r1, r7, #4
 8003738:	4613      	mov	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	4a1b      	ldr	r2, [pc, #108]	; (80037b0 <main+0x608>)
 8003744:	2103      	movs	r1, #3
 8003746:	2000      	movs	r0, #0
 8003748:	f7ff fa74 	bl	8002c34 <tft_prints>
    	tft_prints(0, 4, "%s     ", text_k[k_choice]);
 800374c:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8003750:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	4a15      	ldr	r2, [pc, #84]	; (80037b4 <main+0x60c>)
 8003760:	2104      	movs	r1, #4
 8003762:	2000      	movs	r0, #0
 8003764:	f7ff fa66 	bl	8002c34 <tft_prints>
    	tft_update(100);
 8003768:	2064      	movs	r0, #100	; 0x64
 800376a:	f7ff fbc5 	bl	8002ef8 <tft_update>
    	SendData(motorchoice);
 800376e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003772:	4618      	mov	r0, r3
 8003774:	f000 fda4 	bl	80042c0 <SendData>
    	can_ctrl_loop();
 8003778:	e579      	b.n	800326e <main+0xc6>
 800377a:	bf00      	nop
 800377c:	f3af 8000 	nop.w
 8003780:	9999999a 	.word	0x9999999a
 8003784:	3ff19999 	.word	0x3ff19999
 8003788:	cccccccd 	.word	0xcccccccd
 800378c:	3feccccc 	.word	0x3feccccc
 8003790:	40020c00 	.word	0x40020c00
 8003794:	2000d7e8 	.word	0x2000d7e8
 8003798:	20000004 	.word	0x20000004
 800379c:	20000008 	.word	0x20000008
 80037a0:	20000028 	.word	0x20000028
 80037a4:	20000048 	.word	0x20000048
 80037a8:	080093e8 	.word	0x080093e8
 80037ac:	2000d7d8 	.word	0x2000d7d8
 80037b0:	080093f0 	.word	0x080093f0
 80037b4:	080093f4 	.word	0x080093f4

080037b8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b094      	sub	sp, #80	; 0x50
 80037bc:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80037be:	f107 0320 	add.w	r3, r7, #32
 80037c2:	2230      	movs	r2, #48	; 0x30
 80037c4:	2100      	movs	r1, #0
 80037c6:	4618      	mov	r0, r3
 80037c8:	f005 fcf4 	bl	80091b4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80037cc:	f107 030c 	add.w	r3, r7, #12
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	60da      	str	r2, [r3, #12]
 80037da:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 80037dc:	2300      	movs	r3, #0
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	4b28      	ldr	r3, [pc, #160]	; (8003884 <SystemClock_Config+0xcc>)
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	4a27      	ldr	r2, [pc, #156]	; (8003884 <SystemClock_Config+0xcc>)
 80037e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ea:	6413      	str	r3, [r2, #64]	; 0x40
 80037ec:	4b25      	ldr	r3, [pc, #148]	; (8003884 <SystemClock_Config+0xcc>)
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80037f8:	2300      	movs	r3, #0
 80037fa:	607b      	str	r3, [r7, #4]
 80037fc:	4b22      	ldr	r3, [pc, #136]	; (8003888 <SystemClock_Config+0xd0>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a21      	ldr	r2, [pc, #132]	; (8003888 <SystemClock_Config+0xd0>)
 8003802:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	4b1f      	ldr	r3, [pc, #124]	; (8003888 <SystemClock_Config+0xd0>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003810:	607b      	str	r3, [r7, #4]
 8003812:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003814:	2301      	movs	r3, #1
 8003816:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003818:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800381e:	2302      	movs	r3, #2
 8003820:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003822:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003826:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 4;
 8003828:	2304      	movs	r3, #4
 800382a:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 800382c:	23a8      	movs	r3, #168	; 0xa8
 800382e:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003830:	2302      	movs	r3, #2
 8003832:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8003834:	2304      	movs	r3, #4
 8003836:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003838:	f107 0320 	add.w	r3, r7, #32
 800383c:	4618      	mov	r0, r3
 800383e:	f002 fa95 	bl	8005d6c <HAL_RCC_OscConfig>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <SystemClock_Config+0x94>
        Error_Handler();
 8003848:	f000 f820 	bl	800388c <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800384c:	230f      	movs	r3, #15
 800384e:	60fb      	str	r3, [r7, #12]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003850:	2302      	movs	r3, #2
 8003852:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003854:	2300      	movs	r3, #0
 8003856:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003858:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800385c:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800385e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003862:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8003864:	f107 030c 	add.w	r3, r7, #12
 8003868:	2105      	movs	r1, #5
 800386a:	4618      	mov	r0, r3
 800386c:	f002 fcf6 	bl	800625c <HAL_RCC_ClockConfig>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <SystemClock_Config+0xc2>
        Error_Handler();
 8003876:	f000 f809 	bl	800388c <Error_Handler>
    }
}
 800387a:	bf00      	nop
 800387c:	3750      	adds	r7, #80	; 0x50
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40023800 	.word	0x40023800
 8003888:	40007000 	.word	0x40007000

0800388c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003890:	b672      	cpsid	i
}
 8003892:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8003894:	e7fe      	b.n	8003894 <Error_Handler+0x8>
	...

08003898 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800389c:	4b17      	ldr	r3, [pc, #92]	; (80038fc <MX_SPI1_Init+0x64>)
 800389e:	4a18      	ldr	r2, [pc, #96]	; (8003900 <MX_SPI1_Init+0x68>)
 80038a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80038a2:	4b16      	ldr	r3, [pc, #88]	; (80038fc <MX_SPI1_Init+0x64>)
 80038a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80038aa:	4b14      	ldr	r3, [pc, #80]	; (80038fc <MX_SPI1_Init+0x64>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80038b0:	4b12      	ldr	r3, [pc, #72]	; (80038fc <MX_SPI1_Init+0x64>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038b6:	4b11      	ldr	r3, [pc, #68]	; (80038fc <MX_SPI1_Init+0x64>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038bc:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <MX_SPI1_Init+0x64>)
 80038be:	2200      	movs	r2, #0
 80038c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80038c2:	4b0e      	ldr	r3, [pc, #56]	; (80038fc <MX_SPI1_Init+0x64>)
 80038c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038ca:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <MX_SPI1_Init+0x64>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038d0:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <MX_SPI1_Init+0x64>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80038d6:	4b09      	ldr	r3, [pc, #36]	; (80038fc <MX_SPI1_Init+0x64>)
 80038d8:	2200      	movs	r2, #0
 80038da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038dc:	4b07      	ldr	r3, [pc, #28]	; (80038fc <MX_SPI1_Init+0x64>)
 80038de:	2200      	movs	r2, #0
 80038e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80038e2:	4b06      	ldr	r3, [pc, #24]	; (80038fc <MX_SPI1_Init+0x64>)
 80038e4:	220a      	movs	r2, #10
 80038e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80038e8:	4804      	ldr	r0, [pc, #16]	; (80038fc <MX_SPI1_Init+0x64>)
 80038ea:	f002 fed7 	bl	800669c <HAL_SPI_Init>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80038f4:	f7ff ffca 	bl	800388c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80038f8:	bf00      	nop
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	2000d7f0 	.word	0x2000d7f0
 8003900:	40013000 	.word	0x40013000

08003904 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08a      	sub	sp, #40	; 0x28
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800390c:	f107 0314 	add.w	r3, r7, #20
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	60da      	str	r2, [r3, #12]
 800391a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a39      	ldr	r2, [pc, #228]	; (8003a08 <HAL_SPI_MspInit+0x104>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d16b      	bne.n	80039fe <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	4b38      	ldr	r3, [pc, #224]	; (8003a0c <HAL_SPI_MspInit+0x108>)
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	4a37      	ldr	r2, [pc, #220]	; (8003a0c <HAL_SPI_MspInit+0x108>)
 8003930:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003934:	6453      	str	r3, [r2, #68]	; 0x44
 8003936:	4b35      	ldr	r3, [pc, #212]	; (8003a0c <HAL_SPI_MspInit+0x108>)
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800393e:	613b      	str	r3, [r7, #16]
 8003940:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003942:	2300      	movs	r3, #0
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	4b31      	ldr	r3, [pc, #196]	; (8003a0c <HAL_SPI_MspInit+0x108>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	4a30      	ldr	r2, [pc, #192]	; (8003a0c <HAL_SPI_MspInit+0x108>)
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	6313      	str	r3, [r2, #48]	; 0x30
 8003952:	4b2e      	ldr	r3, [pc, #184]	; (8003a0c <HAL_SPI_MspInit+0x108>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = TFT_SCK_Pin|TFT_MOSI_Pin;
 800395e:	23a0      	movs	r3, #160	; 0xa0
 8003960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003962:	2302      	movs	r3, #2
 8003964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003966:	2300      	movs	r3, #0
 8003968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800396a:	2303      	movs	r3, #3
 800396c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800396e:	2305      	movs	r3, #5
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003972:	f107 0314 	add.w	r3, r7, #20
 8003976:	4619      	mov	r1, r3
 8003978:	4825      	ldr	r0, [pc, #148]	; (8003a10 <HAL_SPI_MspInit+0x10c>)
 800397a:	f001 ffeb 	bl	8005954 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800397e:	4b25      	ldr	r3, [pc, #148]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 8003980:	4a25      	ldr	r2, [pc, #148]	; (8003a18 <HAL_SPI_MspInit+0x114>)
 8003982:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8003984:	4b23      	ldr	r3, [pc, #140]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 8003986:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800398a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800398c:	4b21      	ldr	r3, [pc, #132]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 800398e:	2240      	movs	r2, #64	; 0x40
 8003990:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003992:	4b20      	ldr	r3, [pc, #128]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 8003994:	2200      	movs	r2, #0
 8003996:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003998:	4b1e      	ldr	r3, [pc, #120]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 800399a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800399e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039a0:	4b1c      	ldr	r3, [pc, #112]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039a6:	4b1b      	ldr	r3, [pc, #108]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80039ac:	4b19      	ldr	r3, [pc, #100]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80039b2:	4b18      	ldr	r3, [pc, #96]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80039b8:	4b16      	ldr	r3, [pc, #88]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 80039ba:	2204      	movs	r2, #4
 80039bc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80039be:	4b15      	ldr	r3, [pc, #84]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 80039c0:	2203      	movs	r2, #3
 80039c2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_INC16;
 80039c4:	4b13      	ldr	r3, [pc, #76]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 80039c6:	f04f 72c0 	mov.w	r2, #25165824	; 0x1800000
 80039ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80039cc:	4b11      	ldr	r3, [pc, #68]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80039d2:	4810      	ldr	r0, [pc, #64]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 80039d4:	f001 fbbc 	bl	8005150 <HAL_DMA_Init>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 80039de:	f7ff ff55 	bl	800388c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a0b      	ldr	r2, [pc, #44]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 80039e6:	649a      	str	r2, [r3, #72]	; 0x48
 80039e8:	4a0a      	ldr	r2, [pc, #40]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80039ee:	2200      	movs	r2, #0
 80039f0:	2100      	movs	r1, #0
 80039f2:	2023      	movs	r0, #35	; 0x23
 80039f4:	f001 fb75 	bl	80050e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80039f8:	2023      	movs	r0, #35	; 0x23
 80039fa:	f001 fb8e 	bl	800511a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80039fe:	bf00      	nop
 8003a00:	3728      	adds	r7, #40	; 0x28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40013000 	.word	0x40013000
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	40020000 	.word	0x40020000
 8003a14:	2000d848 	.word	0x2000d848
 8003a18:	40026458 	.word	0x40026458

08003a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a22:	2300      	movs	r3, #0
 8003a24:	607b      	str	r3, [r7, #4]
 8003a26:	4b10      	ldr	r3, [pc, #64]	; (8003a68 <HAL_MspInit+0x4c>)
 8003a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2a:	4a0f      	ldr	r2, [pc, #60]	; (8003a68 <HAL_MspInit+0x4c>)
 8003a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a30:	6453      	str	r3, [r2, #68]	; 0x44
 8003a32:	4b0d      	ldr	r3, [pc, #52]	; (8003a68 <HAL_MspInit+0x4c>)
 8003a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a3a:	607b      	str	r3, [r7, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a3e:	2300      	movs	r3, #0
 8003a40:	603b      	str	r3, [r7, #0]
 8003a42:	4b09      	ldr	r3, [pc, #36]	; (8003a68 <HAL_MspInit+0x4c>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	4a08      	ldr	r2, [pc, #32]	; (8003a68 <HAL_MspInit+0x4c>)
 8003a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a4e:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <HAL_MspInit+0x4c>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a56:	603b      	str	r3, [r7, #0]
 8003a58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	40023800 	.word	0x40023800

08003a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a70:	e7fe      	b.n	8003a70 <NMI_Handler+0x4>

08003a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a72:	b480      	push	{r7}
 8003a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a76:	e7fe      	b.n	8003a76 <HardFault_Handler+0x4>

08003a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a7c:	e7fe      	b.n	8003a7c <MemManage_Handler+0x4>

08003a7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a82:	e7fe      	b.n	8003a82 <BusFault_Handler+0x4>

08003a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a88:	e7fe      	b.n	8003a88 <UsageFault_Handler+0x4>

08003a8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a8e:	bf00      	nop
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a9c:	bf00      	nop
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003aaa:	bf00      	nop
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ab8:	f000 fd9c 	bl	80045f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003abc:	bf00      	nop
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003ac4:	4802      	ldr	r0, [pc, #8]	; (8003ad0 <SPI1_IRQHandler+0x10>)
 8003ac6:	f003 f865 	bl	8006b94 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003aca:	bf00      	nop
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	2000d7f0 	.word	0x2000d7f0

08003ad4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ad8:	4802      	ldr	r0, [pc, #8]	; (8003ae4 <USART1_IRQHandler+0x10>)
 8003ada:	f004 fbcb 	bl	8008274 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	2000d900 	.word	0x2000d900

08003ae8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003aec:	4802      	ldr	r0, [pc, #8]	; (8003af8 <USART2_IRQHandler+0x10>)
 8003aee:	f004 fbc1 	bl	8008274 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003af2:	bf00      	nop
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	2000d944 	.word	0x2000d944

08003afc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAM_VSYNC_Pin);
 8003b00:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003b04:	f002 f90e 	bl	8005d24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003b08:	bf00      	nop
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003b10:	4802      	ldr	r0, [pc, #8]	; (8003b1c <TIM5_IRQHandler+0x10>)
 8003b12:	f003 fc3b 	bl	800738c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	2000d8a8 	.word	0x2000d8a8

08003b20 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003b24:	4802      	ldr	r0, [pc, #8]	; (8003b30 <DMA2_Stream3_IRQHandler+0x10>)
 8003b26:	f001 fcab 	bl	8005480 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003b2a:	bf00      	nop
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	2000d848 	.word	0x2000d848

08003b34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b38:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <SystemInit+0x20>)
 8003b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3e:	4a05      	ldr	r2, [pc, #20]	; (8003b54 <SystemInit+0x20>)
 8003b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b48:	bf00      	nop
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	e000ed00 	.word	0xe000ed00

08003b58 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b08e      	sub	sp, #56	; 0x38
 8003b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	605a      	str	r2, [r3, #4]
 8003b68:	609a      	str	r2, [r3, #8]
 8003b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b6c:	f107 0320 	add.w	r3, r7, #32
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b76:	1d3b      	adds	r3, r7, #4
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	609a      	str	r2, [r3, #8]
 8003b80:	60da      	str	r2, [r3, #12]
 8003b82:	611a      	str	r2, [r3, #16]
 8003b84:	615a      	str	r2, [r3, #20]
 8003b86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003b88:	4b2c      	ldr	r3, [pc, #176]	; (8003c3c <MX_TIM5_Init+0xe4>)
 8003b8a:	4a2d      	ldr	r2, [pc, #180]	; (8003c40 <MX_TIM5_Init+0xe8>)
 8003b8c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003b8e:	4b2b      	ldr	r3, [pc, #172]	; (8003c3c <MX_TIM5_Init+0xe4>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b94:	4b29      	ldr	r3, [pc, #164]	; (8003c3c <MX_TIM5_Init+0xe4>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8003b9a:	4b28      	ldr	r3, [pc, #160]	; (8003c3c <MX_TIM5_Init+0xe4>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ba0:	4b26      	ldr	r3, [pc, #152]	; (8003c3c <MX_TIM5_Init+0xe4>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ba6:	4b25      	ldr	r3, [pc, #148]	; (8003c3c <MX_TIM5_Init+0xe4>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003bac:	4823      	ldr	r0, [pc, #140]	; (8003c3c <MX_TIM5_Init+0xe4>)
 8003bae:	f003 fa7d 	bl	80070ac <HAL_TIM_Base_Init>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8003bb8:	f7ff fe68 	bl	800388c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003bc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	481c      	ldr	r0, [pc, #112]	; (8003c3c <MX_TIM5_Init+0xe4>)
 8003bca:	f003 fda9 	bl	8007720 <HAL_TIM_ConfigClockSource>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8003bd4:	f7ff fe5a 	bl	800388c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003bd8:	4818      	ldr	r0, [pc, #96]	; (8003c3c <MX_TIM5_Init+0xe4>)
 8003bda:	f003 fab6 	bl	800714a <HAL_TIM_PWM_Init>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8003be4:	f7ff fe52 	bl	800388c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003be8:	2300      	movs	r3, #0
 8003bea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bec:	2300      	movs	r3, #0
 8003bee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003bf0:	f107 0320 	add.w	r3, r7, #32
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4811      	ldr	r0, [pc, #68]	; (8003c3c <MX_TIM5_Init+0xe4>)
 8003bf8:	f004 f99c 	bl	8007f34 <HAL_TIMEx_MasterConfigSynchronization>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8003c02:	f7ff fe43 	bl	800388c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c06:	2360      	movs	r3, #96	; 0x60
 8003c08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c16:	1d3b      	adds	r3, r7, #4
 8003c18:	2200      	movs	r2, #0
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4807      	ldr	r0, [pc, #28]	; (8003c3c <MX_TIM5_Init+0xe4>)
 8003c1e:	f003 fcbd 	bl	800759c <HAL_TIM_PWM_ConfigChannel>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8003c28:	f7ff fe30 	bl	800388c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003c2c:	4803      	ldr	r0, [pc, #12]	; (8003c3c <MX_TIM5_Init+0xe4>)
 8003c2e:	f000 f831 	bl	8003c94 <HAL_TIM_MspPostInit>

}
 8003c32:	bf00      	nop
 8003c34:	3738      	adds	r7, #56	; 0x38
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	2000d8a8 	.word	0x2000d8a8
 8003c40:	40000c00 	.word	0x40000c00

08003c44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a0e      	ldr	r2, [pc, #56]	; (8003c8c <HAL_TIM_Base_MspInit+0x48>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d115      	bne.n	8003c82 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	4b0d      	ldr	r3, [pc, #52]	; (8003c90 <HAL_TIM_Base_MspInit+0x4c>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	4a0c      	ldr	r2, [pc, #48]	; (8003c90 <HAL_TIM_Base_MspInit+0x4c>)
 8003c60:	f043 0308 	orr.w	r3, r3, #8
 8003c64:	6413      	str	r3, [r2, #64]	; 0x40
 8003c66:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <HAL_TIM_Base_MspInit+0x4c>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003c72:	2200      	movs	r2, #0
 8003c74:	2100      	movs	r1, #0
 8003c76:	2032      	movs	r0, #50	; 0x32
 8003c78:	f001 fa33 	bl	80050e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003c7c:	2032      	movs	r0, #50	; 0x32
 8003c7e:	f001 fa4c 	bl	800511a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003c82:	bf00      	nop
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40000c00 	.word	0x40000c00
 8003c90:	40023800 	.word	0x40023800

08003c94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c9c:	f107 030c 	add.w	r3, r7, #12
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	605a      	str	r2, [r3, #4]
 8003ca6:	609a      	str	r2, [r3, #8]
 8003ca8:	60da      	str	r2, [r3, #12]
 8003caa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a12      	ldr	r2, [pc, #72]	; (8003cfc <HAL_TIM_MspPostInit+0x68>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d11d      	bne.n	8003cf2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	4b11      	ldr	r3, [pc, #68]	; (8003d00 <HAL_TIM_MspPostInit+0x6c>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	4a10      	ldr	r2, [pc, #64]	; (8003d00 <HAL_TIM_MspPostInit+0x6c>)
 8003cc0:	f043 0301 	orr.w	r3, r3, #1
 8003cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc6:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <HAL_TIM_MspPostInit+0x6c>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	60bb      	str	r3, [r7, #8]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = PWM1_Pin;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);
 8003ce6:	f107 030c 	add.w	r3, r7, #12
 8003cea:	4619      	mov	r1, r3
 8003cec:	4805      	ldr	r0, [pc, #20]	; (8003d04 <HAL_TIM_MspPostInit+0x70>)
 8003cee:	f001 fe31 	bl	8005954 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003cf2:	bf00      	nop
 8003cf4:	3720      	adds	r7, #32
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40000c00 	.word	0x40000c00
 8003d00:	40023800 	.word	0x40023800
 8003d04:	40020000 	.word	0x40020000

08003d08 <pwm_init>:
        return ALL_OFF;
    }
}


void pwm_init(void) {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
	// init the pwm prescaler value and auto-reload value and start the pwm
	/* Your code start here */
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	4808      	ldr	r0, [pc, #32]	; (8003d30 <pwm_init+0x28>)
 8003d10:	f003 fa74 	bl	80071fc <HAL_TIM_PWM_Start>
	TIM5->ARR = 59999;
 8003d14:	4b07      	ldr	r3, [pc, #28]	; (8003d34 <pwm_init+0x2c>)
 8003d16:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003d1a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM5->PSC = 27;
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <pwm_init+0x2c>)
 8003d1e:	221b      	movs	r2, #27
 8003d20:	629a      	str	r2, [r3, #40]	; 0x28
	TIM5->CCR1 = 1499;
 8003d22:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <pwm_init+0x2c>)
 8003d24:	f240 52db 	movw	r2, #1499	; 0x5db
 8003d28:	635a      	str	r2, [r3, #52]	; 0x34
	/* Your code end here */
}
 8003d2a:	bf00      	nop
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	2000d8a8 	.word	0x2000d8a8
 8003d34:	40000c00 	.word	0x40000c00

08003d38 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d3c:	4b11      	ldr	r3, [pc, #68]	; (8003d84 <MX_USART1_UART_Init+0x4c>)
 8003d3e:	4a12      	ldr	r2, [pc, #72]	; (8003d88 <MX_USART1_UART_Init+0x50>)
 8003d40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003d42:	4b10      	ldr	r3, [pc, #64]	; (8003d84 <MX_USART1_UART_Init+0x4c>)
 8003d44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003d48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d4a:	4b0e      	ldr	r3, [pc, #56]	; (8003d84 <MX_USART1_UART_Init+0x4c>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d50:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <MX_USART1_UART_Init+0x4c>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d56:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <MX_USART1_UART_Init+0x4c>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d5c:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <MX_USART1_UART_Init+0x4c>)
 8003d5e:	220c      	movs	r2, #12
 8003d60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d62:	4b08      	ldr	r3, [pc, #32]	; (8003d84 <MX_USART1_UART_Init+0x4c>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d68:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <MX_USART1_UART_Init+0x4c>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d6e:	4805      	ldr	r0, [pc, #20]	; (8003d84 <MX_USART1_UART_Init+0x4c>)
 8003d70:	f004 f970 	bl	8008054 <HAL_UART_Init>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003d7a:	f7ff fd87 	bl	800388c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d7e:	bf00      	nop
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	2000d900 	.word	0x2000d900
 8003d88:	40011000 	.word	0x40011000

08003d8c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003d90:	4b11      	ldr	r3, [pc, #68]	; (8003dd8 <MX_USART2_UART_Init+0x4c>)
 8003d92:	4a12      	ldr	r2, [pc, #72]	; (8003ddc <MX_USART2_UART_Init+0x50>)
 8003d94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003d96:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <MX_USART2_UART_Init+0x4c>)
 8003d98:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003d9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003d9e:	4b0e      	ldr	r3, [pc, #56]	; (8003dd8 <MX_USART2_UART_Init+0x4c>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003da4:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <MX_USART2_UART_Init+0x4c>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003daa:	4b0b      	ldr	r3, [pc, #44]	; (8003dd8 <MX_USART2_UART_Init+0x4c>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003db0:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <MX_USART2_UART_Init+0x4c>)
 8003db2:	220c      	movs	r2, #12
 8003db4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003db6:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <MX_USART2_UART_Init+0x4c>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dbc:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <MX_USART2_UART_Init+0x4c>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003dc2:	4805      	ldr	r0, [pc, #20]	; (8003dd8 <MX_USART2_UART_Init+0x4c>)
 8003dc4:	f004 f946 	bl	8008054 <HAL_UART_Init>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003dce:	f7ff fd5d 	bl	800388c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003dd2:	bf00      	nop
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	2000d944 	.word	0x2000d944
 8003ddc:	40004400 	.word	0x40004400

08003de0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08c      	sub	sp, #48	; 0x30
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de8:	f107 031c 	add.w	r3, r7, #28
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	609a      	str	r2, [r3, #8]
 8003df4:	60da      	str	r2, [r3, #12]
 8003df6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a3a      	ldr	r2, [pc, #232]	; (8003ee8 <HAL_UART_MspInit+0x108>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d135      	bne.n	8003e6e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e02:	2300      	movs	r3, #0
 8003e04:	61bb      	str	r3, [r7, #24]
 8003e06:	4b39      	ldr	r3, [pc, #228]	; (8003eec <HAL_UART_MspInit+0x10c>)
 8003e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0a:	4a38      	ldr	r2, [pc, #224]	; (8003eec <HAL_UART_MspInit+0x10c>)
 8003e0c:	f043 0310 	orr.w	r3, r3, #16
 8003e10:	6453      	str	r3, [r2, #68]	; 0x44
 8003e12:	4b36      	ldr	r3, [pc, #216]	; (8003eec <HAL_UART_MspInit+0x10c>)
 8003e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e16:	f003 0310 	and.w	r3, r3, #16
 8003e1a:	61bb      	str	r3, [r7, #24]
 8003e1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	4b32      	ldr	r3, [pc, #200]	; (8003eec <HAL_UART_MspInit+0x10c>)
 8003e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e26:	4a31      	ldr	r2, [pc, #196]	; (8003eec <HAL_UART_MspInit+0x10c>)
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e2e:	4b2f      	ldr	r3, [pc, #188]	; (8003eec <HAL_UART_MspInit+0x10c>)
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003e3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e40:	2302      	movs	r3, #2
 8003e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e44:	2300      	movs	r3, #0
 8003e46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e4c:	2307      	movs	r3, #7
 8003e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e50:	f107 031c 	add.w	r3, r7, #28
 8003e54:	4619      	mov	r1, r3
 8003e56:	4826      	ldr	r0, [pc, #152]	; (8003ef0 <HAL_UART_MspInit+0x110>)
 8003e58:	f001 fd7c 	bl	8005954 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	2100      	movs	r1, #0
 8003e60:	2025      	movs	r0, #37	; 0x25
 8003e62:	f001 f93e 	bl	80050e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003e66:	2025      	movs	r0, #37	; 0x25
 8003e68:	f001 f957 	bl	800511a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003e6c:	e038      	b.n	8003ee0 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a20      	ldr	r2, [pc, #128]	; (8003ef4 <HAL_UART_MspInit+0x114>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d133      	bne.n	8003ee0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e78:	2300      	movs	r3, #0
 8003e7a:	613b      	str	r3, [r7, #16]
 8003e7c:	4b1b      	ldr	r3, [pc, #108]	; (8003eec <HAL_UART_MspInit+0x10c>)
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	4a1a      	ldr	r2, [pc, #104]	; (8003eec <HAL_UART_MspInit+0x10c>)
 8003e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e86:	6413      	str	r3, [r2, #64]	; 0x40
 8003e88:	4b18      	ldr	r3, [pc, #96]	; (8003eec <HAL_UART_MspInit+0x10c>)
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e90:	613b      	str	r3, [r7, #16]
 8003e92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e94:	2300      	movs	r3, #0
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	4b14      	ldr	r3, [pc, #80]	; (8003eec <HAL_UART_MspInit+0x10c>)
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9c:	4a13      	ldr	r2, [pc, #76]	; (8003eec <HAL_UART_MspInit+0x10c>)
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ea4:	4b11      	ldr	r3, [pc, #68]	; (8003eec <HAL_UART_MspInit+0x10c>)
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003eb0:	230c      	movs	r3, #12
 8003eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ec0:	2307      	movs	r3, #7
 8003ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ec4:	f107 031c 	add.w	r3, r7, #28
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4809      	ldr	r0, [pc, #36]	; (8003ef0 <HAL_UART_MspInit+0x110>)
 8003ecc:	f001 fd42 	bl	8005954 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	2026      	movs	r0, #38	; 0x26
 8003ed6:	f001 f904 	bl	80050e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003eda:	2026      	movs	r0, #38	; 0x26
 8003edc:	f001 f91d 	bl	800511a <HAL_NVIC_EnableIRQ>
}
 8003ee0:	bf00      	nop
 8003ee2:	3730      	adds	r7, #48	; 0x30
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40011000 	.word	0x40011000
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	40020000 	.word	0x40020000
 8003ef4:	40004400 	.word	0x40004400

08003ef8 <Reset_dat_init>:

  /* USER CODE END USART2_MspDeInit 1 */
  }
}

void Reset_dat_init() {
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; i++) {
 8003efe:	2300      	movs	r3, #0
 8003f00:	607b      	str	r3, [r7, #4]
 8003f02:	e007      	b.n	8003f14 <Reset_dat_init+0x1c>
		dat[i] = '\0';
 8003f04:	4a08      	ldr	r2, [pc, #32]	; (8003f28 <Reset_dat_init+0x30>)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4413      	add	r3, r2
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 10; i++) {
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3301      	adds	r3, #1
 8003f12:	607b      	str	r3, [r7, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b09      	cmp	r3, #9
 8003f18:	ddf4      	ble.n	8003f04 <Reset_dat_init+0xc>
	}
	return;
 8003f1a:	bf00      	nop
}
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	2000d8f0 	.word	0x2000d8f0

08003f2c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
	int value = 0;
 8003f34:	2300      	movs	r3, #0
 8003f36:	617b      	str	r3, [r7, #20]
	int temp = 16;
 8003f38:	2310      	movs	r3, #16
 8003f3a:	613b      	str	r3, [r7, #16]

	switch (dat[0]) {
 8003f3c:	4ba0      	ldr	r3, [pc, #640]	; (80041c0 <HAL_UART_RxCpltCallback+0x294>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	2b31      	cmp	r3, #49	; 0x31
 8003f42:	dc02      	bgt.n	8003f4a <HAL_UART_RxCpltCallback+0x1e>
 8003f44:	2b30      	cmp	r3, #48	; 0x30
 8003f46:	da04      	bge.n	8003f52 <HAL_UART_RxCpltCallback+0x26>
 8003f48:	e19d      	b.n	8004286 <HAL_UART_RxCpltCallback+0x35a>
 8003f4a:	2b73      	cmp	r3, #115	; 0x73
 8003f4c:	f000 818e 	beq.w	800426c <HAL_UART_RxCpltCallback+0x340>
 8003f50:	e199      	b.n	8004286 <HAL_UART_RxCpltCallback+0x35a>
		case '0':
		case '1':
			for (int i = 0; i < 5; i++) {
 8003f52:	2300      	movs	r3, #0
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	e012      	b.n	8003f7e <HAL_UART_RxCpltCallback+0x52>
				value += (dat[i] - '0') * temp;
 8003f58:	4a99      	ldr	r2, [pc, #612]	; (80041c0 <HAL_UART_RxCpltCallback+0x294>)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	3b30      	subs	r3, #48	; 0x30
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	fb02 f303 	mul.w	r3, r2, r3
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	617b      	str	r3, [r7, #20]
				temp /= 2;
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	0fda      	lsrs	r2, r3, #31
 8003f72:	4413      	add	r3, r2
 8003f74:	105b      	asrs	r3, r3, #1
 8003f76:	613b      	str	r3, [r7, #16]
			for (int i = 0; i < 5; i++) {
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	dde9      	ble.n	8003f58 <HAL_UART_RxCpltCallback+0x2c>
			}
			led_toggle(LED2);
 8003f84:	2140      	movs	r1, #64	; 0x40
 8003f86:	488f      	ldr	r0, [pc, #572]	; (80041c4 <HAL_UART_RxCpltCallback+0x298>)
 8003f88:	f001 feb1 	bl	8005cee <HAL_GPIO_TogglePin>

			tft_prints(0, 5, "%s        ", dat);
 8003f8c:	4b8c      	ldr	r3, [pc, #560]	; (80041c0 <HAL_UART_RxCpltCallback+0x294>)
 8003f8e:	4a8e      	ldr	r2, [pc, #568]	; (80041c8 <HAL_UART_RxCpltCallback+0x29c>)
 8003f90:	2105      	movs	r1, #5
 8003f92:	2000      	movs	r0, #0
 8003f94:	f7fe fe4e 	bl	8002c34 <tft_prints>
			tft_prints(0, 6, "%d       ", value);
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	4a8c      	ldr	r2, [pc, #560]	; (80041cc <HAL_UART_RxCpltCallback+0x2a0>)
 8003f9c:	2106      	movs	r1, #6
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	f7fe fe48 	bl	8002c34 <tft_prints>
			tft_update(100);
 8003fa4:	2064      	movs	r0, #100	; 0x64
 8003fa6:	f7fe ffa7 	bl	8002ef8 <tft_update>

			Reset_dat_init();
 8003faa:	f7ff ffa5 	bl	8003ef8 <Reset_dat_init>
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2b1e      	cmp	r3, #30
 8003fb2:	f200 8159 	bhi.w	8004268 <HAL_UART_RxCpltCallback+0x33c>
 8003fb6:	a201      	add	r2, pc, #4	; (adr r2, 8003fbc <HAL_UART_RxCpltCallback+0x90>)
 8003fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbc:	08004241 	.word	0x08004241
 8003fc0:	08004269 	.word	0x08004269
 8003fc4:	08004269 	.word	0x08004269
 8003fc8:	08004269 	.word	0x08004269
 8003fcc:	08004241 	.word	0x08004241
 8003fd0:	08004241 	.word	0x08004241
 8003fd4:	08004241 	.word	0x08004241
 8003fd8:	08004241 	.word	0x08004241
 8003fdc:	08004241 	.word	0x08004241
 8003fe0:	08004241 	.word	0x08004241
 8003fe4:	08004241 	.word	0x08004241
 8003fe8:	08004241 	.word	0x08004241
 8003fec:	08004241 	.word	0x08004241
 8003ff0:	08004269 	.word	0x08004269
 8003ff4:	08004241 	.word	0x08004241
 8003ff8:	08004269 	.word	0x08004269
 8003ffc:	08004269 	.word	0x08004269
 8004000:	08004269 	.word	0x08004269
 8004004:	08004269 	.word	0x08004269
 8004008:	08004269 	.word	0x08004269
 800400c:	08004039 	.word	0x08004039
 8004010:	0800409d 	.word	0x0800409d
 8004014:	08004069 	.word	0x08004069
 8004018:	080040d1 	.word	0x080040d1
 800401c:	08004109 	.word	0x08004109
 8004020:	08004161 	.word	0x08004161
 8004024:	08004135 	.word	0x08004135
 8004028:	08004191 	.word	0x08004191
 800402c:	080041d9 	.word	0x080041d9
 8004030:	08004269 	.word	0x08004269
 8004034:	0800420d 	.word	0x0800420d

			switch (value) {
			// Push button
				// Up
				case 20:
					*(target) = 1*velocity;
 8004038:	4b65      	ldr	r3, [pc, #404]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a65      	ldr	r2, [pc, #404]	; (80041d4 <HAL_UART_RxCpltCallback+0x2a8>)
 800403e:	6812      	ldr	r2, [r2, #0]
 8004040:	601a      	str	r2, [r3, #0]
					*(target+1) = 1*velocity;
 8004042:	4b63      	ldr	r3, [pc, #396]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	3304      	adds	r3, #4
 8004048:	4a62      	ldr	r2, [pc, #392]	; (80041d4 <HAL_UART_RxCpltCallback+0x2a8>)
 800404a:	6812      	ldr	r2, [r2, #0]
 800404c:	601a      	str	r2, [r3, #0]
					*(target+2) = 1*velocity;
 800404e:	4b60      	ldr	r3, [pc, #384]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	3308      	adds	r3, #8
 8004054:	4a5f      	ldr	r2, [pc, #380]	; (80041d4 <HAL_UART_RxCpltCallback+0x2a8>)
 8004056:	6812      	ldr	r2, [r2, #0]
 8004058:	601a      	str	r2, [r3, #0]
					*(target+3) = 1*velocity;
 800405a:	4b5d      	ldr	r3, [pc, #372]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	330c      	adds	r3, #12
 8004060:	4a5c      	ldr	r2, [pc, #368]	; (80041d4 <HAL_UART_RxCpltCallback+0x2a8>)
 8004062:	6812      	ldr	r2, [r2, #0]
 8004064:	601a      	str	r2, [r3, #0]
				break;
 8004066:	e100      	b.n	800426a <HAL_UART_RxCpltCallback+0x33e>

				// Right
				case 22:
					*(target) = 1*velocity;
 8004068:	4b59      	ldr	r3, [pc, #356]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a59      	ldr	r2, [pc, #356]	; (80041d4 <HAL_UART_RxCpltCallback+0x2a8>)
 800406e:	6812      	ldr	r2, [r2, #0]
 8004070:	601a      	str	r2, [r3, #0]
					*(target+1) = -1*velocity;
 8004072:	4b58      	ldr	r3, [pc, #352]	; (80041d4 <HAL_UART_RxCpltCallback+0x2a8>)
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	4b56      	ldr	r3, [pc, #344]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3304      	adds	r3, #4
 800407c:	4252      	negs	r2, r2
 800407e:	601a      	str	r2, [r3, #0]
					*(target+2) = 1*velocity;
 8004080:	4b53      	ldr	r3, [pc, #332]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3308      	adds	r3, #8
 8004086:	4a53      	ldr	r2, [pc, #332]	; (80041d4 <HAL_UART_RxCpltCallback+0x2a8>)
 8004088:	6812      	ldr	r2, [r2, #0]
 800408a:	601a      	str	r2, [r3, #0]
					*(target+3) = -1*velocity;
 800408c:	4b51      	ldr	r3, [pc, #324]	; (80041d4 <HAL_UART_RxCpltCallback+0x2a8>)
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	4b4f      	ldr	r3, [pc, #316]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	330c      	adds	r3, #12
 8004096:	4252      	negs	r2, r2
 8004098:	601a      	str	r2, [r3, #0]
				break;
 800409a:	e0e6      	b.n	800426a <HAL_UART_RxCpltCallback+0x33e>

				// Left
				case 21:
					*(target) = -1*velocity;
 800409c:	4b4d      	ldr	r3, [pc, #308]	; (80041d4 <HAL_UART_RxCpltCallback+0x2a8>)
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	4b4b      	ldr	r3, [pc, #300]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4252      	negs	r2, r2
 80040a6:	601a      	str	r2, [r3, #0]
					*(target+1) = 1*velocity;
 80040a8:	4b49      	ldr	r3, [pc, #292]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3304      	adds	r3, #4
 80040ae:	4a49      	ldr	r2, [pc, #292]	; (80041d4 <HAL_UART_RxCpltCallback+0x2a8>)
 80040b0:	6812      	ldr	r2, [r2, #0]
 80040b2:	601a      	str	r2, [r3, #0]
					*(target+2) = -1*velocity;
 80040b4:	4b47      	ldr	r3, [pc, #284]	; (80041d4 <HAL_UART_RxCpltCallback+0x2a8>)
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	4b45      	ldr	r3, [pc, #276]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3308      	adds	r3, #8
 80040be:	4252      	negs	r2, r2
 80040c0:	601a      	str	r2, [r3, #0]
					*(target+3) = 1*velocity;
 80040c2:	4b43      	ldr	r3, [pc, #268]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	330c      	adds	r3, #12
 80040c8:	4a42      	ldr	r2, [pc, #264]	; (80041d4 <HAL_UART_RxCpltCallback+0x2a8>)
 80040ca:	6812      	ldr	r2, [r2, #0]
 80040cc:	601a      	str	r2, [r3, #0]
				break;
 80040ce:	e0cc      	b.n	800426a <HAL_UART_RxCpltCallback+0x33e>

				// Down
				case 23:
					*(target) = -1*velocity;
 80040d0:	4b40      	ldr	r3, [pc, #256]	; (80041d4 <HAL_UART_RxCpltCallback+0x2a8>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	4b3e      	ldr	r3, [pc, #248]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4252      	negs	r2, r2
 80040da:	601a      	str	r2, [r3, #0]
					*(target+1) = -1*velocity;
 80040dc:	4b3d      	ldr	r3, [pc, #244]	; (80041d4 <HAL_UART_RxCpltCallback+0x2a8>)
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	4b3b      	ldr	r3, [pc, #236]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	3304      	adds	r3, #4
 80040e6:	4252      	negs	r2, r2
 80040e8:	601a      	str	r2, [r3, #0]
					*(target+2) = -1*velocity;
 80040ea:	4b3a      	ldr	r3, [pc, #232]	; (80041d4 <HAL_UART_RxCpltCallback+0x2a8>)
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	4b38      	ldr	r3, [pc, #224]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3308      	adds	r3, #8
 80040f4:	4252      	negs	r2, r2
 80040f6:	601a      	str	r2, [r3, #0]
					*(target+3) = -1*velocity;
 80040f8:	4b36      	ldr	r3, [pc, #216]	; (80041d4 <HAL_UART_RxCpltCallback+0x2a8>)
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	4b34      	ldr	r3, [pc, #208]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	330c      	adds	r3, #12
 8004102:	4252      	negs	r2, r2
 8004104:	601a      	str	r2, [r3, #0]
				break;
 8004106:	e0b0      	b.n	800426a <HAL_UART_RxCpltCallback+0x33e>

				// Diag-Up-right
				case 24:
					*(target) = 1*velocity;
 8004108:	4b31      	ldr	r3, [pc, #196]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a31      	ldr	r2, [pc, #196]	; (80041d4 <HAL_UART_RxCpltCallback+0x2a8>)
 800410e:	6812      	ldr	r2, [r2, #0]
 8004110:	601a      	str	r2, [r3, #0]
					*(target+1) = 0*velocity;
 8004112:	4b2f      	ldr	r3, [pc, #188]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	3304      	adds	r3, #4
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]
					*(target+2) = 1*velocity;
 800411c:	4b2c      	ldr	r3, [pc, #176]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3308      	adds	r3, #8
 8004122:	4a2c      	ldr	r2, [pc, #176]	; (80041d4 <HAL_UART_RxCpltCallback+0x2a8>)
 8004124:	6812      	ldr	r2, [r2, #0]
 8004126:	601a      	str	r2, [r3, #0]
					*(target+3) = 0*velocity;
 8004128:	4b29      	ldr	r3, [pc, #164]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	330c      	adds	r3, #12
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]
				break;
 8004132:	e09a      	b.n	800426a <HAL_UART_RxCpltCallback+0x33e>

				// Diag-Up-left
				case 26:
					*(target) = 0*velocity;
 8004134:	4b26      	ldr	r3, [pc, #152]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]
					*(target+1) = 1*velocity;
 800413c:	4b24      	ldr	r3, [pc, #144]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3304      	adds	r3, #4
 8004142:	4a24      	ldr	r2, [pc, #144]	; (80041d4 <HAL_UART_RxCpltCallback+0x2a8>)
 8004144:	6812      	ldr	r2, [r2, #0]
 8004146:	601a      	str	r2, [r3, #0]
					*(target+2) = 0*velocity;
 8004148:	4b21      	ldr	r3, [pc, #132]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3308      	adds	r3, #8
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]
					*(target+3) = 1*velocity;
 8004152:	4b1f      	ldr	r3, [pc, #124]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	330c      	adds	r3, #12
 8004158:	4a1e      	ldr	r2, [pc, #120]	; (80041d4 <HAL_UART_RxCpltCallback+0x2a8>)
 800415a:	6812      	ldr	r2, [r2, #0]
 800415c:	601a      	str	r2, [r3, #0]
				break;
 800415e:	e084      	b.n	800426a <HAL_UART_RxCpltCallback+0x33e>

				// Diag-Down-right
				case 25:
					*(target) = -1*velocity;
 8004160:	4b1c      	ldr	r3, [pc, #112]	; (80041d4 <HAL_UART_RxCpltCallback+0x2a8>)
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	4b1a      	ldr	r3, [pc, #104]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4252      	negs	r2, r2
 800416a:	601a      	str	r2, [r3, #0]
					*(target+1) = 0*velocity;
 800416c:	4b18      	ldr	r3, [pc, #96]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3304      	adds	r3, #4
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
					*(target+2) = -1*velocity;
 8004176:	4b17      	ldr	r3, [pc, #92]	; (80041d4 <HAL_UART_RxCpltCallback+0x2a8>)
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	4b15      	ldr	r3, [pc, #84]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3308      	adds	r3, #8
 8004180:	4252      	negs	r2, r2
 8004182:	601a      	str	r2, [r3, #0]
					*(target+3) = 0*velocity;
 8004184:	4b12      	ldr	r3, [pc, #72]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	330c      	adds	r3, #12
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]
				break;
 800418e:	e06c      	b.n	800426a <HAL_UART_RxCpltCallback+0x33e>

				// Diag-Down-left
				case 27:
					*(target) = 0*velocity;
 8004190:	4b0f      	ldr	r3, [pc, #60]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
					*(target+1) = -1*velocity;
 8004198:	4b0e      	ldr	r3, [pc, #56]	; (80041d4 <HAL_UART_RxCpltCallback+0x2a8>)
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	4b0c      	ldr	r3, [pc, #48]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3304      	adds	r3, #4
 80041a2:	4252      	negs	r2, r2
 80041a4:	601a      	str	r2, [r3, #0]
					*(target+2) = 0*velocity;
 80041a6:	4b0a      	ldr	r3, [pc, #40]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	3308      	adds	r3, #8
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
					*(target+3) = -1*velocity;
 80041b0:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <HAL_UART_RxCpltCallback+0x2a8>)
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <HAL_UART_RxCpltCallback+0x2a4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	330c      	adds	r3, #12
 80041ba:	4252      	negs	r2, r2
 80041bc:	601a      	str	r2, [r3, #0]
				break;
 80041be:	e054      	b.n	800426a <HAL_UART_RxCpltCallback+0x33e>
 80041c0:	2000d8f0 	.word	0x2000d8f0
 80041c4:	40020400 	.word	0x40020400
 80041c8:	080094dc 	.word	0x080094dc
 80041cc:	080094e8 	.word	0x080094e8
 80041d0:	2000d8fc 	.word	0x2000d8fc
 80041d4:	2000006c 	.word	0x2000006c

				// Rotate Right
				case 28:
					*(target) = 1*velocity;
 80041d8:	4b2c      	ldr	r3, [pc, #176]	; (800428c <HAL_UART_RxCpltCallback+0x360>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a2c      	ldr	r2, [pc, #176]	; (8004290 <HAL_UART_RxCpltCallback+0x364>)
 80041de:	6812      	ldr	r2, [r2, #0]
 80041e0:	601a      	str	r2, [r3, #0]
					*(target+1) = -1*velocity;
 80041e2:	4b2b      	ldr	r3, [pc, #172]	; (8004290 <HAL_UART_RxCpltCallback+0x364>)
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	4b29      	ldr	r3, [pc, #164]	; (800428c <HAL_UART_RxCpltCallback+0x360>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3304      	adds	r3, #4
 80041ec:	4252      	negs	r2, r2
 80041ee:	601a      	str	r2, [r3, #0]
					*(target+2) = 1*velocity;
 80041f0:	4b26      	ldr	r3, [pc, #152]	; (800428c <HAL_UART_RxCpltCallback+0x360>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3308      	adds	r3, #8
 80041f6:	4a26      	ldr	r2, [pc, #152]	; (8004290 <HAL_UART_RxCpltCallback+0x364>)
 80041f8:	6812      	ldr	r2, [r2, #0]
 80041fa:	601a      	str	r2, [r3, #0]
					*(target+3) = -1*velocity;
 80041fc:	4b24      	ldr	r3, [pc, #144]	; (8004290 <HAL_UART_RxCpltCallback+0x364>)
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	4b22      	ldr	r3, [pc, #136]	; (800428c <HAL_UART_RxCpltCallback+0x360>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	330c      	adds	r3, #12
 8004206:	4252      	negs	r2, r2
 8004208:	601a      	str	r2, [r3, #0]
				break;
 800420a:	e02e      	b.n	800426a <HAL_UART_RxCpltCallback+0x33e>

				// Rotate Left
				case 30:
					*(target) = -1*velocity;
 800420c:	4b20      	ldr	r3, [pc, #128]	; (8004290 <HAL_UART_RxCpltCallback+0x364>)
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	4b1e      	ldr	r3, [pc, #120]	; (800428c <HAL_UART_RxCpltCallback+0x360>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4252      	negs	r2, r2
 8004216:	601a      	str	r2, [r3, #0]
					*(target+1) = 1*velocity;
 8004218:	4b1c      	ldr	r3, [pc, #112]	; (800428c <HAL_UART_RxCpltCallback+0x360>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	3304      	adds	r3, #4
 800421e:	4a1c      	ldr	r2, [pc, #112]	; (8004290 <HAL_UART_RxCpltCallback+0x364>)
 8004220:	6812      	ldr	r2, [r2, #0]
 8004222:	601a      	str	r2, [r3, #0]
					*(target+2) = -1*velocity;
 8004224:	4b1a      	ldr	r3, [pc, #104]	; (8004290 <HAL_UART_RxCpltCallback+0x364>)
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	4b18      	ldr	r3, [pc, #96]	; (800428c <HAL_UART_RxCpltCallback+0x360>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3308      	adds	r3, #8
 800422e:	4252      	negs	r2, r2
 8004230:	601a      	str	r2, [r3, #0]
					*(target+3) = 1*velocity;
 8004232:	4b16      	ldr	r3, [pc, #88]	; (800428c <HAL_UART_RxCpltCallback+0x360>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	330c      	adds	r3, #12
 8004238:	4a15      	ldr	r2, [pc, #84]	; (8004290 <HAL_UART_RxCpltCallback+0x364>)
 800423a:	6812      	ldr	r2, [r2, #0]
 800423c:	601a      	str	r2, [r3, #0]
				break;
 800423e:	e014      	b.n	800426a <HAL_UART_RxCpltCallback+0x33e>
				case 12:
				// Rotate Left
				case 14:
				// stop
				case 0:
					*(target) = 0;
 8004240:	4b12      	ldr	r3, [pc, #72]	; (800428c <HAL_UART_RxCpltCallback+0x360>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]
					*(target+1) = 0;
 8004248:	4b10      	ldr	r3, [pc, #64]	; (800428c <HAL_UART_RxCpltCallback+0x360>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3304      	adds	r3, #4
 800424e:	2200      	movs	r2, #0
 8004250:	601a      	str	r2, [r3, #0]
					*(target+2) = 0;
 8004252:	4b0e      	ldr	r3, [pc, #56]	; (800428c <HAL_UART_RxCpltCallback+0x360>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3308      	adds	r3, #8
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
					*(target+3) = 0;
 800425c:	4b0b      	ldr	r3, [pc, #44]	; (800428c <HAL_UART_RxCpltCallback+0x360>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	330c      	adds	r3, #12
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]

				break;
 8004266:	e000      	b.n	800426a <HAL_UART_RxCpltCallback+0x33e>

				default:

				break;
 8004268:	bf00      	nop

			}
			return;
 800426a:	e00c      	b.n	8004286 <HAL_UART_RxCpltCallback+0x35a>
		break;
		
		case 's':
			velocity = (velocity == 300)? 1000:300;
 800426c:	4b08      	ldr	r3, [pc, #32]	; (8004290 <HAL_UART_RxCpltCallback+0x364>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004274:	d102      	bne.n	800427c <HAL_UART_RxCpltCallback+0x350>
 8004276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800427a:	e001      	b.n	8004280 <HAL_UART_RxCpltCallback+0x354>
 800427c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004280:	4a03      	ldr	r2, [pc, #12]	; (8004290 <HAL_UART_RxCpltCallback+0x364>)
 8004282:	6013      	str	r3, [r2, #0]
			return;
 8004284:	bf00      	nop
		break;
	}
}
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	2000d8fc 	.word	0x2000d8fc
 8004290:	2000006c 	.word	0x2000006c

08004294 <ReceiveData>:


/* USER CODE BEGIN 1 */
void ReceiveData(int tar_vel[4]) {
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
	target = tar_vel;
 800429c:	4a05      	ldr	r2, [pc, #20]	; (80042b4 <ReceiveData+0x20>)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&dat, sizeof(char) * 5);
 80042a2:	2205      	movs	r2, #5
 80042a4:	4904      	ldr	r1, [pc, #16]	; (80042b8 <ReceiveData+0x24>)
 80042a6:	4805      	ldr	r0, [pc, #20]	; (80042bc <ReceiveData+0x28>)
 80042a8:	f003 ffb3 	bl	8008212 <HAL_UART_Receive_IT>
	return;
 80042ac:	bf00      	nop
}
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	2000d8fc 	.word	0x2000d8fc
 80042b8:	2000d8f0 	.word	0x2000d8f0
 80042bc:	2000d900 	.word	0x2000d900

080042c0 <SendData>:

void SendData(const Motor motorchoice[4]) {
 80042c0:	b5b0      	push	{r4, r5, r7, lr}
 80042c2:	b0ac      	sub	sp, #176	; 0xb0
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
	static uint32_t last_Send_Time = 0;
	if (HAL_GetTick() - last_Send_Time > 1000) {
 80042c8:	f000 f9a8 	bl	800461c <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	4b88      	ldr	r3, [pc, #544]	; (80044f0 <SendData+0x230>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042d8:	f240 80ff 	bls.w	80044da <SendData+0x21a>
		double avg_M1 = averagespeed(motorchoice[0]);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fd faff 	bl	80018e4 <averagespeed>
 80042e6:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
		double avg_M2 = averagespeed(motorchoice[1]);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	3301      	adds	r3, #1
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7fd faf7 	bl	80018e4 <averagespeed>
 80042f6:	ed87 0b24 	vstr	d0, [r7, #144]	; 0x90
		double avg_M3 = averagespeed(motorchoice[2]);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	3302      	adds	r3, #2
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f7fd faef 	bl	80018e4 <averagespeed>
 8004306:	ed87 0b22 	vstr	d0, [r7, #136]	; 0x88
		double avg_M4 = averagespeed(motorchoice[3]);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	3303      	adds	r3, #3
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f7fd fae7 	bl	80018e4 <averagespeed>
 8004316:	ed87 0b20 	vstr	d0, [r7, #128]	; 0x80

		double ver = (avg_M1+avg_M2+avg_M3+avg_M4) * 0.7071;
 800431a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800431e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004322:	f7fb ff57 	bl	80001d4 <__adddf3>
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	4610      	mov	r0, r2
 800432c:	4619      	mov	r1, r3
 800432e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004332:	f7fb ff4f 	bl	80001d4 <__adddf3>
 8004336:	4602      	mov	r2, r0
 8004338:	460b      	mov	r3, r1
 800433a:	4610      	mov	r0, r2
 800433c:	4619      	mov	r1, r3
 800433e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004342:	f7fb ff47 	bl	80001d4 <__adddf3>
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	4610      	mov	r0, r2
 800434c:	4619      	mov	r1, r3
 800434e:	a366      	add	r3, pc, #408	; (adr r3, 80044e8 <SendData+0x228>)
 8004350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004354:	f7fc f8f4 	bl	8000540 <__aeabi_dmul>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		double hor = (avg_M1+avg_M3-avg_M2-avg_M4) * 0.7071;
 8004360:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004364:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004368:	f7fb ff34 	bl	80001d4 <__adddf3>
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	4610      	mov	r0, r2
 8004372:	4619      	mov	r1, r3
 8004374:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004378:	f7fb ff2a 	bl	80001d0 <__aeabi_dsub>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4610      	mov	r0, r2
 8004382:	4619      	mov	r1, r3
 8004384:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004388:	f7fb ff22 	bl	80001d0 <__aeabi_dsub>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	4610      	mov	r0, r2
 8004392:	4619      	mov	r1, r3
 8004394:	a354      	add	r3, pc, #336	; (adr r3, 80044e8 <SendData+0x228>)
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	f7fc f8d1 	bl	8000540 <__aeabi_dmul>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

		uint32_t value = ver*ver + hor*hor;
 80043a6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80043aa:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80043ae:	f7fc f8c7 	bl	8000540 <__aeabi_dmul>
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	4614      	mov	r4, r2
 80043b8:	461d      	mov	r5, r3
 80043ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80043be:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80043c2:	f7fc f8bd 	bl	8000540 <__aeabi_dmul>
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	4620      	mov	r0, r4
 80043cc:	4629      	mov	r1, r5
 80043ce:	f7fb ff01 	bl	80001d4 <__adddf3>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4610      	mov	r0, r2
 80043d8:	4619      	mov	r1, r3
 80043da:	f7fc fb89 	bl	8000af0 <__aeabi_d2uiz>
 80043de:	4603      	mov	r3, r0
 80043e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		value = (uint32_t) sqrt(value);
 80043e4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80043e8:	f7fc f830 	bl	800044c <__aeabi_ui2d>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	ec43 2b10 	vmov	d0, r2, r3
 80043f4:	f004 fee6 	bl	80091c4 <sqrt>
 80043f8:	ec53 2b10 	vmov	r2, r3, d0
 80043fc:	4610      	mov	r0, r2
 80043fe:	4619      	mov	r1, r3
 8004400:	f7fc fb76 	bl	8000af0 <__aeabi_d2uiz>
 8004404:	4603      	mov	r3, r0
 8004406:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		char tempdat[50];
		char dat_send[50];
		int i = 0;
 800440a:	2300      	movs	r3, #0
 800440c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		for (; i < 50; i++) {
 8004410:	e025      	b.n	800445e <SendData+0x19e>
			tempdat[i] = value%10 + '0';
 8004412:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8004416:	4b37      	ldr	r3, [pc, #220]	; (80044f4 <SendData+0x234>)
 8004418:	fba3 2301 	umull	r2, r3, r3, r1
 800441c:	08da      	lsrs	r2, r3, #3
 800441e:	4613      	mov	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	1aca      	subs	r2, r1, r3
 8004428:	b2d3      	uxtb	r3, r2
 800442a:	3330      	adds	r3, #48	; 0x30
 800442c:	b2d9      	uxtb	r1, r3
 800442e:	f107 0208 	add.w	r2, r7, #8
 8004432:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004436:	4413      	add	r3, r2
 8004438:	460a      	mov	r2, r1
 800443a:	701a      	strb	r2, [r3, #0]
			value /= 10;
 800443c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004440:	4a2c      	ldr	r2, [pc, #176]	; (80044f4 <SendData+0x234>)
 8004442:	fba2 2303 	umull	r2, r3, r2, r3
 8004446:	08db      	lsrs	r3, r3, #3
 8004448:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			if (value == 0) break;
 800444c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004450:	2b00      	cmp	r3, #0
 8004452:	d009      	beq.n	8004468 <SendData+0x1a8>
		for (; i < 50; i++) {
 8004454:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004458:	3301      	adds	r3, #1
 800445a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800445e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004462:	2b31      	cmp	r3, #49	; 0x31
 8004464:	ddd5      	ble.n	8004412 <SendData+0x152>
 8004466:	e000      	b.n	800446a <SendData+0x1aa>
			if (value == 0) break;
 8004468:	bf00      	nop
		}

		dat_send[i+1] = '\0';
 800446a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800446e:	3301      	adds	r3, #1
 8004470:	33b0      	adds	r3, #176	; 0xb0
 8004472:	443b      	add	r3, r7
 8004474:	2200      	movs	r2, #0
 8004476:	f803 2c74 	strb.w	r2, [r3, #-116]
		for (int k = 0; k <= i ; k++) {
 800447a:	2300      	movs	r3, #0
 800447c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004480:	e014      	b.n	80044ac <SendData+0x1ec>
			dat_send[k] = tempdat[i-k];
 8004482:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004486:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	33b0      	adds	r3, #176	; 0xb0
 800448e:	443b      	add	r3, r7
 8004490:	f813 1ca8 	ldrb.w	r1, [r3, #-168]
 8004494:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004498:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800449c:	4413      	add	r3, r2
 800449e:	460a      	mov	r2, r1
 80044a0:	701a      	strb	r2, [r3, #0]
		for (int k = 0; k <= i ; k++) {
 80044a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80044a6:	3301      	adds	r3, #1
 80044a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80044ac:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80044b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044b4:	429a      	cmp	r2, r3
 80044b6:	dde4      	ble.n	8004482 <SendData+0x1c2>
		}
//		tft_prints(0, 5, "%s  ", dat_send);
//		tft_update(100);
		last_Send_Time = HAL_GetTick();
 80044b8:	f000 f8b0 	bl	800461c <HAL_GetTick>
 80044bc:	4603      	mov	r3, r0
 80044be:	4a0c      	ldr	r2, [pc, #48]	; (80044f0 <SendData+0x230>)
 80044c0:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)&dat_send, sizeof(char)*(i+1), 100);
 80044c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	3301      	adds	r3, #1
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80044d0:	2364      	movs	r3, #100	; 0x64
 80044d2:	4809      	ldr	r0, [pc, #36]	; (80044f8 <SendData+0x238>)
 80044d4:	f003 fe0b 	bl	80080ee <HAL_UART_Transmit>
	}
	return;
 80044d8:	bf00      	nop
 80044da:	bf00      	nop
}
 80044dc:	37b0      	adds	r7, #176	; 0xb0
 80044de:	46bd      	mov	sp, r7
 80044e0:	bdb0      	pop	{r4, r5, r7, pc}
 80044e2:	bf00      	nop
 80044e4:	f3af 8000 	nop.w
 80044e8:	2de00d1b 	.word	0x2de00d1b
 80044ec:	3fe6a090 	.word	0x3fe6a090
 80044f0:	2000d988 	.word	0x2000d988
 80044f4:	cccccccd 	.word	0xcccccccd
 80044f8:	2000d900 	.word	0x2000d900

080044fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80044fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004534 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004500:	480d      	ldr	r0, [pc, #52]	; (8004538 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004502:	490e      	ldr	r1, [pc, #56]	; (800453c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004504:	4a0e      	ldr	r2, [pc, #56]	; (8004540 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004508:	e002      	b.n	8004510 <LoopCopyDataInit>

0800450a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800450a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800450c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800450e:	3304      	adds	r3, #4

08004510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004514:	d3f9      	bcc.n	800450a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004516:	4a0b      	ldr	r2, [pc, #44]	; (8004544 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004518:	4c0b      	ldr	r4, [pc, #44]	; (8004548 <LoopFillZerobss+0x26>)
  movs r3, #0
 800451a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800451c:	e001      	b.n	8004522 <LoopFillZerobss>

0800451e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800451e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004520:	3204      	adds	r2, #4

08004522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004524:	d3fb      	bcc.n	800451e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004526:	f7ff fb05 	bl	8003b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800452a:	f004 fe11 	bl	8009150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800452e:	f7fe fe3b 	bl	80031a8 <main>
  bx  lr    
 8004532:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004534:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800453c:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8004540:	0800a39c 	.word	0x0800a39c
  ldr r2, =_sbss
 8004544:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8004548:	2000d990 	.word	0x2000d990

0800454c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800454c:	e7fe      	b.n	800454c <ADC_IRQHandler>
	...

08004550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004554:	4b0e      	ldr	r3, [pc, #56]	; (8004590 <HAL_Init+0x40>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a0d      	ldr	r2, [pc, #52]	; (8004590 <HAL_Init+0x40>)
 800455a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800455e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004560:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <HAL_Init+0x40>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a0a      	ldr	r2, [pc, #40]	; (8004590 <HAL_Init+0x40>)
 8004566:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800456a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800456c:	4b08      	ldr	r3, [pc, #32]	; (8004590 <HAL_Init+0x40>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a07      	ldr	r2, [pc, #28]	; (8004590 <HAL_Init+0x40>)
 8004572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004576:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004578:	2003      	movs	r0, #3
 800457a:	f000 fda7 	bl	80050cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800457e:	200f      	movs	r0, #15
 8004580:	f000 f808 	bl	8004594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004584:	f7ff fa4a 	bl	8003a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	40023c00 	.word	0x40023c00

08004594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800459c:	4b12      	ldr	r3, [pc, #72]	; (80045e8 <HAL_InitTick+0x54>)
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	4b12      	ldr	r3, [pc, #72]	; (80045ec <HAL_InitTick+0x58>)
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	4619      	mov	r1, r3
 80045a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80045ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 fdbf 	bl	8005136 <HAL_SYSTICK_Config>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e00e      	b.n	80045e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b0f      	cmp	r3, #15
 80045c6:	d80a      	bhi.n	80045de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045c8:	2200      	movs	r2, #0
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	f04f 30ff 	mov.w	r0, #4294967295
 80045d0:	f000 fd87 	bl	80050e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045d4:	4a06      	ldr	r2, [pc, #24]	; (80045f0 <HAL_InitTick+0x5c>)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	e000      	b.n	80045e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	20000068 	.word	0x20000068
 80045ec:	20000074 	.word	0x20000074
 80045f0:	20000070 	.word	0x20000070

080045f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045f8:	4b06      	ldr	r3, [pc, #24]	; (8004614 <HAL_IncTick+0x20>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	461a      	mov	r2, r3
 80045fe:	4b06      	ldr	r3, [pc, #24]	; (8004618 <HAL_IncTick+0x24>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4413      	add	r3, r2
 8004604:	4a04      	ldr	r2, [pc, #16]	; (8004618 <HAL_IncTick+0x24>)
 8004606:	6013      	str	r3, [r2, #0]
}
 8004608:	bf00      	nop
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	20000074 	.word	0x20000074
 8004618:	2000d98c 	.word	0x2000d98c

0800461c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  return uwTick;
 8004620:	4b03      	ldr	r3, [pc, #12]	; (8004630 <HAL_GetTick+0x14>)
 8004622:	681b      	ldr	r3, [r3, #0]
}
 8004624:	4618      	mov	r0, r3
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	2000d98c 	.word	0x2000d98c

08004634 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800463c:	f7ff ffee 	bl	800461c <HAL_GetTick>
 8004640:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464c:	d005      	beq.n	800465a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800464e:	4b0a      	ldr	r3, [pc, #40]	; (8004678 <HAL_Delay+0x44>)
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	461a      	mov	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4413      	add	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800465a:	bf00      	nop
 800465c:	f7ff ffde 	bl	800461c <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	429a      	cmp	r2, r3
 800466a:	d8f7      	bhi.n	800465c <HAL_Delay+0x28>
  {
  }
}
 800466c:	bf00      	nop
 800466e:	bf00      	nop
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	20000074 	.word	0x20000074

0800467c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e0ed      	b.n	800486a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d102      	bne.n	80046a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fc fc86 	bl	8000fac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0201 	orr.w	r2, r2, #1
 80046ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046b0:	f7ff ffb4 	bl	800461c <HAL_GetTick>
 80046b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80046b6:	e012      	b.n	80046de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80046b8:	f7ff ffb0 	bl	800461c <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b0a      	cmp	r3, #10
 80046c4:	d90b      	bls.n	80046de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2205      	movs	r2, #5
 80046d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e0c5      	b.n	800486a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0e5      	beq.n	80046b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0202 	bic.w	r2, r2, #2
 80046fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046fc:	f7ff ff8e 	bl	800461c <HAL_GetTick>
 8004700:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004702:	e012      	b.n	800472a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004704:	f7ff ff8a 	bl	800461c <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b0a      	cmp	r3, #10
 8004710:	d90b      	bls.n	800472a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2205      	movs	r2, #5
 8004722:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e09f      	b.n	800486a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1e5      	bne.n	8004704 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	7e1b      	ldrb	r3, [r3, #24]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d108      	bne.n	8004752 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	e007      	b.n	8004762 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004760:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	7e5b      	ldrb	r3, [r3, #25]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d108      	bne.n	800477c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	e007      	b.n	800478c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800478a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	7e9b      	ldrb	r3, [r3, #26]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d108      	bne.n	80047a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0220 	orr.w	r2, r2, #32
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	e007      	b.n	80047b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 0220 	bic.w	r2, r2, #32
 80047b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	7edb      	ldrb	r3, [r3, #27]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d108      	bne.n	80047d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0210 	bic.w	r2, r2, #16
 80047cc:	601a      	str	r2, [r3, #0]
 80047ce:	e007      	b.n	80047e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0210 	orr.w	r2, r2, #16
 80047de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	7f1b      	ldrb	r3, [r3, #28]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d108      	bne.n	80047fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0208 	orr.w	r2, r2, #8
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	e007      	b.n	800480a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0208 	bic.w	r2, r2, #8
 8004808:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	7f5b      	ldrb	r3, [r3, #29]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d108      	bne.n	8004824 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f042 0204 	orr.w	r2, r2, #4
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	e007      	b.n	8004834 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0204 	bic.w	r2, r2, #4
 8004832:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	431a      	orrs	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	ea42 0103 	orr.w	r1, r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	1e5a      	subs	r2, r3, #1
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
	...

08004874 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3020 	ldrb.w	r3, [r3, #32]
 800488a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800488c:	7cfb      	ldrb	r3, [r7, #19]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d003      	beq.n	800489a <HAL_CAN_ConfigFilter+0x26>
 8004892:	7cfb      	ldrb	r3, [r7, #19]
 8004894:	2b02      	cmp	r3, #2
 8004896:	f040 80be 	bne.w	8004a16 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800489a:	4b65      	ldr	r3, [pc, #404]	; (8004a30 <HAL_CAN_ConfigFilter+0x1bc>)
 800489c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80048a4:	f043 0201 	orr.w	r2, r3, #1
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80048b4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	021b      	lsls	r3, r3, #8
 80048ca:	431a      	orrs	r2, r3
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	f003 031f 	and.w	r3, r3, #31
 80048da:	2201      	movs	r2, #1
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	43db      	mvns	r3, r3
 80048ec:	401a      	ands	r2, r3
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d123      	bne.n	8004944 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	43db      	mvns	r3, r3
 8004906:	401a      	ands	r2, r3
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800491e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	3248      	adds	r2, #72	; 0x48
 8004924:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004938:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800493a:	6979      	ldr	r1, [r7, #20]
 800493c:	3348      	adds	r3, #72	; 0x48
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	440b      	add	r3, r1
 8004942:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d122      	bne.n	8004992 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	431a      	orrs	r2, r3
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800496c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	3248      	adds	r2, #72	; 0x48
 8004972:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004986:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004988:	6979      	ldr	r1, [r7, #20]
 800498a:	3348      	adds	r3, #72	; 0x48
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	440b      	add	r3, r1
 8004990:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d109      	bne.n	80049ae <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	43db      	mvns	r3, r3
 80049a4:	401a      	ands	r2, r3
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80049ac:	e007      	b.n	80049be <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	431a      	orrs	r2, r3
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d109      	bne.n	80049da <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	43db      	mvns	r3, r3
 80049d0:	401a      	ands	r2, r3
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80049d8:	e007      	b.n	80049ea <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	431a      	orrs	r2, r3
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d107      	bne.n	8004a02 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a08:	f023 0201 	bic.w	r2, r3, #1
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	e006      	b.n	8004a24 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
  }
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	371c      	adds	r7, #28
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr
 8004a30:	40006400 	.word	0x40006400

08004a34 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d12e      	bne.n	8004aa6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0201 	bic.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a60:	f7ff fddc 	bl	800461c <HAL_GetTick>
 8004a64:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004a66:	e012      	b.n	8004a8e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004a68:	f7ff fdd8 	bl	800461c <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b0a      	cmp	r3, #10
 8004a74:	d90b      	bls.n	8004a8e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2205      	movs	r2, #5
 8004a86:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e012      	b.n	8004ab4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1e5      	bne.n	8004a68 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	e006      	b.n	8004ab4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
  }
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b089      	sub	sp, #36	; 0x24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ad0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004ada:	7ffb      	ldrb	r3, [r7, #31]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d003      	beq.n	8004ae8 <HAL_CAN_AddTxMessage+0x2c>
 8004ae0:	7ffb      	ldrb	r3, [r7, #31]
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	f040 80b8 	bne.w	8004c58 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10a      	bne.n	8004b08 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d105      	bne.n	8004b08 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 80a0 	beq.w	8004c48 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	0e1b      	lsrs	r3, r3, #24
 8004b0c:	f003 0303 	and.w	r3, r3, #3
 8004b10:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d907      	bls.n	8004b28 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e09e      	b.n	8004c66 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004b28:	2201      	movs	r2, #1
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	409a      	lsls	r2, r3
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10d      	bne.n	8004b56 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004b44:	68f9      	ldr	r1, [r7, #12]
 8004b46:	6809      	ldr	r1, [r1, #0]
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	3318      	adds	r3, #24
 8004b4e:	011b      	lsls	r3, r3, #4
 8004b50:	440b      	add	r3, r1
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	e00f      	b.n	8004b76 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b60:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b66:	68f9      	ldr	r1, [r7, #12]
 8004b68:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004b6a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	3318      	adds	r3, #24
 8004b70:	011b      	lsls	r3, r3, #4
 8004b72:	440b      	add	r3, r1
 8004b74:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6819      	ldr	r1, [r3, #0]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	691a      	ldr	r2, [r3, #16]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	3318      	adds	r3, #24
 8004b82:	011b      	lsls	r3, r3, #4
 8004b84:	440b      	add	r3, r1
 8004b86:	3304      	adds	r3, #4
 8004b88:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	7d1b      	ldrb	r3, [r3, #20]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d111      	bne.n	8004bb6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	3318      	adds	r3, #24
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	4413      	add	r3, r2
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	6811      	ldr	r1, [r2, #0]
 8004ba6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	3318      	adds	r3, #24
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	440b      	add	r3, r1
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	3307      	adds	r3, #7
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	061a      	lsls	r2, r3, #24
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3306      	adds	r3, #6
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	041b      	lsls	r3, r3, #16
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3305      	adds	r3, #5
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	021b      	lsls	r3, r3, #8
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	3204      	adds	r2, #4
 8004bd6:	7812      	ldrb	r2, [r2, #0]
 8004bd8:	4610      	mov	r0, r2
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	6811      	ldr	r1, [r2, #0]
 8004bde:	ea43 0200 	orr.w	r2, r3, r0
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	440b      	add	r3, r1
 8004be8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004bec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	3303      	adds	r3, #3
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	061a      	lsls	r2, r3, #24
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	3302      	adds	r3, #2
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	041b      	lsls	r3, r3, #16
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3301      	adds	r3, #1
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	021b      	lsls	r3, r3, #8
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	7812      	ldrb	r2, [r2, #0]
 8004c0e:	4610      	mov	r0, r2
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	6811      	ldr	r1, [r2, #0]
 8004c14:	ea43 0200 	orr.w	r2, r3, r0
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	440b      	add	r3, r1
 8004c1e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004c22:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	3318      	adds	r3, #24
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	4413      	add	r3, r2
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	6811      	ldr	r1, [r2, #0]
 8004c36:	f043 0201 	orr.w	r2, r3, #1
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	3318      	adds	r3, #24
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	440b      	add	r3, r1
 8004c42:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004c44:	2300      	movs	r3, #0
 8004c46:	e00e      	b.n	8004c66 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e006      	b.n	8004c66 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
  }
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3724      	adds	r7, #36	; 0x24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b085      	sub	sp, #20
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c86:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8004c88:	7afb      	ldrb	r3, [r7, #11]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d002      	beq.n	8004c94 <HAL_CAN_IsTxMessagePending+0x22>
 8004c8e:	7afb      	ldrb	r3, [r7, #11]
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d10b      	bne.n	8004cac <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	069b      	lsls	r3, r3, #26
 8004c9e:	401a      	ands	r2, r3
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	069b      	lsls	r3, r3, #26
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d001      	beq.n	8004cac <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8004cac:	68fb      	ldr	r3, [r7, #12]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b087      	sub	sp, #28
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	60f8      	str	r0, [r7, #12]
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	607a      	str	r2, [r7, #4]
 8004cc6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cce:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004cd0:	7dfb      	ldrb	r3, [r7, #23]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d003      	beq.n	8004cde <HAL_CAN_GetRxMessage+0x24>
 8004cd6:	7dfb      	ldrb	r3, [r7, #23]
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	f040 80f3 	bne.w	8004ec4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10e      	bne.n	8004d02 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d116      	bne.n	8004d20 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e0e7      	b.n	8004ed2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	f003 0303 	and.w	r3, r3, #3
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d107      	bne.n	8004d20 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e0d8      	b.n	8004ed2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	331b      	adds	r3, #27
 8004d28:	011b      	lsls	r3, r3, #4
 8004d2a:	4413      	add	r3, r2
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0204 	and.w	r2, r3, #4
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10c      	bne.n	8004d58 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	331b      	adds	r3, #27
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	4413      	add	r3, r2
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	0d5b      	lsrs	r3, r3, #21
 8004d4e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	e00b      	b.n	8004d70 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	331b      	adds	r3, #27
 8004d60:	011b      	lsls	r3, r3, #4
 8004d62:	4413      	add	r3, r2
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	08db      	lsrs	r3, r3, #3
 8004d68:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	331b      	adds	r3, #27
 8004d78:	011b      	lsls	r3, r3, #4
 8004d7a:	4413      	add	r3, r2
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0202 	and.w	r2, r3, #2
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	331b      	adds	r3, #27
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	4413      	add	r3, r2
 8004d92:	3304      	adds	r3, #4
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 020f 	and.w	r2, r3, #15
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	331b      	adds	r3, #27
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	4413      	add	r3, r2
 8004daa:	3304      	adds	r3, #4
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	0a1b      	lsrs	r3, r3, #8
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	331b      	adds	r3, #27
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	4413      	add	r3, r2
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	0c1b      	lsrs	r3, r3, #16
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	011b      	lsls	r3, r3, #4
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	0a1a      	lsrs	r2, r3, #8
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	b2d2      	uxtb	r2, r2
 8004dfc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	011b      	lsls	r3, r3, #4
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	0c1a      	lsrs	r2, r3, #16
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	3302      	adds	r3, #2
 8004e14:	b2d2      	uxtb	r2, r2
 8004e16:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	0e1a      	lsrs	r2, r3, #24
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	3303      	adds	r3, #3
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	3304      	adds	r3, #4
 8004e46:	b2d2      	uxtb	r2, r2
 8004e48:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	011b      	lsls	r3, r3, #4
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	0a1a      	lsrs	r2, r3, #8
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	3305      	adds	r3, #5
 8004e60:	b2d2      	uxtb	r2, r2
 8004e62:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	011b      	lsls	r3, r3, #4
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	0c1a      	lsrs	r2, r3, #16
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	3306      	adds	r3, #6
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	011b      	lsls	r3, r3, #4
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	0e1a      	lsrs	r2, r3, #24
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	3307      	adds	r3, #7
 8004e94:	b2d2      	uxtb	r2, r2
 8004e96:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d108      	bne.n	8004eb0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68da      	ldr	r2, [r3, #12]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f042 0220 	orr.w	r2, r2, #32
 8004eac:	60da      	str	r2, [r3, #12]
 8004eae:	e007      	b.n	8004ec0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	691a      	ldr	r2, [r3, #16]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 0220 	orr.w	r2, r2, #32
 8004ebe:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	e006      	b.n	8004ed2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
  }
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	371c      	adds	r7, #28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b085      	sub	sp, #20
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004eee:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d002      	beq.n	8004efc <HAL_CAN_ActivateNotification+0x1e>
 8004ef6:	7bfb      	ldrb	r3, [r7, #15]
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d109      	bne.n	8004f10 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6959      	ldr	r1, [r3, #20]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	e006      	b.n	8004f1e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
  }
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
	...

08004f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f003 0307 	and.w	r3, r3, #7
 8004f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f3c:	4b0c      	ldr	r3, [pc, #48]	; (8004f70 <__NVIC_SetPriorityGrouping+0x44>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f48:	4013      	ands	r3, r2
 8004f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f5e:	4a04      	ldr	r2, [pc, #16]	; (8004f70 <__NVIC_SetPriorityGrouping+0x44>)
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	60d3      	str	r3, [r2, #12]
}
 8004f64:	bf00      	nop
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	e000ed00 	.word	0xe000ed00

08004f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f74:	b480      	push	{r7}
 8004f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f78:	4b04      	ldr	r3, [pc, #16]	; (8004f8c <__NVIC_GetPriorityGrouping+0x18>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	0a1b      	lsrs	r3, r3, #8
 8004f7e:	f003 0307 	and.w	r3, r3, #7
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	e000ed00 	.word	0xe000ed00

08004f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	4603      	mov	r3, r0
 8004f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	db0b      	blt.n	8004fba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fa2:	79fb      	ldrb	r3, [r7, #7]
 8004fa4:	f003 021f 	and.w	r2, r3, #31
 8004fa8:	4907      	ldr	r1, [pc, #28]	; (8004fc8 <__NVIC_EnableIRQ+0x38>)
 8004faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fae:	095b      	lsrs	r3, r3, #5
 8004fb0:	2001      	movs	r0, #1
 8004fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8004fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	e000e100 	.word	0xe000e100

08004fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	6039      	str	r1, [r7, #0]
 8004fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	db0a      	blt.n	8004ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	490c      	ldr	r1, [pc, #48]	; (8005018 <__NVIC_SetPriority+0x4c>)
 8004fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fea:	0112      	lsls	r2, r2, #4
 8004fec:	b2d2      	uxtb	r2, r2
 8004fee:	440b      	add	r3, r1
 8004ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ff4:	e00a      	b.n	800500c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	4908      	ldr	r1, [pc, #32]	; (800501c <__NVIC_SetPriority+0x50>)
 8004ffc:	79fb      	ldrb	r3, [r7, #7]
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	3b04      	subs	r3, #4
 8005004:	0112      	lsls	r2, r2, #4
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	440b      	add	r3, r1
 800500a:	761a      	strb	r2, [r3, #24]
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	e000e100 	.word	0xe000e100
 800501c:	e000ed00 	.word	0xe000ed00

08005020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005020:	b480      	push	{r7}
 8005022:	b089      	sub	sp, #36	; 0x24
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f003 0307 	and.w	r3, r3, #7
 8005032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	f1c3 0307 	rsb	r3, r3, #7
 800503a:	2b04      	cmp	r3, #4
 800503c:	bf28      	it	cs
 800503e:	2304      	movcs	r3, #4
 8005040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	3304      	adds	r3, #4
 8005046:	2b06      	cmp	r3, #6
 8005048:	d902      	bls.n	8005050 <NVIC_EncodePriority+0x30>
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	3b03      	subs	r3, #3
 800504e:	e000      	b.n	8005052 <NVIC_EncodePriority+0x32>
 8005050:	2300      	movs	r3, #0
 8005052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005054:	f04f 32ff 	mov.w	r2, #4294967295
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	fa02 f303 	lsl.w	r3, r2, r3
 800505e:	43da      	mvns	r2, r3
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	401a      	ands	r2, r3
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005068:	f04f 31ff 	mov.w	r1, #4294967295
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	fa01 f303 	lsl.w	r3, r1, r3
 8005072:	43d9      	mvns	r1, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005078:	4313      	orrs	r3, r2
         );
}
 800507a:	4618      	mov	r0, r3
 800507c:	3724      	adds	r7, #36	; 0x24
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
	...

08005088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3b01      	subs	r3, #1
 8005094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005098:	d301      	bcc.n	800509e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800509a:	2301      	movs	r3, #1
 800509c:	e00f      	b.n	80050be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800509e:	4a0a      	ldr	r2, [pc, #40]	; (80050c8 <SysTick_Config+0x40>)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3b01      	subs	r3, #1
 80050a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050a6:	210f      	movs	r1, #15
 80050a8:	f04f 30ff 	mov.w	r0, #4294967295
 80050ac:	f7ff ff8e 	bl	8004fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050b0:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <SysTick_Config+0x40>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050b6:	4b04      	ldr	r3, [pc, #16]	; (80050c8 <SysTick_Config+0x40>)
 80050b8:	2207      	movs	r2, #7
 80050ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	e000e010 	.word	0xe000e010

080050cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7ff ff29 	bl	8004f2c <__NVIC_SetPriorityGrouping>
}
 80050da:	bf00      	nop
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b086      	sub	sp, #24
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	4603      	mov	r3, r0
 80050ea:	60b9      	str	r1, [r7, #8]
 80050ec:	607a      	str	r2, [r7, #4]
 80050ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050f4:	f7ff ff3e 	bl	8004f74 <__NVIC_GetPriorityGrouping>
 80050f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	68b9      	ldr	r1, [r7, #8]
 80050fe:	6978      	ldr	r0, [r7, #20]
 8005100:	f7ff ff8e 	bl	8005020 <NVIC_EncodePriority>
 8005104:	4602      	mov	r2, r0
 8005106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800510a:	4611      	mov	r1, r2
 800510c:	4618      	mov	r0, r3
 800510e:	f7ff ff5d 	bl	8004fcc <__NVIC_SetPriority>
}
 8005112:	bf00      	nop
 8005114:	3718      	adds	r7, #24
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b082      	sub	sp, #8
 800511e:	af00      	add	r7, sp, #0
 8005120:	4603      	mov	r3, r0
 8005122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005128:	4618      	mov	r0, r3
 800512a:	f7ff ff31 	bl	8004f90 <__NVIC_EnableIRQ>
}
 800512e:	bf00      	nop
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b082      	sub	sp, #8
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7ff ffa2 	bl	8005088 <SysTick_Config>
 8005144:	4603      	mov	r3, r0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
	...

08005150 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005158:	2300      	movs	r3, #0
 800515a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800515c:	f7ff fa5e 	bl	800461c <HAL_GetTick>
 8005160:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e099      	b.n	80052a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0201 	bic.w	r2, r2, #1
 800518a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800518c:	e00f      	b.n	80051ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800518e:	f7ff fa45 	bl	800461c <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b05      	cmp	r3, #5
 800519a:	d908      	bls.n	80051ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2220      	movs	r2, #32
 80051a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2203      	movs	r2, #3
 80051a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e078      	b.n	80052a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1e8      	bne.n	800518e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	4b38      	ldr	r3, [pc, #224]	; (80052a8 <HAL_DMA_Init+0x158>)
 80051c8:	4013      	ands	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a1b      	ldr	r3, [r3, #32]
 80051f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	2b04      	cmp	r3, #4
 8005206:	d107      	bne.n	8005218 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005210:	4313      	orrs	r3, r2
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	4313      	orrs	r3, r2
 8005216:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f023 0307 	bic.w	r3, r3, #7
 800522e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	4313      	orrs	r3, r2
 8005238:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	2b04      	cmp	r3, #4
 8005240:	d117      	bne.n	8005272 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	4313      	orrs	r3, r2
 800524a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00e      	beq.n	8005272 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 fb01 	bl	800585c <DMA_CheckFifoParam>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d008      	beq.n	8005272 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2240      	movs	r2, #64	; 0x40
 8005264:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800526e:	2301      	movs	r3, #1
 8005270:	e016      	b.n	80052a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fab8 	bl	80057f0 <DMA_CalcBaseAndBitshift>
 8005280:	4603      	mov	r3, r0
 8005282:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005288:	223f      	movs	r2, #63	; 0x3f
 800528a:	409a      	lsls	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3718      	adds	r7, #24
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	f010803f 	.word	0xf010803f

080052ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d101      	bne.n	80052d2 <HAL_DMA_Start_IT+0x26>
 80052ce:	2302      	movs	r3, #2
 80052d0:	e040      	b.n	8005354 <HAL_DMA_Start_IT+0xa8>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d12f      	bne.n	8005346 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2202      	movs	r2, #2
 80052ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	68b9      	ldr	r1, [r7, #8]
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 fa4a 	bl	8005794 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005304:	223f      	movs	r2, #63	; 0x3f
 8005306:	409a      	lsls	r2, r3
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0216 	orr.w	r2, r2, #22
 800531a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005320:	2b00      	cmp	r3, #0
 8005322:	d007      	beq.n	8005334 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0208 	orr.w	r2, r2, #8
 8005332:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0201 	orr.w	r2, r2, #1
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	e005      	b.n	8005352 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800534e:	2302      	movs	r3, #2
 8005350:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005352:	7dfb      	ldrb	r3, [r7, #23]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3718      	adds	r7, #24
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005368:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800536a:	f7ff f957 	bl	800461c <HAL_GetTick>
 800536e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d008      	beq.n	800538e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2280      	movs	r2, #128	; 0x80
 8005380:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e052      	b.n	8005434 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f022 0216 	bic.w	r2, r2, #22
 800539c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	695a      	ldr	r2, [r3, #20]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d103      	bne.n	80053be <HAL_DMA_Abort+0x62>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d007      	beq.n	80053ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0208 	bic.w	r2, r2, #8
 80053cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0201 	bic.w	r2, r2, #1
 80053dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053de:	e013      	b.n	8005408 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053e0:	f7ff f91c 	bl	800461c <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b05      	cmp	r3, #5
 80053ec:	d90c      	bls.n	8005408 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2220      	movs	r2, #32
 80053f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2203      	movs	r2, #3
 80053f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e015      	b.n	8005434 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1e4      	bne.n	80053e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800541a:	223f      	movs	r2, #63	; 0x3f
 800541c:	409a      	lsls	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d004      	beq.n	800545a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2280      	movs	r2, #128	; 0x80
 8005454:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e00c      	b.n	8005474 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2205      	movs	r2, #5
 800545e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f022 0201 	bic.w	r2, r2, #1
 8005470:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005488:	2300      	movs	r3, #0
 800548a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800548c:	4b8e      	ldr	r3, [pc, #568]	; (80056c8 <HAL_DMA_IRQHandler+0x248>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a8e      	ldr	r2, [pc, #568]	; (80056cc <HAL_DMA_IRQHandler+0x24c>)
 8005492:	fba2 2303 	umull	r2, r3, r2, r3
 8005496:	0a9b      	lsrs	r3, r3, #10
 8005498:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800549e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054aa:	2208      	movs	r2, #8
 80054ac:	409a      	lsls	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4013      	ands	r3, r2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d01a      	beq.n	80054ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d013      	beq.n	80054ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f022 0204 	bic.w	r2, r2, #4
 80054d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d8:	2208      	movs	r2, #8
 80054da:	409a      	lsls	r2, r3
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e4:	f043 0201 	orr.w	r2, r3, #1
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f0:	2201      	movs	r2, #1
 80054f2:	409a      	lsls	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4013      	ands	r3, r2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d012      	beq.n	8005522 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00b      	beq.n	8005522 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800550e:	2201      	movs	r2, #1
 8005510:	409a      	lsls	r2, r3
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800551a:	f043 0202 	orr.w	r2, r3, #2
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005526:	2204      	movs	r2, #4
 8005528:	409a      	lsls	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	4013      	ands	r3, r2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d012      	beq.n	8005558 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00b      	beq.n	8005558 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005544:	2204      	movs	r2, #4
 8005546:	409a      	lsls	r2, r3
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005550:	f043 0204 	orr.w	r2, r3, #4
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800555c:	2210      	movs	r2, #16
 800555e:	409a      	lsls	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4013      	ands	r3, r2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d043      	beq.n	80055f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0308 	and.w	r3, r3, #8
 8005572:	2b00      	cmp	r3, #0
 8005574:	d03c      	beq.n	80055f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800557a:	2210      	movs	r2, #16
 800557c:	409a      	lsls	r2, r3
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d018      	beq.n	80055c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d108      	bne.n	80055b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d024      	beq.n	80055f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	4798      	blx	r3
 80055ae:	e01f      	b.n	80055f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01b      	beq.n	80055f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	4798      	blx	r3
 80055c0:	e016      	b.n	80055f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d107      	bne.n	80055e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0208 	bic.w	r2, r2, #8
 80055de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d003      	beq.n	80055f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f4:	2220      	movs	r2, #32
 80055f6:	409a      	lsls	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4013      	ands	r3, r2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 808f 	beq.w	8005720 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0310 	and.w	r3, r3, #16
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 8087 	beq.w	8005720 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005616:	2220      	movs	r2, #32
 8005618:	409a      	lsls	r2, r3
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b05      	cmp	r3, #5
 8005628:	d136      	bne.n	8005698 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0216 	bic.w	r2, r2, #22
 8005638:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	695a      	ldr	r2, [r3, #20]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005648:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564e:	2b00      	cmp	r3, #0
 8005650:	d103      	bne.n	800565a <HAL_DMA_IRQHandler+0x1da>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005656:	2b00      	cmp	r3, #0
 8005658:	d007      	beq.n	800566a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0208 	bic.w	r2, r2, #8
 8005668:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800566e:	223f      	movs	r2, #63	; 0x3f
 8005670:	409a      	lsls	r2, r3
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800568a:	2b00      	cmp	r3, #0
 800568c:	d07e      	beq.n	800578c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	4798      	blx	r3
        }
        return;
 8005696:	e079      	b.n	800578c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d01d      	beq.n	80056e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10d      	bne.n	80056d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d031      	beq.n	8005720 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	4798      	blx	r3
 80056c4:	e02c      	b.n	8005720 <HAL_DMA_IRQHandler+0x2a0>
 80056c6:	bf00      	nop
 80056c8:	20000068 	.word	0x20000068
 80056cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d023      	beq.n	8005720 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	4798      	blx	r3
 80056e0:	e01e      	b.n	8005720 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10f      	bne.n	8005710 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 0210 	bic.w	r2, r2, #16
 80056fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005714:	2b00      	cmp	r3, #0
 8005716:	d003      	beq.n	8005720 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005724:	2b00      	cmp	r3, #0
 8005726:	d032      	beq.n	800578e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b00      	cmp	r3, #0
 8005732:	d022      	beq.n	800577a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2205      	movs	r2, #5
 8005738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 0201 	bic.w	r2, r2, #1
 800574a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	3301      	adds	r3, #1
 8005750:	60bb      	str	r3, [r7, #8]
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	429a      	cmp	r2, r3
 8005756:	d307      	bcc.n	8005768 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1f2      	bne.n	800574c <HAL_DMA_IRQHandler+0x2cc>
 8005766:	e000      	b.n	800576a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005768:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	4798      	blx	r3
 800578a:	e000      	b.n	800578e <HAL_DMA_IRQHandler+0x30e>
        return;
 800578c:	bf00      	nop
    }
  }
}
 800578e:	3718      	adds	r7, #24
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
 80057a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	2b40      	cmp	r3, #64	; 0x40
 80057c0:	d108      	bne.n	80057d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80057d2:	e007      	b.n	80057e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	60da      	str	r2, [r3, #12]
}
 80057e4:	bf00      	nop
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	3b10      	subs	r3, #16
 8005800:	4a14      	ldr	r2, [pc, #80]	; (8005854 <DMA_CalcBaseAndBitshift+0x64>)
 8005802:	fba2 2303 	umull	r2, r3, r2, r3
 8005806:	091b      	lsrs	r3, r3, #4
 8005808:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800580a:	4a13      	ldr	r2, [pc, #76]	; (8005858 <DMA_CalcBaseAndBitshift+0x68>)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4413      	add	r3, r2
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	461a      	mov	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2b03      	cmp	r3, #3
 800581c:	d909      	bls.n	8005832 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005826:	f023 0303 	bic.w	r3, r3, #3
 800582a:	1d1a      	adds	r2, r3, #4
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	659a      	str	r2, [r3, #88]	; 0x58
 8005830:	e007      	b.n	8005842 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800583a:	f023 0303 	bic.w	r3, r3, #3
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005846:	4618      	mov	r0, r3
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	aaaaaaab 	.word	0xaaaaaaab
 8005858:	0800a384 	.word	0x0800a384

0800585c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005864:	2300      	movs	r3, #0
 8005866:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d11f      	bne.n	80058b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	2b03      	cmp	r3, #3
 800587a:	d856      	bhi.n	800592a <DMA_CheckFifoParam+0xce>
 800587c:	a201      	add	r2, pc, #4	; (adr r2, 8005884 <DMA_CheckFifoParam+0x28>)
 800587e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005882:	bf00      	nop
 8005884:	08005895 	.word	0x08005895
 8005888:	080058a7 	.word	0x080058a7
 800588c:	08005895 	.word	0x08005895
 8005890:	0800592b 	.word	0x0800592b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005898:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d046      	beq.n	800592e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058a4:	e043      	b.n	800592e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058ae:	d140      	bne.n	8005932 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058b4:	e03d      	b.n	8005932 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058be:	d121      	bne.n	8005904 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	2b03      	cmp	r3, #3
 80058c4:	d837      	bhi.n	8005936 <DMA_CheckFifoParam+0xda>
 80058c6:	a201      	add	r2, pc, #4	; (adr r2, 80058cc <DMA_CheckFifoParam+0x70>)
 80058c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058cc:	080058dd 	.word	0x080058dd
 80058d0:	080058e3 	.word	0x080058e3
 80058d4:	080058dd 	.word	0x080058dd
 80058d8:	080058f5 	.word	0x080058f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	73fb      	strb	r3, [r7, #15]
      break;
 80058e0:	e030      	b.n	8005944 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d025      	beq.n	800593a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058f2:	e022      	b.n	800593a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058fc:	d11f      	bne.n	800593e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005902:	e01c      	b.n	800593e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2b02      	cmp	r3, #2
 8005908:	d903      	bls.n	8005912 <DMA_CheckFifoParam+0xb6>
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	2b03      	cmp	r3, #3
 800590e:	d003      	beq.n	8005918 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005910:	e018      	b.n	8005944 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	73fb      	strb	r3, [r7, #15]
      break;
 8005916:	e015      	b.n	8005944 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00e      	beq.n	8005942 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	73fb      	strb	r3, [r7, #15]
      break;
 8005928:	e00b      	b.n	8005942 <DMA_CheckFifoParam+0xe6>
      break;
 800592a:	bf00      	nop
 800592c:	e00a      	b.n	8005944 <DMA_CheckFifoParam+0xe8>
      break;
 800592e:	bf00      	nop
 8005930:	e008      	b.n	8005944 <DMA_CheckFifoParam+0xe8>
      break;
 8005932:	bf00      	nop
 8005934:	e006      	b.n	8005944 <DMA_CheckFifoParam+0xe8>
      break;
 8005936:	bf00      	nop
 8005938:	e004      	b.n	8005944 <DMA_CheckFifoParam+0xe8>
      break;
 800593a:	bf00      	nop
 800593c:	e002      	b.n	8005944 <DMA_CheckFifoParam+0xe8>
      break;   
 800593e:	bf00      	nop
 8005940:	e000      	b.n	8005944 <DMA_CheckFifoParam+0xe8>
      break;
 8005942:	bf00      	nop
    }
  } 
  
  return status; 
 8005944:	7bfb      	ldrb	r3, [r7, #15]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop

08005954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005954:	b480      	push	{r7}
 8005956:	b089      	sub	sp, #36	; 0x24
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800595e:	2300      	movs	r3, #0
 8005960:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005962:	2300      	movs	r3, #0
 8005964:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005966:	2300      	movs	r3, #0
 8005968:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800596a:	2300      	movs	r3, #0
 800596c:	61fb      	str	r3, [r7, #28]
 800596e:	e16b      	b.n	8005c48 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005970:	2201      	movs	r2, #1
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	fa02 f303 	lsl.w	r3, r2, r3
 8005978:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	4013      	ands	r3, r2
 8005982:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	429a      	cmp	r2, r3
 800598a:	f040 815a 	bne.w	8005c42 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f003 0303 	and.w	r3, r3, #3
 8005996:	2b01      	cmp	r3, #1
 8005998:	d005      	beq.n	80059a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d130      	bne.n	8005a08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	2203      	movs	r2, #3
 80059b2:	fa02 f303 	lsl.w	r3, r2, r3
 80059b6:	43db      	mvns	r3, r3
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	4013      	ands	r3, r2
 80059bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	68da      	ldr	r2, [r3, #12]
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059dc:	2201      	movs	r2, #1
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	fa02 f303 	lsl.w	r3, r2, r3
 80059e4:	43db      	mvns	r3, r3
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	4013      	ands	r3, r2
 80059ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	091b      	lsrs	r3, r3, #4
 80059f2:	f003 0201 	and.w	r2, r3, #1
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	fa02 f303 	lsl.w	r3, r2, r3
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f003 0303 	and.w	r3, r3, #3
 8005a10:	2b03      	cmp	r3, #3
 8005a12:	d017      	beq.n	8005a44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	2203      	movs	r2, #3
 8005a20:	fa02 f303 	lsl.w	r3, r2, r3
 8005a24:	43db      	mvns	r3, r3
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	4013      	ands	r3, r2
 8005a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	689a      	ldr	r2, [r3, #8]
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	fa02 f303 	lsl.w	r3, r2, r3
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f003 0303 	and.w	r3, r3, #3
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d123      	bne.n	8005a98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	08da      	lsrs	r2, r3, #3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	3208      	adds	r2, #8
 8005a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	f003 0307 	and.w	r3, r3, #7
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	220f      	movs	r2, #15
 8005a68:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6c:	43db      	mvns	r3, r3
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	4013      	ands	r3, r2
 8005a72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	691a      	ldr	r2, [r3, #16]
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	f003 0307 	and.w	r3, r3, #7
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	fa02 f303 	lsl.w	r3, r2, r3
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	08da      	lsrs	r2, r3, #3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	3208      	adds	r2, #8
 8005a92:	69b9      	ldr	r1, [r7, #24]
 8005a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	2203      	movs	r2, #3
 8005aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa8:	43db      	mvns	r3, r3
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	4013      	ands	r3, r2
 8005aae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f003 0203 	and.w	r2, r3, #3
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	005b      	lsls	r3, r3, #1
 8005abc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 80b4 	beq.w	8005c42 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ada:	2300      	movs	r3, #0
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	4b60      	ldr	r3, [pc, #384]	; (8005c60 <HAL_GPIO_Init+0x30c>)
 8005ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae2:	4a5f      	ldr	r2, [pc, #380]	; (8005c60 <HAL_GPIO_Init+0x30c>)
 8005ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8005aea:	4b5d      	ldr	r3, [pc, #372]	; (8005c60 <HAL_GPIO_Init+0x30c>)
 8005aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005af2:	60fb      	str	r3, [r7, #12]
 8005af4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005af6:	4a5b      	ldr	r2, [pc, #364]	; (8005c64 <HAL_GPIO_Init+0x310>)
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	089b      	lsrs	r3, r3, #2
 8005afc:	3302      	adds	r3, #2
 8005afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	f003 0303 	and.w	r3, r3, #3
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	220f      	movs	r2, #15
 8005b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b12:	43db      	mvns	r3, r3
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	4013      	ands	r3, r2
 8005b18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a52      	ldr	r2, [pc, #328]	; (8005c68 <HAL_GPIO_Init+0x314>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d02b      	beq.n	8005b7a <HAL_GPIO_Init+0x226>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a51      	ldr	r2, [pc, #324]	; (8005c6c <HAL_GPIO_Init+0x318>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d025      	beq.n	8005b76 <HAL_GPIO_Init+0x222>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a50      	ldr	r2, [pc, #320]	; (8005c70 <HAL_GPIO_Init+0x31c>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d01f      	beq.n	8005b72 <HAL_GPIO_Init+0x21e>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a4f      	ldr	r2, [pc, #316]	; (8005c74 <HAL_GPIO_Init+0x320>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d019      	beq.n	8005b6e <HAL_GPIO_Init+0x21a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a4e      	ldr	r2, [pc, #312]	; (8005c78 <HAL_GPIO_Init+0x324>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d013      	beq.n	8005b6a <HAL_GPIO_Init+0x216>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a4d      	ldr	r2, [pc, #308]	; (8005c7c <HAL_GPIO_Init+0x328>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d00d      	beq.n	8005b66 <HAL_GPIO_Init+0x212>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a4c      	ldr	r2, [pc, #304]	; (8005c80 <HAL_GPIO_Init+0x32c>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d007      	beq.n	8005b62 <HAL_GPIO_Init+0x20e>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a4b      	ldr	r2, [pc, #300]	; (8005c84 <HAL_GPIO_Init+0x330>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d101      	bne.n	8005b5e <HAL_GPIO_Init+0x20a>
 8005b5a:	2307      	movs	r3, #7
 8005b5c:	e00e      	b.n	8005b7c <HAL_GPIO_Init+0x228>
 8005b5e:	2308      	movs	r3, #8
 8005b60:	e00c      	b.n	8005b7c <HAL_GPIO_Init+0x228>
 8005b62:	2306      	movs	r3, #6
 8005b64:	e00a      	b.n	8005b7c <HAL_GPIO_Init+0x228>
 8005b66:	2305      	movs	r3, #5
 8005b68:	e008      	b.n	8005b7c <HAL_GPIO_Init+0x228>
 8005b6a:	2304      	movs	r3, #4
 8005b6c:	e006      	b.n	8005b7c <HAL_GPIO_Init+0x228>
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e004      	b.n	8005b7c <HAL_GPIO_Init+0x228>
 8005b72:	2302      	movs	r3, #2
 8005b74:	e002      	b.n	8005b7c <HAL_GPIO_Init+0x228>
 8005b76:	2301      	movs	r3, #1
 8005b78:	e000      	b.n	8005b7c <HAL_GPIO_Init+0x228>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	69fa      	ldr	r2, [r7, #28]
 8005b7e:	f002 0203 	and.w	r2, r2, #3
 8005b82:	0092      	lsls	r2, r2, #2
 8005b84:	4093      	lsls	r3, r2
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b8c:	4935      	ldr	r1, [pc, #212]	; (8005c64 <HAL_GPIO_Init+0x310>)
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	089b      	lsrs	r3, r3, #2
 8005b92:	3302      	adds	r3, #2
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b9a:	4b3b      	ldr	r3, [pc, #236]	; (8005c88 <HAL_GPIO_Init+0x334>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	43db      	mvns	r3, r3
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005bbe:	4a32      	ldr	r2, [pc, #200]	; (8005c88 <HAL_GPIO_Init+0x334>)
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005bc4:	4b30      	ldr	r3, [pc, #192]	; (8005c88 <HAL_GPIO_Init+0x334>)
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	43db      	mvns	r3, r3
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d003      	beq.n	8005be8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005be8:	4a27      	ldr	r2, [pc, #156]	; (8005c88 <HAL_GPIO_Init+0x334>)
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005bee:	4b26      	ldr	r3, [pc, #152]	; (8005c88 <HAL_GPIO_Init+0x334>)
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	43db      	mvns	r3, r3
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005c0a:	69ba      	ldr	r2, [r7, #24]
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c12:	4a1d      	ldr	r2, [pc, #116]	; (8005c88 <HAL_GPIO_Init+0x334>)
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c18:	4b1b      	ldr	r3, [pc, #108]	; (8005c88 <HAL_GPIO_Init+0x334>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	43db      	mvns	r3, r3
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	4013      	ands	r3, r2
 8005c26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c3c:	4a12      	ldr	r2, [pc, #72]	; (8005c88 <HAL_GPIO_Init+0x334>)
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	3301      	adds	r3, #1
 8005c46:	61fb      	str	r3, [r7, #28]
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	2b0f      	cmp	r3, #15
 8005c4c:	f67f ae90 	bls.w	8005970 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005c50:	bf00      	nop
 8005c52:	bf00      	nop
 8005c54:	3724      	adds	r7, #36	; 0x24
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	40023800 	.word	0x40023800
 8005c64:	40013800 	.word	0x40013800
 8005c68:	40020000 	.word	0x40020000
 8005c6c:	40020400 	.word	0x40020400
 8005c70:	40020800 	.word	0x40020800
 8005c74:	40020c00 	.word	0x40020c00
 8005c78:	40021000 	.word	0x40021000
 8005c7c:	40021400 	.word	0x40021400
 8005c80:	40021800 	.word	0x40021800
 8005c84:	40021c00 	.word	0x40021c00
 8005c88:	40013c00 	.word	0x40013c00

08005c8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	460b      	mov	r3, r1
 8005c96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	691a      	ldr	r2, [r3, #16]
 8005c9c:	887b      	ldrh	r3, [r7, #2]
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	73fb      	strb	r3, [r7, #15]
 8005ca8:	e001      	b.n	8005cae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005caa:	2300      	movs	r3, #0
 8005cac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	807b      	strh	r3, [r7, #2]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ccc:	787b      	ldrb	r3, [r7, #1]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cd2:	887a      	ldrh	r2, [r7, #2]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005cd8:	e003      	b.n	8005ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005cda:	887b      	ldrh	r3, [r7, #2]
 8005cdc:	041a      	lsls	r2, r3, #16
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	619a      	str	r2, [r3, #24]
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b085      	sub	sp, #20
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d00:	887a      	ldrh	r2, [r7, #2]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4013      	ands	r3, r2
 8005d06:	041a      	lsls	r2, r3, #16
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	43d9      	mvns	r1, r3
 8005d0c:	887b      	ldrh	r3, [r7, #2]
 8005d0e:	400b      	ands	r3, r1
 8005d10:	431a      	orrs	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	619a      	str	r2, [r3, #24]
}
 8005d16:	bf00      	nop
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
	...

08005d24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005d2e:	4b08      	ldr	r3, [pc, #32]	; (8005d50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d30:	695a      	ldr	r2, [r3, #20]
 8005d32:	88fb      	ldrh	r3, [r7, #6]
 8005d34:	4013      	ands	r3, r2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d006      	beq.n	8005d48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d3a:	4a05      	ldr	r2, [pc, #20]	; (8005d50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d3c:	88fb      	ldrh	r3, [r7, #6]
 8005d3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d40:	88fb      	ldrh	r3, [r7, #6]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 f806 	bl	8005d54 <HAL_GPIO_EXTI_Callback>
  }
}
 8005d48:	bf00      	nop
 8005d4a:	3708      	adds	r7, #8
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	40013c00 	.word	0x40013c00

08005d54 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
	...

08005d6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e267      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d075      	beq.n	8005e76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d8a:	4b88      	ldr	r3, [pc, #544]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f003 030c 	and.w	r3, r3, #12
 8005d92:	2b04      	cmp	r3, #4
 8005d94:	d00c      	beq.n	8005db0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d96:	4b85      	ldr	r3, [pc, #532]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d9e:	2b08      	cmp	r3, #8
 8005da0:	d112      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005da2:	4b82      	ldr	r3, [pc, #520]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005daa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dae:	d10b      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005db0:	4b7e      	ldr	r3, [pc, #504]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d05b      	beq.n	8005e74 <HAL_RCC_OscConfig+0x108>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d157      	bne.n	8005e74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e242      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd0:	d106      	bne.n	8005de0 <HAL_RCC_OscConfig+0x74>
 8005dd2:	4b76      	ldr	r3, [pc, #472]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a75      	ldr	r2, [pc, #468]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ddc:	6013      	str	r3, [r2, #0]
 8005dde:	e01d      	b.n	8005e1c <HAL_RCC_OscConfig+0xb0>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005de8:	d10c      	bne.n	8005e04 <HAL_RCC_OscConfig+0x98>
 8005dea:	4b70      	ldr	r3, [pc, #448]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a6f      	ldr	r2, [pc, #444]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	4b6d      	ldr	r3, [pc, #436]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a6c      	ldr	r2, [pc, #432]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e00:	6013      	str	r3, [r2, #0]
 8005e02:	e00b      	b.n	8005e1c <HAL_RCC_OscConfig+0xb0>
 8005e04:	4b69      	ldr	r3, [pc, #420]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a68      	ldr	r2, [pc, #416]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e0e:	6013      	str	r3, [r2, #0]
 8005e10:	4b66      	ldr	r3, [pc, #408]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a65      	ldr	r2, [pc, #404]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d013      	beq.n	8005e4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e24:	f7fe fbfa 	bl	800461c <HAL_GetTick>
 8005e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e2a:	e008      	b.n	8005e3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e2c:	f7fe fbf6 	bl	800461c <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	2b64      	cmp	r3, #100	; 0x64
 8005e38:	d901      	bls.n	8005e3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e207      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e3e:	4b5b      	ldr	r3, [pc, #364]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d0f0      	beq.n	8005e2c <HAL_RCC_OscConfig+0xc0>
 8005e4a:	e014      	b.n	8005e76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e4c:	f7fe fbe6 	bl	800461c <HAL_GetTick>
 8005e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e52:	e008      	b.n	8005e66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e54:	f7fe fbe2 	bl	800461c <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b64      	cmp	r3, #100	; 0x64
 8005e60:	d901      	bls.n	8005e66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e1f3      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e66:	4b51      	ldr	r3, [pc, #324]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1f0      	bne.n	8005e54 <HAL_RCC_OscConfig+0xe8>
 8005e72:	e000      	b.n	8005e76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d063      	beq.n	8005f4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e82:	4b4a      	ldr	r3, [pc, #296]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f003 030c 	and.w	r3, r3, #12
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00b      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e8e:	4b47      	ldr	r3, [pc, #284]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e96:	2b08      	cmp	r3, #8
 8005e98:	d11c      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e9a:	4b44      	ldr	r3, [pc, #272]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d116      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ea6:	4b41      	ldr	r3, [pc, #260]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d005      	beq.n	8005ebe <HAL_RCC_OscConfig+0x152>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d001      	beq.n	8005ebe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e1c7      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ebe:	4b3b      	ldr	r3, [pc, #236]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	4937      	ldr	r1, [pc, #220]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ed2:	e03a      	b.n	8005f4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d020      	beq.n	8005f1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005edc:	4b34      	ldr	r3, [pc, #208]	; (8005fb0 <HAL_RCC_OscConfig+0x244>)
 8005ede:	2201      	movs	r2, #1
 8005ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee2:	f7fe fb9b 	bl	800461c <HAL_GetTick>
 8005ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ee8:	e008      	b.n	8005efc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005eea:	f7fe fb97 	bl	800461c <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d901      	bls.n	8005efc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e1a8      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005efc:	4b2b      	ldr	r3, [pc, #172]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d0f0      	beq.n	8005eea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f08:	4b28      	ldr	r3, [pc, #160]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	00db      	lsls	r3, r3, #3
 8005f16:	4925      	ldr	r1, [pc, #148]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	600b      	str	r3, [r1, #0]
 8005f1c:	e015      	b.n	8005f4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f1e:	4b24      	ldr	r3, [pc, #144]	; (8005fb0 <HAL_RCC_OscConfig+0x244>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f24:	f7fe fb7a 	bl	800461c <HAL_GetTick>
 8005f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f2a:	e008      	b.n	8005f3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f2c:	f7fe fb76 	bl	800461c <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d901      	bls.n	8005f3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e187      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f3e:	4b1b      	ldr	r3, [pc, #108]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1f0      	bne.n	8005f2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0308 	and.w	r3, r3, #8
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d036      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d016      	beq.n	8005f8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f5e:	4b15      	ldr	r3, [pc, #84]	; (8005fb4 <HAL_RCC_OscConfig+0x248>)
 8005f60:	2201      	movs	r2, #1
 8005f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f64:	f7fe fb5a 	bl	800461c <HAL_GetTick>
 8005f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f6a:	e008      	b.n	8005f7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f6c:	f7fe fb56 	bl	800461c <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d901      	bls.n	8005f7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e167      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f7e:	4b0b      	ldr	r3, [pc, #44]	; (8005fac <HAL_RCC_OscConfig+0x240>)
 8005f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d0f0      	beq.n	8005f6c <HAL_RCC_OscConfig+0x200>
 8005f8a:	e01b      	b.n	8005fc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f8c:	4b09      	ldr	r3, [pc, #36]	; (8005fb4 <HAL_RCC_OscConfig+0x248>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f92:	f7fe fb43 	bl	800461c <HAL_GetTick>
 8005f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f98:	e00e      	b.n	8005fb8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f9a:	f7fe fb3f 	bl	800461c <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d907      	bls.n	8005fb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e150      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
 8005fac:	40023800 	.word	0x40023800
 8005fb0:	42470000 	.word	0x42470000
 8005fb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fb8:	4b88      	ldr	r3, [pc, #544]	; (80061dc <HAL_RCC_OscConfig+0x470>)
 8005fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1ea      	bne.n	8005f9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 8097 	beq.w	8006100 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fd6:	4b81      	ldr	r3, [pc, #516]	; (80061dc <HAL_RCC_OscConfig+0x470>)
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10f      	bne.n	8006002 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60bb      	str	r3, [r7, #8]
 8005fe6:	4b7d      	ldr	r3, [pc, #500]	; (80061dc <HAL_RCC_OscConfig+0x470>)
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	4a7c      	ldr	r2, [pc, #496]	; (80061dc <HAL_RCC_OscConfig+0x470>)
 8005fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ff2:	4b7a      	ldr	r3, [pc, #488]	; (80061dc <HAL_RCC_OscConfig+0x470>)
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ffa:	60bb      	str	r3, [r7, #8]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ffe:	2301      	movs	r3, #1
 8006000:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006002:	4b77      	ldr	r3, [pc, #476]	; (80061e0 <HAL_RCC_OscConfig+0x474>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600a:	2b00      	cmp	r3, #0
 800600c:	d118      	bne.n	8006040 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800600e:	4b74      	ldr	r3, [pc, #464]	; (80061e0 <HAL_RCC_OscConfig+0x474>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a73      	ldr	r2, [pc, #460]	; (80061e0 <HAL_RCC_OscConfig+0x474>)
 8006014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800601a:	f7fe faff 	bl	800461c <HAL_GetTick>
 800601e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006020:	e008      	b.n	8006034 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006022:	f7fe fafb 	bl	800461c <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	2b02      	cmp	r3, #2
 800602e:	d901      	bls.n	8006034 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e10c      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006034:	4b6a      	ldr	r3, [pc, #424]	; (80061e0 <HAL_RCC_OscConfig+0x474>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800603c:	2b00      	cmp	r3, #0
 800603e:	d0f0      	beq.n	8006022 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d106      	bne.n	8006056 <HAL_RCC_OscConfig+0x2ea>
 8006048:	4b64      	ldr	r3, [pc, #400]	; (80061dc <HAL_RCC_OscConfig+0x470>)
 800604a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604c:	4a63      	ldr	r2, [pc, #396]	; (80061dc <HAL_RCC_OscConfig+0x470>)
 800604e:	f043 0301 	orr.w	r3, r3, #1
 8006052:	6713      	str	r3, [r2, #112]	; 0x70
 8006054:	e01c      	b.n	8006090 <HAL_RCC_OscConfig+0x324>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	2b05      	cmp	r3, #5
 800605c:	d10c      	bne.n	8006078 <HAL_RCC_OscConfig+0x30c>
 800605e:	4b5f      	ldr	r3, [pc, #380]	; (80061dc <HAL_RCC_OscConfig+0x470>)
 8006060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006062:	4a5e      	ldr	r2, [pc, #376]	; (80061dc <HAL_RCC_OscConfig+0x470>)
 8006064:	f043 0304 	orr.w	r3, r3, #4
 8006068:	6713      	str	r3, [r2, #112]	; 0x70
 800606a:	4b5c      	ldr	r3, [pc, #368]	; (80061dc <HAL_RCC_OscConfig+0x470>)
 800606c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800606e:	4a5b      	ldr	r2, [pc, #364]	; (80061dc <HAL_RCC_OscConfig+0x470>)
 8006070:	f043 0301 	orr.w	r3, r3, #1
 8006074:	6713      	str	r3, [r2, #112]	; 0x70
 8006076:	e00b      	b.n	8006090 <HAL_RCC_OscConfig+0x324>
 8006078:	4b58      	ldr	r3, [pc, #352]	; (80061dc <HAL_RCC_OscConfig+0x470>)
 800607a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607c:	4a57      	ldr	r2, [pc, #348]	; (80061dc <HAL_RCC_OscConfig+0x470>)
 800607e:	f023 0301 	bic.w	r3, r3, #1
 8006082:	6713      	str	r3, [r2, #112]	; 0x70
 8006084:	4b55      	ldr	r3, [pc, #340]	; (80061dc <HAL_RCC_OscConfig+0x470>)
 8006086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006088:	4a54      	ldr	r2, [pc, #336]	; (80061dc <HAL_RCC_OscConfig+0x470>)
 800608a:	f023 0304 	bic.w	r3, r3, #4
 800608e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d015      	beq.n	80060c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006098:	f7fe fac0 	bl	800461c <HAL_GetTick>
 800609c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800609e:	e00a      	b.n	80060b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060a0:	f7fe fabc 	bl	800461c <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e0cb      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060b6:	4b49      	ldr	r3, [pc, #292]	; (80061dc <HAL_RCC_OscConfig+0x470>)
 80060b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0ee      	beq.n	80060a0 <HAL_RCC_OscConfig+0x334>
 80060c2:	e014      	b.n	80060ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060c4:	f7fe faaa 	bl	800461c <HAL_GetTick>
 80060c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060ca:	e00a      	b.n	80060e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060cc:	f7fe faa6 	bl	800461c <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060da:	4293      	cmp	r3, r2
 80060dc:	d901      	bls.n	80060e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e0b5      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060e2:	4b3e      	ldr	r3, [pc, #248]	; (80061dc <HAL_RCC_OscConfig+0x470>)
 80060e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1ee      	bne.n	80060cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060ee:	7dfb      	ldrb	r3, [r7, #23]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d105      	bne.n	8006100 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060f4:	4b39      	ldr	r3, [pc, #228]	; (80061dc <HAL_RCC_OscConfig+0x470>)
 80060f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f8:	4a38      	ldr	r2, [pc, #224]	; (80061dc <HAL_RCC_OscConfig+0x470>)
 80060fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	2b00      	cmp	r3, #0
 8006106:	f000 80a1 	beq.w	800624c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800610a:	4b34      	ldr	r3, [pc, #208]	; (80061dc <HAL_RCC_OscConfig+0x470>)
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f003 030c 	and.w	r3, r3, #12
 8006112:	2b08      	cmp	r3, #8
 8006114:	d05c      	beq.n	80061d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	2b02      	cmp	r3, #2
 800611c:	d141      	bne.n	80061a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800611e:	4b31      	ldr	r3, [pc, #196]	; (80061e4 <HAL_RCC_OscConfig+0x478>)
 8006120:	2200      	movs	r2, #0
 8006122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006124:	f7fe fa7a 	bl	800461c <HAL_GetTick>
 8006128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800612a:	e008      	b.n	800613e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800612c:	f7fe fa76 	bl	800461c <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b02      	cmp	r3, #2
 8006138:	d901      	bls.n	800613e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e087      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800613e:	4b27      	ldr	r3, [pc, #156]	; (80061dc <HAL_RCC_OscConfig+0x470>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1f0      	bne.n	800612c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	69da      	ldr	r2, [r3, #28]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	431a      	orrs	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006158:	019b      	lsls	r3, r3, #6
 800615a:	431a      	orrs	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006160:	085b      	lsrs	r3, r3, #1
 8006162:	3b01      	subs	r3, #1
 8006164:	041b      	lsls	r3, r3, #16
 8006166:	431a      	orrs	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616c:	061b      	lsls	r3, r3, #24
 800616e:	491b      	ldr	r1, [pc, #108]	; (80061dc <HAL_RCC_OscConfig+0x470>)
 8006170:	4313      	orrs	r3, r2
 8006172:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006174:	4b1b      	ldr	r3, [pc, #108]	; (80061e4 <HAL_RCC_OscConfig+0x478>)
 8006176:	2201      	movs	r2, #1
 8006178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800617a:	f7fe fa4f 	bl	800461c <HAL_GetTick>
 800617e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006180:	e008      	b.n	8006194 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006182:	f7fe fa4b 	bl	800461c <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	2b02      	cmp	r3, #2
 800618e:	d901      	bls.n	8006194 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e05c      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006194:	4b11      	ldr	r3, [pc, #68]	; (80061dc <HAL_RCC_OscConfig+0x470>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0f0      	beq.n	8006182 <HAL_RCC_OscConfig+0x416>
 80061a0:	e054      	b.n	800624c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061a2:	4b10      	ldr	r3, [pc, #64]	; (80061e4 <HAL_RCC_OscConfig+0x478>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061a8:	f7fe fa38 	bl	800461c <HAL_GetTick>
 80061ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ae:	e008      	b.n	80061c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061b0:	f7fe fa34 	bl	800461c <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d901      	bls.n	80061c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e045      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061c2:	4b06      	ldr	r3, [pc, #24]	; (80061dc <HAL_RCC_OscConfig+0x470>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1f0      	bne.n	80061b0 <HAL_RCC_OscConfig+0x444>
 80061ce:	e03d      	b.n	800624c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d107      	bne.n	80061e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e038      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
 80061dc:	40023800 	.word	0x40023800
 80061e0:	40007000 	.word	0x40007000
 80061e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061e8:	4b1b      	ldr	r3, [pc, #108]	; (8006258 <HAL_RCC_OscConfig+0x4ec>)
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d028      	beq.n	8006248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006200:	429a      	cmp	r2, r3
 8006202:	d121      	bne.n	8006248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800620e:	429a      	cmp	r2, r3
 8006210:	d11a      	bne.n	8006248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006218:	4013      	ands	r3, r2
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800621e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006220:	4293      	cmp	r3, r2
 8006222:	d111      	bne.n	8006248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622e:	085b      	lsrs	r3, r3, #1
 8006230:	3b01      	subs	r3, #1
 8006232:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006234:	429a      	cmp	r2, r3
 8006236:	d107      	bne.n	8006248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006242:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006244:	429a      	cmp	r2, r3
 8006246:	d001      	beq.n	800624c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e000      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3718      	adds	r7, #24
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	40023800 	.word	0x40023800

0800625c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e0cc      	b.n	800640a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006270:	4b68      	ldr	r3, [pc, #416]	; (8006414 <HAL_RCC_ClockConfig+0x1b8>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0307 	and.w	r3, r3, #7
 8006278:	683a      	ldr	r2, [r7, #0]
 800627a:	429a      	cmp	r2, r3
 800627c:	d90c      	bls.n	8006298 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800627e:	4b65      	ldr	r3, [pc, #404]	; (8006414 <HAL_RCC_ClockConfig+0x1b8>)
 8006280:	683a      	ldr	r2, [r7, #0]
 8006282:	b2d2      	uxtb	r2, r2
 8006284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006286:	4b63      	ldr	r3, [pc, #396]	; (8006414 <HAL_RCC_ClockConfig+0x1b8>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0307 	and.w	r3, r3, #7
 800628e:	683a      	ldr	r2, [r7, #0]
 8006290:	429a      	cmp	r2, r3
 8006292:	d001      	beq.n	8006298 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e0b8      	b.n	800640a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0302 	and.w	r3, r3, #2
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d020      	beq.n	80062e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d005      	beq.n	80062bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062b0:	4b59      	ldr	r3, [pc, #356]	; (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	4a58      	ldr	r2, [pc, #352]	; (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 80062b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80062ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0308 	and.w	r3, r3, #8
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d005      	beq.n	80062d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062c8:	4b53      	ldr	r3, [pc, #332]	; (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	4a52      	ldr	r2, [pc, #328]	; (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 80062ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80062d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062d4:	4b50      	ldr	r3, [pc, #320]	; (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	494d      	ldr	r1, [pc, #308]	; (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d044      	beq.n	800637c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d107      	bne.n	800630a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062fa:	4b47      	ldr	r3, [pc, #284]	; (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d119      	bne.n	800633a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e07f      	b.n	800640a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	2b02      	cmp	r3, #2
 8006310:	d003      	beq.n	800631a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006316:	2b03      	cmp	r3, #3
 8006318:	d107      	bne.n	800632a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800631a:	4b3f      	ldr	r3, [pc, #252]	; (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d109      	bne.n	800633a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e06f      	b.n	800640a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800632a:	4b3b      	ldr	r3, [pc, #236]	; (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0302 	and.w	r3, r3, #2
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e067      	b.n	800640a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800633a:	4b37      	ldr	r3, [pc, #220]	; (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f023 0203 	bic.w	r2, r3, #3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	4934      	ldr	r1, [pc, #208]	; (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 8006348:	4313      	orrs	r3, r2
 800634a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800634c:	f7fe f966 	bl	800461c <HAL_GetTick>
 8006350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006352:	e00a      	b.n	800636a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006354:	f7fe f962 	bl	800461c <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006362:	4293      	cmp	r3, r2
 8006364:	d901      	bls.n	800636a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e04f      	b.n	800640a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800636a:	4b2b      	ldr	r3, [pc, #172]	; (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f003 020c 	and.w	r2, r3, #12
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	429a      	cmp	r2, r3
 800637a:	d1eb      	bne.n	8006354 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800637c:	4b25      	ldr	r3, [pc, #148]	; (8006414 <HAL_RCC_ClockConfig+0x1b8>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0307 	and.w	r3, r3, #7
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	429a      	cmp	r2, r3
 8006388:	d20c      	bcs.n	80063a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800638a:	4b22      	ldr	r3, [pc, #136]	; (8006414 <HAL_RCC_ClockConfig+0x1b8>)
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	b2d2      	uxtb	r2, r2
 8006390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006392:	4b20      	ldr	r3, [pc, #128]	; (8006414 <HAL_RCC_ClockConfig+0x1b8>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0307 	and.w	r3, r3, #7
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	429a      	cmp	r2, r3
 800639e:	d001      	beq.n	80063a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e032      	b.n	800640a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0304 	and.w	r3, r3, #4
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d008      	beq.n	80063c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063b0:	4b19      	ldr	r3, [pc, #100]	; (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	4916      	ldr	r1, [pc, #88]	; (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0308 	and.w	r3, r3, #8
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d009      	beq.n	80063e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063ce:	4b12      	ldr	r3, [pc, #72]	; (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	00db      	lsls	r3, r3, #3
 80063dc:	490e      	ldr	r1, [pc, #56]	; (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80063e2:	f000 f821 	bl	8006428 <HAL_RCC_GetSysClockFreq>
 80063e6:	4602      	mov	r2, r0
 80063e8:	4b0b      	ldr	r3, [pc, #44]	; (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	091b      	lsrs	r3, r3, #4
 80063ee:	f003 030f 	and.w	r3, r3, #15
 80063f2:	490a      	ldr	r1, [pc, #40]	; (800641c <HAL_RCC_ClockConfig+0x1c0>)
 80063f4:	5ccb      	ldrb	r3, [r1, r3]
 80063f6:	fa22 f303 	lsr.w	r3, r2, r3
 80063fa:	4a09      	ldr	r2, [pc, #36]	; (8006420 <HAL_RCC_ClockConfig+0x1c4>)
 80063fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80063fe:	4b09      	ldr	r3, [pc, #36]	; (8006424 <HAL_RCC_ClockConfig+0x1c8>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4618      	mov	r0, r3
 8006404:	f7fe f8c6 	bl	8004594 <HAL_InitTick>

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	40023c00 	.word	0x40023c00
 8006418:	40023800 	.word	0x40023800
 800641c:	0800a36c 	.word	0x0800a36c
 8006420:	20000068 	.word	0x20000068
 8006424:	20000070 	.word	0x20000070

08006428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800642c:	b094      	sub	sp, #80	; 0x50
 800642e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	647b      	str	r3, [r7, #68]	; 0x44
 8006434:	2300      	movs	r3, #0
 8006436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006438:	2300      	movs	r3, #0
 800643a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800643c:	2300      	movs	r3, #0
 800643e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006440:	4b79      	ldr	r3, [pc, #484]	; (8006628 <HAL_RCC_GetSysClockFreq+0x200>)
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f003 030c 	and.w	r3, r3, #12
 8006448:	2b08      	cmp	r3, #8
 800644a:	d00d      	beq.n	8006468 <HAL_RCC_GetSysClockFreq+0x40>
 800644c:	2b08      	cmp	r3, #8
 800644e:	f200 80e1 	bhi.w	8006614 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <HAL_RCC_GetSysClockFreq+0x34>
 8006456:	2b04      	cmp	r3, #4
 8006458:	d003      	beq.n	8006462 <HAL_RCC_GetSysClockFreq+0x3a>
 800645a:	e0db      	b.n	8006614 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800645c:	4b73      	ldr	r3, [pc, #460]	; (800662c <HAL_RCC_GetSysClockFreq+0x204>)
 800645e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006460:	e0db      	b.n	800661a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006462:	4b73      	ldr	r3, [pc, #460]	; (8006630 <HAL_RCC_GetSysClockFreq+0x208>)
 8006464:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006466:	e0d8      	b.n	800661a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006468:	4b6f      	ldr	r3, [pc, #444]	; (8006628 <HAL_RCC_GetSysClockFreq+0x200>)
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006470:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006472:	4b6d      	ldr	r3, [pc, #436]	; (8006628 <HAL_RCC_GetSysClockFreq+0x200>)
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d063      	beq.n	8006546 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800647e:	4b6a      	ldr	r3, [pc, #424]	; (8006628 <HAL_RCC_GetSysClockFreq+0x200>)
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	099b      	lsrs	r3, r3, #6
 8006484:	2200      	movs	r2, #0
 8006486:	63bb      	str	r3, [r7, #56]	; 0x38
 8006488:	63fa      	str	r2, [r7, #60]	; 0x3c
 800648a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006490:	633b      	str	r3, [r7, #48]	; 0x30
 8006492:	2300      	movs	r3, #0
 8006494:	637b      	str	r3, [r7, #52]	; 0x34
 8006496:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800649a:	4622      	mov	r2, r4
 800649c:	462b      	mov	r3, r5
 800649e:	f04f 0000 	mov.w	r0, #0
 80064a2:	f04f 0100 	mov.w	r1, #0
 80064a6:	0159      	lsls	r1, r3, #5
 80064a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064ac:	0150      	lsls	r0, r2, #5
 80064ae:	4602      	mov	r2, r0
 80064b0:	460b      	mov	r3, r1
 80064b2:	4621      	mov	r1, r4
 80064b4:	1a51      	subs	r1, r2, r1
 80064b6:	6139      	str	r1, [r7, #16]
 80064b8:	4629      	mov	r1, r5
 80064ba:	eb63 0301 	sbc.w	r3, r3, r1
 80064be:	617b      	str	r3, [r7, #20]
 80064c0:	f04f 0200 	mov.w	r2, #0
 80064c4:	f04f 0300 	mov.w	r3, #0
 80064c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064cc:	4659      	mov	r1, fp
 80064ce:	018b      	lsls	r3, r1, #6
 80064d0:	4651      	mov	r1, sl
 80064d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064d6:	4651      	mov	r1, sl
 80064d8:	018a      	lsls	r2, r1, #6
 80064da:	4651      	mov	r1, sl
 80064dc:	ebb2 0801 	subs.w	r8, r2, r1
 80064e0:	4659      	mov	r1, fp
 80064e2:	eb63 0901 	sbc.w	r9, r3, r1
 80064e6:	f04f 0200 	mov.w	r2, #0
 80064ea:	f04f 0300 	mov.w	r3, #0
 80064ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064fa:	4690      	mov	r8, r2
 80064fc:	4699      	mov	r9, r3
 80064fe:	4623      	mov	r3, r4
 8006500:	eb18 0303 	adds.w	r3, r8, r3
 8006504:	60bb      	str	r3, [r7, #8]
 8006506:	462b      	mov	r3, r5
 8006508:	eb49 0303 	adc.w	r3, r9, r3
 800650c:	60fb      	str	r3, [r7, #12]
 800650e:	f04f 0200 	mov.w	r2, #0
 8006512:	f04f 0300 	mov.w	r3, #0
 8006516:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800651a:	4629      	mov	r1, r5
 800651c:	024b      	lsls	r3, r1, #9
 800651e:	4621      	mov	r1, r4
 8006520:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006524:	4621      	mov	r1, r4
 8006526:	024a      	lsls	r2, r1, #9
 8006528:	4610      	mov	r0, r2
 800652a:	4619      	mov	r1, r3
 800652c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800652e:	2200      	movs	r2, #0
 8006530:	62bb      	str	r3, [r7, #40]	; 0x28
 8006532:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006534:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006538:	f7fa fb4a 	bl	8000bd0 <__aeabi_uldivmod>
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	4613      	mov	r3, r2
 8006542:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006544:	e058      	b.n	80065f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006546:	4b38      	ldr	r3, [pc, #224]	; (8006628 <HAL_RCC_GetSysClockFreq+0x200>)
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	099b      	lsrs	r3, r3, #6
 800654c:	2200      	movs	r2, #0
 800654e:	4618      	mov	r0, r3
 8006550:	4611      	mov	r1, r2
 8006552:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006556:	623b      	str	r3, [r7, #32]
 8006558:	2300      	movs	r3, #0
 800655a:	627b      	str	r3, [r7, #36]	; 0x24
 800655c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006560:	4642      	mov	r2, r8
 8006562:	464b      	mov	r3, r9
 8006564:	f04f 0000 	mov.w	r0, #0
 8006568:	f04f 0100 	mov.w	r1, #0
 800656c:	0159      	lsls	r1, r3, #5
 800656e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006572:	0150      	lsls	r0, r2, #5
 8006574:	4602      	mov	r2, r0
 8006576:	460b      	mov	r3, r1
 8006578:	4641      	mov	r1, r8
 800657a:	ebb2 0a01 	subs.w	sl, r2, r1
 800657e:	4649      	mov	r1, r9
 8006580:	eb63 0b01 	sbc.w	fp, r3, r1
 8006584:	f04f 0200 	mov.w	r2, #0
 8006588:	f04f 0300 	mov.w	r3, #0
 800658c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006590:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006594:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006598:	ebb2 040a 	subs.w	r4, r2, sl
 800659c:	eb63 050b 	sbc.w	r5, r3, fp
 80065a0:	f04f 0200 	mov.w	r2, #0
 80065a4:	f04f 0300 	mov.w	r3, #0
 80065a8:	00eb      	lsls	r3, r5, #3
 80065aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065ae:	00e2      	lsls	r2, r4, #3
 80065b0:	4614      	mov	r4, r2
 80065b2:	461d      	mov	r5, r3
 80065b4:	4643      	mov	r3, r8
 80065b6:	18e3      	adds	r3, r4, r3
 80065b8:	603b      	str	r3, [r7, #0]
 80065ba:	464b      	mov	r3, r9
 80065bc:	eb45 0303 	adc.w	r3, r5, r3
 80065c0:	607b      	str	r3, [r7, #4]
 80065c2:	f04f 0200 	mov.w	r2, #0
 80065c6:	f04f 0300 	mov.w	r3, #0
 80065ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065ce:	4629      	mov	r1, r5
 80065d0:	028b      	lsls	r3, r1, #10
 80065d2:	4621      	mov	r1, r4
 80065d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065d8:	4621      	mov	r1, r4
 80065da:	028a      	lsls	r2, r1, #10
 80065dc:	4610      	mov	r0, r2
 80065de:	4619      	mov	r1, r3
 80065e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065e2:	2200      	movs	r2, #0
 80065e4:	61bb      	str	r3, [r7, #24]
 80065e6:	61fa      	str	r2, [r7, #28]
 80065e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065ec:	f7fa faf0 	bl	8000bd0 <__aeabi_uldivmod>
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	4613      	mov	r3, r2
 80065f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065f8:	4b0b      	ldr	r3, [pc, #44]	; (8006628 <HAL_RCC_GetSysClockFreq+0x200>)
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	0c1b      	lsrs	r3, r3, #16
 80065fe:	f003 0303 	and.w	r3, r3, #3
 8006602:	3301      	adds	r3, #1
 8006604:	005b      	lsls	r3, r3, #1
 8006606:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006608:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800660a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800660c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006610:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006612:	e002      	b.n	800661a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006614:	4b05      	ldr	r3, [pc, #20]	; (800662c <HAL_RCC_GetSysClockFreq+0x204>)
 8006616:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006618:	bf00      	nop
    }
  }
  return sysclockfreq;
 800661a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800661c:	4618      	mov	r0, r3
 800661e:	3750      	adds	r7, #80	; 0x50
 8006620:	46bd      	mov	sp, r7
 8006622:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006626:	bf00      	nop
 8006628:	40023800 	.word	0x40023800
 800662c:	00f42400 	.word	0x00f42400
 8006630:	007a1200 	.word	0x007a1200

08006634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006634:	b480      	push	{r7}
 8006636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006638:	4b03      	ldr	r3, [pc, #12]	; (8006648 <HAL_RCC_GetHCLKFreq+0x14>)
 800663a:	681b      	ldr	r3, [r3, #0]
}
 800663c:	4618      	mov	r0, r3
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	20000068 	.word	0x20000068

0800664c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006650:	f7ff fff0 	bl	8006634 <HAL_RCC_GetHCLKFreq>
 8006654:	4602      	mov	r2, r0
 8006656:	4b05      	ldr	r3, [pc, #20]	; (800666c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	0a9b      	lsrs	r3, r3, #10
 800665c:	f003 0307 	and.w	r3, r3, #7
 8006660:	4903      	ldr	r1, [pc, #12]	; (8006670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006662:	5ccb      	ldrb	r3, [r1, r3]
 8006664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006668:	4618      	mov	r0, r3
 800666a:	bd80      	pop	{r7, pc}
 800666c:	40023800 	.word	0x40023800
 8006670:	0800a37c 	.word	0x0800a37c

08006674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006678:	f7ff ffdc 	bl	8006634 <HAL_RCC_GetHCLKFreq>
 800667c:	4602      	mov	r2, r0
 800667e:	4b05      	ldr	r3, [pc, #20]	; (8006694 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	0b5b      	lsrs	r3, r3, #13
 8006684:	f003 0307 	and.w	r3, r3, #7
 8006688:	4903      	ldr	r1, [pc, #12]	; (8006698 <HAL_RCC_GetPCLK2Freq+0x24>)
 800668a:	5ccb      	ldrb	r3, [r1, r3]
 800668c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006690:	4618      	mov	r0, r3
 8006692:	bd80      	pop	{r7, pc}
 8006694:	40023800 	.word	0x40023800
 8006698:	0800a37c 	.word	0x0800a37c

0800669c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e07b      	b.n	80067a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d108      	bne.n	80066c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066be:	d009      	beq.n	80066d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	61da      	str	r2, [r3, #28]
 80066c6:	e005      	b.n	80066d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d106      	bne.n	80066f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7fd f908 	bl	8003904 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2202      	movs	r2, #2
 80066f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800670a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800671c:	431a      	orrs	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006726:	431a      	orrs	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	431a      	orrs	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	431a      	orrs	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006744:	431a      	orrs	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800674e:	431a      	orrs	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006758:	ea42 0103 	orr.w	r1, r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006760:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	430a      	orrs	r2, r1
 800676a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	0c1b      	lsrs	r3, r3, #16
 8006772:	f003 0104 	and.w	r1, r3, #4
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677a:	f003 0210 	and.w	r2, r3, #16
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	69da      	ldr	r2, [r3, #28]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006794:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b088      	sub	sp, #32
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	60f8      	str	r0, [r7, #12]
 80067b6:	60b9      	str	r1, [r7, #8]
 80067b8:	603b      	str	r3, [r7, #0]
 80067ba:	4613      	mov	r3, r2
 80067bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067be:	2300      	movs	r3, #0
 80067c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d101      	bne.n	80067d0 <HAL_SPI_Transmit+0x22>
 80067cc:	2302      	movs	r3, #2
 80067ce:	e126      	b.n	8006a1e <HAL_SPI_Transmit+0x270>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067d8:	f7fd ff20 	bl	800461c <HAL_GetTick>
 80067dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80067de:	88fb      	ldrh	r3, [r7, #6]
 80067e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d002      	beq.n	80067f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80067ee:	2302      	movs	r3, #2
 80067f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067f2:	e10b      	b.n	8006a0c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d002      	beq.n	8006800 <HAL_SPI_Transmit+0x52>
 80067fa:	88fb      	ldrh	r3, [r7, #6]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d102      	bne.n	8006806 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006804:	e102      	b.n	8006a0c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2203      	movs	r2, #3
 800680a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	88fa      	ldrh	r2, [r7, #6]
 800681e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	88fa      	ldrh	r2, [r7, #6]
 8006824:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800684c:	d10f      	bne.n	800686e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800685c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800686c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006878:	2b40      	cmp	r3, #64	; 0x40
 800687a:	d007      	beq.n	800688c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800688a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006894:	d14b      	bne.n	800692e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d002      	beq.n	80068a4 <HAL_SPI_Transmit+0xf6>
 800689e:	8afb      	ldrh	r3, [r7, #22]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d13e      	bne.n	8006922 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a8:	881a      	ldrh	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b4:	1c9a      	adds	r2, r3, #2
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068be:	b29b      	uxth	r3, r3
 80068c0:	3b01      	subs	r3, #1
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80068c8:	e02b      	b.n	8006922 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f003 0302 	and.w	r3, r3, #2
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d112      	bne.n	80068fe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068dc:	881a      	ldrh	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e8:	1c9a      	adds	r2, r3, #2
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	3b01      	subs	r3, #1
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80068fc:	e011      	b.n	8006922 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068fe:	f7fd fe8d 	bl	800461c <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	683a      	ldr	r2, [r7, #0]
 800690a:	429a      	cmp	r2, r3
 800690c:	d803      	bhi.n	8006916 <HAL_SPI_Transmit+0x168>
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006914:	d102      	bne.n	800691c <HAL_SPI_Transmit+0x16e>
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d102      	bne.n	8006922 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006920:	e074      	b.n	8006a0c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006926:	b29b      	uxth	r3, r3
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1ce      	bne.n	80068ca <HAL_SPI_Transmit+0x11c>
 800692c:	e04c      	b.n	80069c8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d002      	beq.n	800693c <HAL_SPI_Transmit+0x18e>
 8006936:	8afb      	ldrh	r3, [r7, #22]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d140      	bne.n	80069be <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	330c      	adds	r3, #12
 8006946:	7812      	ldrb	r2, [r2, #0]
 8006948:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694e:	1c5a      	adds	r2, r3, #1
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006958:	b29b      	uxth	r3, r3
 800695a:	3b01      	subs	r3, #1
 800695c:	b29a      	uxth	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006962:	e02c      	b.n	80069be <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f003 0302 	and.w	r3, r3, #2
 800696e:	2b02      	cmp	r3, #2
 8006970:	d113      	bne.n	800699a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	330c      	adds	r3, #12
 800697c:	7812      	ldrb	r2, [r2, #0]
 800697e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006984:	1c5a      	adds	r2, r3, #1
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800698e:	b29b      	uxth	r3, r3
 8006990:	3b01      	subs	r3, #1
 8006992:	b29a      	uxth	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	86da      	strh	r2, [r3, #54]	; 0x36
 8006998:	e011      	b.n	80069be <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800699a:	f7fd fe3f 	bl	800461c <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d803      	bhi.n	80069b2 <HAL_SPI_Transmit+0x204>
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b0:	d102      	bne.n	80069b8 <HAL_SPI_Transmit+0x20a>
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d102      	bne.n	80069be <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80069bc:	e026      	b.n	8006a0c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1cd      	bne.n	8006964 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	6839      	ldr	r1, [r7, #0]
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f000 fb2b 	bl	8007028 <SPI_EndRxTxTransaction>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d002      	beq.n	80069de <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2220      	movs	r2, #32
 80069dc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10a      	bne.n	80069fc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069e6:	2300      	movs	r3, #0
 80069e8:	613b      	str	r3, [r7, #16]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	613b      	str	r3, [r7, #16]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	613b      	str	r3, [r7, #16]
 80069fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d002      	beq.n	8006a0a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	77fb      	strb	r3, [r7, #31]
 8006a08:	e000      	b.n	8006a0c <HAL_SPI_Transmit+0x25e>
  }

error:
 8006a0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3720      	adds	r7, #32
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
	...

08006a28 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	4613      	mov	r3, r2
 8006a34:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a36:	2300      	movs	r3, #0
 8006a38:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d101      	bne.n	8006a48 <HAL_SPI_Transmit_DMA+0x20>
 8006a44:	2302      	movs	r3, #2
 8006a46:	e09b      	b.n	8006b80 <HAL_SPI_Transmit_DMA+0x158>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d002      	beq.n	8006a62 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a60:	e089      	b.n	8006b76 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <HAL_SPI_Transmit_DMA+0x46>
 8006a68:	88fb      	ldrh	r3, [r7, #6]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d102      	bne.n	8006a74 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a72:	e080      	b.n	8006b76 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2203      	movs	r2, #3
 8006a78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	88fa      	ldrh	r2, [r7, #6]
 8006a8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	88fa      	ldrh	r2, [r7, #6]
 8006a92:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aba:	d10f      	bne.n	8006adc <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ada:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ae0:	4a29      	ldr	r2, [pc, #164]	; (8006b88 <HAL_SPI_Transmit_DMA+0x160>)
 8006ae2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ae8:	4a28      	ldr	r2, [pc, #160]	; (8006b8c <HAL_SPI_Transmit_DMA+0x164>)
 8006aea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006af0:	4a27      	ldr	r2, [pc, #156]	; (8006b90 <HAL_SPI_Transmit_DMA+0x168>)
 8006af2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006af8:	2200      	movs	r2, #0
 8006afa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b04:	4619      	mov	r1, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	330c      	adds	r3, #12
 8006b0c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b12:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006b14:	f7fe fbca 	bl	80052ac <HAL_DMA_Start_IT>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00c      	beq.n	8006b38 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b22:	f043 0210 	orr.w	r2, r3, #16
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006b36:	e01e      	b.n	8006b76 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b42:	2b40      	cmp	r3, #64	; 0x40
 8006b44:	d007      	beq.n	8006b56 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b54:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f042 0220 	orr.w	r2, r2, #32
 8006b64:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f042 0202 	orr.w	r2, r2, #2
 8006b74:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3718      	adds	r7, #24
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	08006e95 	.word	0x08006e95
 8006b8c:	08006ded 	.word	0x08006ded
 8006b90:	08006eb1 	.word	0x08006eb1

08006b94 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b088      	sub	sp, #32
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	099b      	lsrs	r3, r3, #6
 8006bb0:	f003 0301 	and.w	r3, r3, #1
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10f      	bne.n	8006bd8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00a      	beq.n	8006bd8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	099b      	lsrs	r3, r3, #6
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d004      	beq.n	8006bd8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	4798      	blx	r3
    return;
 8006bd6:	e0d7      	b.n	8006d88 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	085b      	lsrs	r3, r3, #1
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00a      	beq.n	8006bfa <HAL_SPI_IRQHandler+0x66>
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	09db      	lsrs	r3, r3, #7
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d004      	beq.n	8006bfa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	4798      	blx	r3
    return;
 8006bf8:	e0c6      	b.n	8006d88 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	095b      	lsrs	r3, r3, #5
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10c      	bne.n	8006c20 <HAL_SPI_IRQHandler+0x8c>
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	099b      	lsrs	r3, r3, #6
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d106      	bne.n	8006c20 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	0a1b      	lsrs	r3, r3, #8
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f000 80b4 	beq.w	8006d88 <HAL_SPI_IRQHandler+0x1f4>
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	095b      	lsrs	r3, r3, #5
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 80ad 	beq.w	8006d88 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	099b      	lsrs	r3, r3, #6
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d023      	beq.n	8006c82 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b03      	cmp	r3, #3
 8006c44:	d011      	beq.n	8006c6a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c4a:	f043 0204 	orr.w	r2, r3, #4
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c52:	2300      	movs	r3, #0
 8006c54:	617b      	str	r3, [r7, #20]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	617b      	str	r3, [r7, #20]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	617b      	str	r3, [r7, #20]
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	e00b      	b.n	8006c82 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	613b      	str	r3, [r7, #16]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	613b      	str	r3, [r7, #16]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	613b      	str	r3, [r7, #16]
 8006c7e:	693b      	ldr	r3, [r7, #16]
        return;
 8006c80:	e082      	b.n	8006d88 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	095b      	lsrs	r3, r3, #5
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d014      	beq.n	8006cb8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c92:	f043 0201 	orr.w	r2, r3, #1
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60fb      	str	r3, [r7, #12]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	60fb      	str	r3, [r7, #12]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cb4:	601a      	str	r2, [r3, #0]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	0a1b      	lsrs	r3, r3, #8
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00c      	beq.n	8006cde <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc8:	f043 0208 	orr.w	r2, r3, #8
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	60bb      	str	r3, [r7, #8]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	60bb      	str	r3, [r7, #8]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d04f      	beq.n	8006d86 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006cf4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	f003 0302 	and.w	r3, r3, #2
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d104      	bne.n	8006d12 <HAL_SPI_IRQHandler+0x17e>
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d034      	beq.n	8006d7c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f022 0203 	bic.w	r2, r2, #3
 8006d20:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d011      	beq.n	8006d4e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d2e:	4a18      	ldr	r2, [pc, #96]	; (8006d90 <HAL_SPI_IRQHandler+0x1fc>)
 8006d30:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7fe fb80 	bl	800543c <HAL_DMA_Abort_IT>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d005      	beq.n	8006d4e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d016      	beq.n	8006d84 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d5a:	4a0d      	ldr	r2, [pc, #52]	; (8006d90 <HAL_SPI_IRQHandler+0x1fc>)
 8006d5c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7fe fb6a 	bl	800543c <HAL_DMA_Abort_IT>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00a      	beq.n	8006d84 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006d7a:	e003      	b.n	8006d84 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 f81d 	bl	8006dbc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006d82:	e000      	b.n	8006d86 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006d84:	bf00      	nop
    return;
 8006d86:	bf00      	nop
  }
}
 8006d88:	3720      	adds	r7, #32
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	08006ef1 	.word	0x08006ef1

08006d94 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006dde:	b2db      	uxtb	r3, r3
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b086      	sub	sp, #24
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006dfa:	f7fd fc0f 	bl	800461c <HAL_GetTick>
 8006dfe:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e0e:	d03b      	beq.n	8006e88 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 0220 	bic.w	r2, r2, #32
 8006e1e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 0202 	bic.w	r2, r2, #2
 8006e2e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006e30:	693a      	ldr	r2, [r7, #16]
 8006e32:	2164      	movs	r1, #100	; 0x64
 8006e34:	6978      	ldr	r0, [r7, #20]
 8006e36:	f000 f8f7 	bl	8007028 <SPI_EndRxTxTransaction>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d005      	beq.n	8006e4c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e44:	f043 0220 	orr.w	r2, r3, #32
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10a      	bne.n	8006e6a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e54:	2300      	movs	r3, #0
 8006e56:	60fb      	str	r3, [r7, #12]
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	60fb      	str	r3, [r7, #12]
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d003      	beq.n	8006e88 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006e80:	6978      	ldr	r0, [r7, #20]
 8006e82:	f7ff ff9b 	bl	8006dbc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006e86:	e002      	b.n	8006e8e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006e88:	6978      	ldr	r0, [r7, #20]
 8006e8a:	f7ff ff83 	bl	8006d94 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e8e:	3718      	adds	r7, #24
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f7ff ff80 	bl	8006da8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ea8:	bf00      	nop
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ebc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	685a      	ldr	r2, [r3, #4]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f022 0203 	bic.w	r2, r2, #3
 8006ecc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed2:	f043 0210 	orr.w	r2, r3, #16
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f7ff ff6a 	bl	8006dbc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ee8:	bf00      	nop
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006f0a:	68f8      	ldr	r0, [r7, #12]
 8006f0c:	f7ff ff56 	bl	8006dbc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f10:	bf00      	nop
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b088      	sub	sp, #32
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	603b      	str	r3, [r7, #0]
 8006f24:	4613      	mov	r3, r2
 8006f26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f28:	f7fd fb78 	bl	800461c <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f30:	1a9b      	subs	r3, r3, r2
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	4413      	add	r3, r2
 8006f36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f38:	f7fd fb70 	bl	800461c <HAL_GetTick>
 8006f3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f3e:	4b39      	ldr	r3, [pc, #228]	; (8007024 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	015b      	lsls	r3, r3, #5
 8006f44:	0d1b      	lsrs	r3, r3, #20
 8006f46:	69fa      	ldr	r2, [r7, #28]
 8006f48:	fb02 f303 	mul.w	r3, r2, r3
 8006f4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f4e:	e054      	b.n	8006ffa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f56:	d050      	beq.n	8006ffa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f58:	f7fd fb60 	bl	800461c <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	69fa      	ldr	r2, [r7, #28]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d902      	bls.n	8006f6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d13d      	bne.n	8006fea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f86:	d111      	bne.n	8006fac <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f90:	d004      	beq.n	8006f9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f9a:	d107      	bne.n	8006fac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006faa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fb4:	d10f      	bne.n	8006fd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fc4:	601a      	str	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e017      	b.n	800701a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d101      	bne.n	8006ff4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	689a      	ldr	r2, [r3, #8]
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	4013      	ands	r3, r2
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	429a      	cmp	r2, r3
 8007008:	bf0c      	ite	eq
 800700a:	2301      	moveq	r3, #1
 800700c:	2300      	movne	r3, #0
 800700e:	b2db      	uxtb	r3, r3
 8007010:	461a      	mov	r2, r3
 8007012:	79fb      	ldrb	r3, [r7, #7]
 8007014:	429a      	cmp	r2, r3
 8007016:	d19b      	bne.n	8006f50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3720      	adds	r7, #32
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	20000068 	.word	0x20000068

08007028 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b088      	sub	sp, #32
 800702c:	af02      	add	r7, sp, #8
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007034:	4b1b      	ldr	r3, [pc, #108]	; (80070a4 <SPI_EndRxTxTransaction+0x7c>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a1b      	ldr	r2, [pc, #108]	; (80070a8 <SPI_EndRxTxTransaction+0x80>)
 800703a:	fba2 2303 	umull	r2, r3, r2, r3
 800703e:	0d5b      	lsrs	r3, r3, #21
 8007040:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007044:	fb02 f303 	mul.w	r3, r2, r3
 8007048:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007052:	d112      	bne.n	800707a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	2200      	movs	r2, #0
 800705c:	2180      	movs	r1, #128	; 0x80
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f7ff ff5a 	bl	8006f18 <SPI_WaitFlagStateUntilTimeout>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d016      	beq.n	8007098 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800706e:	f043 0220 	orr.w	r2, r3, #32
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e00f      	b.n	800709a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00a      	beq.n	8007096 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	3b01      	subs	r3, #1
 8007084:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007090:	2b80      	cmp	r3, #128	; 0x80
 8007092:	d0f2      	beq.n	800707a <SPI_EndRxTxTransaction+0x52>
 8007094:	e000      	b.n	8007098 <SPI_EndRxTxTransaction+0x70>
        break;
 8007096:	bf00      	nop
  }

  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3718      	adds	r7, #24
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	20000068 	.word	0x20000068
 80070a8:	165e9f81 	.word	0x165e9f81

080070ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e041      	b.n	8007142 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d106      	bne.n	80070d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7fc fdb6 	bl	8003c44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2202      	movs	r2, #2
 80070dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	3304      	adds	r3, #4
 80070e8:	4619      	mov	r1, r3
 80070ea:	4610      	mov	r0, r2
 80070ec:	f000 fc12 	bl	8007914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b082      	sub	sp, #8
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d101      	bne.n	800715c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e041      	b.n	80071e0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b00      	cmp	r3, #0
 8007166:	d106      	bne.n	8007176 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f839 	bl	80071e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2202      	movs	r2, #2
 800717a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	3304      	adds	r3, #4
 8007186:	4619      	mov	r1, r3
 8007188:	4610      	mov	r0, r2
 800718a:	f000 fbc3 	bl	8007914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d109      	bne.n	8007220 <HAL_TIM_PWM_Start+0x24>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b01      	cmp	r3, #1
 8007216:	bf14      	ite	ne
 8007218:	2301      	movne	r3, #1
 800721a:	2300      	moveq	r3, #0
 800721c:	b2db      	uxtb	r3, r3
 800721e:	e022      	b.n	8007266 <HAL_TIM_PWM_Start+0x6a>
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	2b04      	cmp	r3, #4
 8007224:	d109      	bne.n	800723a <HAL_TIM_PWM_Start+0x3e>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b01      	cmp	r3, #1
 8007230:	bf14      	ite	ne
 8007232:	2301      	movne	r3, #1
 8007234:	2300      	moveq	r3, #0
 8007236:	b2db      	uxtb	r3, r3
 8007238:	e015      	b.n	8007266 <HAL_TIM_PWM_Start+0x6a>
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2b08      	cmp	r3, #8
 800723e:	d109      	bne.n	8007254 <HAL_TIM_PWM_Start+0x58>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b01      	cmp	r3, #1
 800724a:	bf14      	ite	ne
 800724c:	2301      	movne	r3, #1
 800724e:	2300      	moveq	r3, #0
 8007250:	b2db      	uxtb	r3, r3
 8007252:	e008      	b.n	8007266 <HAL_TIM_PWM_Start+0x6a>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800725a:	b2db      	uxtb	r3, r3
 800725c:	2b01      	cmp	r3, #1
 800725e:	bf14      	ite	ne
 8007260:	2301      	movne	r3, #1
 8007262:	2300      	moveq	r3, #0
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	d001      	beq.n	800726e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e07c      	b.n	8007368 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d104      	bne.n	800727e <HAL_TIM_PWM_Start+0x82>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2202      	movs	r2, #2
 8007278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800727c:	e013      	b.n	80072a6 <HAL_TIM_PWM_Start+0xaa>
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	2b04      	cmp	r3, #4
 8007282:	d104      	bne.n	800728e <HAL_TIM_PWM_Start+0x92>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2202      	movs	r2, #2
 8007288:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800728c:	e00b      	b.n	80072a6 <HAL_TIM_PWM_Start+0xaa>
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	2b08      	cmp	r3, #8
 8007292:	d104      	bne.n	800729e <HAL_TIM_PWM_Start+0xa2>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2202      	movs	r2, #2
 8007298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800729c:	e003      	b.n	80072a6 <HAL_TIM_PWM_Start+0xaa>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2202      	movs	r2, #2
 80072a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2201      	movs	r2, #1
 80072ac:	6839      	ldr	r1, [r7, #0]
 80072ae:	4618      	mov	r0, r3
 80072b0:	f000 fe1a 	bl	8007ee8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a2d      	ldr	r2, [pc, #180]	; (8007370 <HAL_TIM_PWM_Start+0x174>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d004      	beq.n	80072c8 <HAL_TIM_PWM_Start+0xcc>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a2c      	ldr	r2, [pc, #176]	; (8007374 <HAL_TIM_PWM_Start+0x178>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d101      	bne.n	80072cc <HAL_TIM_PWM_Start+0xd0>
 80072c8:	2301      	movs	r3, #1
 80072ca:	e000      	b.n	80072ce <HAL_TIM_PWM_Start+0xd2>
 80072cc:	2300      	movs	r3, #0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d007      	beq.n	80072e2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a22      	ldr	r2, [pc, #136]	; (8007370 <HAL_TIM_PWM_Start+0x174>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d022      	beq.n	8007332 <HAL_TIM_PWM_Start+0x136>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072f4:	d01d      	beq.n	8007332 <HAL_TIM_PWM_Start+0x136>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a1f      	ldr	r2, [pc, #124]	; (8007378 <HAL_TIM_PWM_Start+0x17c>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d018      	beq.n	8007332 <HAL_TIM_PWM_Start+0x136>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a1d      	ldr	r2, [pc, #116]	; (800737c <HAL_TIM_PWM_Start+0x180>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d013      	beq.n	8007332 <HAL_TIM_PWM_Start+0x136>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a1c      	ldr	r2, [pc, #112]	; (8007380 <HAL_TIM_PWM_Start+0x184>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d00e      	beq.n	8007332 <HAL_TIM_PWM_Start+0x136>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a16      	ldr	r2, [pc, #88]	; (8007374 <HAL_TIM_PWM_Start+0x178>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d009      	beq.n	8007332 <HAL_TIM_PWM_Start+0x136>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a18      	ldr	r2, [pc, #96]	; (8007384 <HAL_TIM_PWM_Start+0x188>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d004      	beq.n	8007332 <HAL_TIM_PWM_Start+0x136>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a16      	ldr	r2, [pc, #88]	; (8007388 <HAL_TIM_PWM_Start+0x18c>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d111      	bne.n	8007356 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f003 0307 	and.w	r3, r3, #7
 800733c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2b06      	cmp	r3, #6
 8007342:	d010      	beq.n	8007366 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f042 0201 	orr.w	r2, r2, #1
 8007352:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007354:	e007      	b.n	8007366 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f042 0201 	orr.w	r2, r2, #1
 8007364:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	40010000 	.word	0x40010000
 8007374:	40010400 	.word	0x40010400
 8007378:	40000400 	.word	0x40000400
 800737c:	40000800 	.word	0x40000800
 8007380:	40000c00 	.word	0x40000c00
 8007384:	40014000 	.word	0x40014000
 8007388:	40001800 	.word	0x40001800

0800738c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	f003 0302 	and.w	r3, r3, #2
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d122      	bne.n	80073e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	f003 0302 	and.w	r3, r3, #2
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d11b      	bne.n	80073e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f06f 0202 	mvn.w	r2, #2
 80073b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	f003 0303 	and.w	r3, r3, #3
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d003      	beq.n	80073d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fa81 	bl	80078d6 <HAL_TIM_IC_CaptureCallback>
 80073d4:	e005      	b.n	80073e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 fa73 	bl	80078c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fa84 	bl	80078ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	f003 0304 	and.w	r3, r3, #4
 80073f2:	2b04      	cmp	r3, #4
 80073f4:	d122      	bne.n	800743c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	f003 0304 	and.w	r3, r3, #4
 8007400:	2b04      	cmp	r3, #4
 8007402:	d11b      	bne.n	800743c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f06f 0204 	mvn.w	r2, #4
 800740c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2202      	movs	r2, #2
 8007412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	699b      	ldr	r3, [r3, #24]
 800741a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800741e:	2b00      	cmp	r3, #0
 8007420:	d003      	beq.n	800742a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fa57 	bl	80078d6 <HAL_TIM_IC_CaptureCallback>
 8007428:	e005      	b.n	8007436 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 fa49 	bl	80078c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fa5a 	bl	80078ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	f003 0308 	and.w	r3, r3, #8
 8007446:	2b08      	cmp	r3, #8
 8007448:	d122      	bne.n	8007490 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	f003 0308 	and.w	r3, r3, #8
 8007454:	2b08      	cmp	r3, #8
 8007456:	d11b      	bne.n	8007490 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f06f 0208 	mvn.w	r2, #8
 8007460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2204      	movs	r2, #4
 8007466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	f003 0303 	and.w	r3, r3, #3
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fa2d 	bl	80078d6 <HAL_TIM_IC_CaptureCallback>
 800747c:	e005      	b.n	800748a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fa1f 	bl	80078c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fa30 	bl	80078ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	f003 0310 	and.w	r3, r3, #16
 800749a:	2b10      	cmp	r3, #16
 800749c:	d122      	bne.n	80074e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	f003 0310 	and.w	r3, r3, #16
 80074a8:	2b10      	cmp	r3, #16
 80074aa:	d11b      	bne.n	80074e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f06f 0210 	mvn.w	r2, #16
 80074b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2208      	movs	r2, #8
 80074ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	69db      	ldr	r3, [r3, #28]
 80074c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d003      	beq.n	80074d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fa03 	bl	80078d6 <HAL_TIM_IC_CaptureCallback>
 80074d0:	e005      	b.n	80074de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f9f5 	bl	80078c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fa06 	bl	80078ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	f003 0301 	and.w	r3, r3, #1
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d10e      	bne.n	8007510 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	f003 0301 	and.w	r3, r3, #1
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d107      	bne.n	8007510 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f06f 0201 	mvn.w	r2, #1
 8007508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f9cf 	bl	80078ae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800751a:	2b80      	cmp	r3, #128	; 0x80
 800751c:	d10e      	bne.n	800753c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007528:	2b80      	cmp	r3, #128	; 0x80
 800752a:	d107      	bne.n	800753c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fd82 	bl	8008040 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007546:	2b40      	cmp	r3, #64	; 0x40
 8007548:	d10e      	bne.n	8007568 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007554:	2b40      	cmp	r3, #64	; 0x40
 8007556:	d107      	bne.n	8007568 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f9cb 	bl	80078fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	f003 0320 	and.w	r3, r3, #32
 8007572:	2b20      	cmp	r3, #32
 8007574:	d10e      	bne.n	8007594 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	f003 0320 	and.w	r3, r3, #32
 8007580:	2b20      	cmp	r3, #32
 8007582:	d107      	bne.n	8007594 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f06f 0220 	mvn.w	r2, #32
 800758c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 fd4c 	bl	800802c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007594:	bf00      	nop
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b086      	sub	sp, #24
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075a8:	2300      	movs	r3, #0
 80075aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d101      	bne.n	80075ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80075b6:	2302      	movs	r3, #2
 80075b8:	e0ae      	b.n	8007718 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b0c      	cmp	r3, #12
 80075c6:	f200 809f 	bhi.w	8007708 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80075ca:	a201      	add	r2, pc, #4	; (adr r2, 80075d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80075cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d0:	08007605 	.word	0x08007605
 80075d4:	08007709 	.word	0x08007709
 80075d8:	08007709 	.word	0x08007709
 80075dc:	08007709 	.word	0x08007709
 80075e0:	08007645 	.word	0x08007645
 80075e4:	08007709 	.word	0x08007709
 80075e8:	08007709 	.word	0x08007709
 80075ec:	08007709 	.word	0x08007709
 80075f0:	08007687 	.word	0x08007687
 80075f4:	08007709 	.word	0x08007709
 80075f8:	08007709 	.word	0x08007709
 80075fc:	08007709 	.word	0x08007709
 8007600:	080076c7 	.word	0x080076c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68b9      	ldr	r1, [r7, #8]
 800760a:	4618      	mov	r0, r3
 800760c:	f000 fa22 	bl	8007a54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	699a      	ldr	r2, [r3, #24]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f042 0208 	orr.w	r2, r2, #8
 800761e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	699a      	ldr	r2, [r3, #24]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f022 0204 	bic.w	r2, r2, #4
 800762e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6999      	ldr	r1, [r3, #24]
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	691a      	ldr	r2, [r3, #16]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	430a      	orrs	r2, r1
 8007640:	619a      	str	r2, [r3, #24]
      break;
 8007642:	e064      	b.n	800770e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68b9      	ldr	r1, [r7, #8]
 800764a:	4618      	mov	r0, r3
 800764c:	f000 fa72 	bl	8007b34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	699a      	ldr	r2, [r3, #24]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800765e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	699a      	ldr	r2, [r3, #24]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800766e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	6999      	ldr	r1, [r3, #24]
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	021a      	lsls	r2, r3, #8
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	430a      	orrs	r2, r1
 8007682:	619a      	str	r2, [r3, #24]
      break;
 8007684:	e043      	b.n	800770e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68b9      	ldr	r1, [r7, #8]
 800768c:	4618      	mov	r0, r3
 800768e:	f000 fac7 	bl	8007c20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	69da      	ldr	r2, [r3, #28]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f042 0208 	orr.w	r2, r2, #8
 80076a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	69da      	ldr	r2, [r3, #28]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f022 0204 	bic.w	r2, r2, #4
 80076b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	69d9      	ldr	r1, [r3, #28]
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	691a      	ldr	r2, [r3, #16]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	430a      	orrs	r2, r1
 80076c2:	61da      	str	r2, [r3, #28]
      break;
 80076c4:	e023      	b.n	800770e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68b9      	ldr	r1, [r7, #8]
 80076cc:	4618      	mov	r0, r3
 80076ce:	f000 fb1b 	bl	8007d08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	69da      	ldr	r2, [r3, #28]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	69da      	ldr	r2, [r3, #28]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	69d9      	ldr	r1, [r3, #28]
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	021a      	lsls	r2, r3, #8
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	430a      	orrs	r2, r1
 8007704:	61da      	str	r2, [r3, #28]
      break;
 8007706:	e002      	b.n	800770e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	75fb      	strb	r3, [r7, #23]
      break;
 800770c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007716:	7dfb      	ldrb	r3, [r7, #23]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3718      	adds	r7, #24
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007734:	2b01      	cmp	r3, #1
 8007736:	d101      	bne.n	800773c <HAL_TIM_ConfigClockSource+0x1c>
 8007738:	2302      	movs	r3, #2
 800773a:	e0b4      	b.n	80078a6 <HAL_TIM_ConfigClockSource+0x186>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2202      	movs	r2, #2
 8007748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800775a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007762:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007774:	d03e      	beq.n	80077f4 <HAL_TIM_ConfigClockSource+0xd4>
 8007776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800777a:	f200 8087 	bhi.w	800788c <HAL_TIM_ConfigClockSource+0x16c>
 800777e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007782:	f000 8086 	beq.w	8007892 <HAL_TIM_ConfigClockSource+0x172>
 8007786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800778a:	d87f      	bhi.n	800788c <HAL_TIM_ConfigClockSource+0x16c>
 800778c:	2b70      	cmp	r3, #112	; 0x70
 800778e:	d01a      	beq.n	80077c6 <HAL_TIM_ConfigClockSource+0xa6>
 8007790:	2b70      	cmp	r3, #112	; 0x70
 8007792:	d87b      	bhi.n	800788c <HAL_TIM_ConfigClockSource+0x16c>
 8007794:	2b60      	cmp	r3, #96	; 0x60
 8007796:	d050      	beq.n	800783a <HAL_TIM_ConfigClockSource+0x11a>
 8007798:	2b60      	cmp	r3, #96	; 0x60
 800779a:	d877      	bhi.n	800788c <HAL_TIM_ConfigClockSource+0x16c>
 800779c:	2b50      	cmp	r3, #80	; 0x50
 800779e:	d03c      	beq.n	800781a <HAL_TIM_ConfigClockSource+0xfa>
 80077a0:	2b50      	cmp	r3, #80	; 0x50
 80077a2:	d873      	bhi.n	800788c <HAL_TIM_ConfigClockSource+0x16c>
 80077a4:	2b40      	cmp	r3, #64	; 0x40
 80077a6:	d058      	beq.n	800785a <HAL_TIM_ConfigClockSource+0x13a>
 80077a8:	2b40      	cmp	r3, #64	; 0x40
 80077aa:	d86f      	bhi.n	800788c <HAL_TIM_ConfigClockSource+0x16c>
 80077ac:	2b30      	cmp	r3, #48	; 0x30
 80077ae:	d064      	beq.n	800787a <HAL_TIM_ConfigClockSource+0x15a>
 80077b0:	2b30      	cmp	r3, #48	; 0x30
 80077b2:	d86b      	bhi.n	800788c <HAL_TIM_ConfigClockSource+0x16c>
 80077b4:	2b20      	cmp	r3, #32
 80077b6:	d060      	beq.n	800787a <HAL_TIM_ConfigClockSource+0x15a>
 80077b8:	2b20      	cmp	r3, #32
 80077ba:	d867      	bhi.n	800788c <HAL_TIM_ConfigClockSource+0x16c>
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d05c      	beq.n	800787a <HAL_TIM_ConfigClockSource+0x15a>
 80077c0:	2b10      	cmp	r3, #16
 80077c2:	d05a      	beq.n	800787a <HAL_TIM_ConfigClockSource+0x15a>
 80077c4:	e062      	b.n	800788c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6818      	ldr	r0, [r3, #0]
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	6899      	ldr	r1, [r3, #8]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	685a      	ldr	r2, [r3, #4]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	f000 fb67 	bl	8007ea8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80077e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	609a      	str	r2, [r3, #8]
      break;
 80077f2:	e04f      	b.n	8007894 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6818      	ldr	r0, [r3, #0]
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	6899      	ldr	r1, [r3, #8]
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	685a      	ldr	r2, [r3, #4]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	f000 fb50 	bl	8007ea8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689a      	ldr	r2, [r3, #8]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007816:	609a      	str	r2, [r3, #8]
      break;
 8007818:	e03c      	b.n	8007894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6818      	ldr	r0, [r3, #0]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	6859      	ldr	r1, [r3, #4]
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	461a      	mov	r2, r3
 8007828:	f000 fac4 	bl	8007db4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2150      	movs	r1, #80	; 0x50
 8007832:	4618      	mov	r0, r3
 8007834:	f000 fb1d 	bl	8007e72 <TIM_ITRx_SetConfig>
      break;
 8007838:	e02c      	b.n	8007894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6818      	ldr	r0, [r3, #0]
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	6859      	ldr	r1, [r3, #4]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	461a      	mov	r2, r3
 8007848:	f000 fae3 	bl	8007e12 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2160      	movs	r1, #96	; 0x60
 8007852:	4618      	mov	r0, r3
 8007854:	f000 fb0d 	bl	8007e72 <TIM_ITRx_SetConfig>
      break;
 8007858:	e01c      	b.n	8007894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6818      	ldr	r0, [r3, #0]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	6859      	ldr	r1, [r3, #4]
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	461a      	mov	r2, r3
 8007868:	f000 faa4 	bl	8007db4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2140      	movs	r1, #64	; 0x40
 8007872:	4618      	mov	r0, r3
 8007874:	f000 fafd 	bl	8007e72 <TIM_ITRx_SetConfig>
      break;
 8007878:	e00c      	b.n	8007894 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4619      	mov	r1, r3
 8007884:	4610      	mov	r0, r2
 8007886:	f000 faf4 	bl	8007e72 <TIM_ITRx_SetConfig>
      break;
 800788a:	e003      	b.n	8007894 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	73fb      	strb	r3, [r7, #15]
      break;
 8007890:	e000      	b.n	8007894 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007892:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b083      	sub	sp, #12
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80078b6:	bf00      	nop
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b083      	sub	sp, #12
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078ca:	bf00      	nop
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b083      	sub	sp, #12
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078de:	bf00      	nop
 80078e0:	370c      	adds	r7, #12
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr

080078ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078ea:	b480      	push	{r7}
 80078ec:	b083      	sub	sp, #12
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078f2:	bf00      	nop
 80078f4:	370c      	adds	r7, #12
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr

080078fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078fe:	b480      	push	{r7}
 8007900:	b083      	sub	sp, #12
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007906:	bf00      	nop
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
	...

08007914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a40      	ldr	r2, [pc, #256]	; (8007a28 <TIM_Base_SetConfig+0x114>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d013      	beq.n	8007954 <TIM_Base_SetConfig+0x40>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007932:	d00f      	beq.n	8007954 <TIM_Base_SetConfig+0x40>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a3d      	ldr	r2, [pc, #244]	; (8007a2c <TIM_Base_SetConfig+0x118>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d00b      	beq.n	8007954 <TIM_Base_SetConfig+0x40>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a3c      	ldr	r2, [pc, #240]	; (8007a30 <TIM_Base_SetConfig+0x11c>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d007      	beq.n	8007954 <TIM_Base_SetConfig+0x40>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a3b      	ldr	r2, [pc, #236]	; (8007a34 <TIM_Base_SetConfig+0x120>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d003      	beq.n	8007954 <TIM_Base_SetConfig+0x40>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a3a      	ldr	r2, [pc, #232]	; (8007a38 <TIM_Base_SetConfig+0x124>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d108      	bne.n	8007966 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800795a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	4313      	orrs	r3, r2
 8007964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a2f      	ldr	r2, [pc, #188]	; (8007a28 <TIM_Base_SetConfig+0x114>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d02b      	beq.n	80079c6 <TIM_Base_SetConfig+0xb2>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007974:	d027      	beq.n	80079c6 <TIM_Base_SetConfig+0xb2>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a2c      	ldr	r2, [pc, #176]	; (8007a2c <TIM_Base_SetConfig+0x118>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d023      	beq.n	80079c6 <TIM_Base_SetConfig+0xb2>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a2b      	ldr	r2, [pc, #172]	; (8007a30 <TIM_Base_SetConfig+0x11c>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d01f      	beq.n	80079c6 <TIM_Base_SetConfig+0xb2>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a2a      	ldr	r2, [pc, #168]	; (8007a34 <TIM_Base_SetConfig+0x120>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d01b      	beq.n	80079c6 <TIM_Base_SetConfig+0xb2>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a29      	ldr	r2, [pc, #164]	; (8007a38 <TIM_Base_SetConfig+0x124>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d017      	beq.n	80079c6 <TIM_Base_SetConfig+0xb2>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a28      	ldr	r2, [pc, #160]	; (8007a3c <TIM_Base_SetConfig+0x128>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d013      	beq.n	80079c6 <TIM_Base_SetConfig+0xb2>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a27      	ldr	r2, [pc, #156]	; (8007a40 <TIM_Base_SetConfig+0x12c>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d00f      	beq.n	80079c6 <TIM_Base_SetConfig+0xb2>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a26      	ldr	r2, [pc, #152]	; (8007a44 <TIM_Base_SetConfig+0x130>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d00b      	beq.n	80079c6 <TIM_Base_SetConfig+0xb2>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a25      	ldr	r2, [pc, #148]	; (8007a48 <TIM_Base_SetConfig+0x134>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d007      	beq.n	80079c6 <TIM_Base_SetConfig+0xb2>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a24      	ldr	r2, [pc, #144]	; (8007a4c <TIM_Base_SetConfig+0x138>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d003      	beq.n	80079c6 <TIM_Base_SetConfig+0xb2>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a23      	ldr	r2, [pc, #140]	; (8007a50 <TIM_Base_SetConfig+0x13c>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d108      	bne.n	80079d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	695b      	ldr	r3, [r3, #20]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	689a      	ldr	r2, [r3, #8]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a0a      	ldr	r2, [pc, #40]	; (8007a28 <TIM_Base_SetConfig+0x114>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d003      	beq.n	8007a0c <TIM_Base_SetConfig+0xf8>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a0c      	ldr	r2, [pc, #48]	; (8007a38 <TIM_Base_SetConfig+0x124>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d103      	bne.n	8007a14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	691a      	ldr	r2, [r3, #16]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	615a      	str	r2, [r3, #20]
}
 8007a1a:	bf00      	nop
 8007a1c:	3714      	adds	r7, #20
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	40010000 	.word	0x40010000
 8007a2c:	40000400 	.word	0x40000400
 8007a30:	40000800 	.word	0x40000800
 8007a34:	40000c00 	.word	0x40000c00
 8007a38:	40010400 	.word	0x40010400
 8007a3c:	40014000 	.word	0x40014000
 8007a40:	40014400 	.word	0x40014400
 8007a44:	40014800 	.word	0x40014800
 8007a48:	40001800 	.word	0x40001800
 8007a4c:	40001c00 	.word	0x40001c00
 8007a50:	40002000 	.word	0x40002000

08007a54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b087      	sub	sp, #28
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	f023 0201 	bic.w	r2, r3, #1
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
 8007a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f023 0303 	bic.w	r3, r3, #3
 8007a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	f023 0302 	bic.w	r3, r3, #2
 8007a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a20      	ldr	r2, [pc, #128]	; (8007b2c <TIM_OC1_SetConfig+0xd8>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d003      	beq.n	8007ab8 <TIM_OC1_SetConfig+0x64>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a1f      	ldr	r2, [pc, #124]	; (8007b30 <TIM_OC1_SetConfig+0xdc>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d10c      	bne.n	8007ad2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	f023 0308 	bic.w	r3, r3, #8
 8007abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	697a      	ldr	r2, [r7, #20]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	f023 0304 	bic.w	r3, r3, #4
 8007ad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a15      	ldr	r2, [pc, #84]	; (8007b2c <TIM_OC1_SetConfig+0xd8>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d003      	beq.n	8007ae2 <TIM_OC1_SetConfig+0x8e>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a14      	ldr	r2, [pc, #80]	; (8007b30 <TIM_OC1_SetConfig+0xdc>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d111      	bne.n	8007b06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ae8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007af0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	693a      	ldr	r2, [r7, #16]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	693a      	ldr	r2, [r7, #16]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	693a      	ldr	r2, [r7, #16]
 8007b0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	685a      	ldr	r2, [r3, #4]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	621a      	str	r2, [r3, #32]
}
 8007b20:	bf00      	nop
 8007b22:	371c      	adds	r7, #28
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
 8007b2c:	40010000 	.word	0x40010000
 8007b30:	40010400 	.word	0x40010400

08007b34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b087      	sub	sp, #28
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	f023 0210 	bic.w	r2, r3, #16
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	699b      	ldr	r3, [r3, #24]
 8007b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	021b      	lsls	r3, r3, #8
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	f023 0320 	bic.w	r3, r3, #32
 8007b7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	011b      	lsls	r3, r3, #4
 8007b86:	697a      	ldr	r2, [r7, #20]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a22      	ldr	r2, [pc, #136]	; (8007c18 <TIM_OC2_SetConfig+0xe4>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d003      	beq.n	8007b9c <TIM_OC2_SetConfig+0x68>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a21      	ldr	r2, [pc, #132]	; (8007c1c <TIM_OC2_SetConfig+0xe8>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d10d      	bne.n	8007bb8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	011b      	lsls	r3, r3, #4
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a17      	ldr	r2, [pc, #92]	; (8007c18 <TIM_OC2_SetConfig+0xe4>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d003      	beq.n	8007bc8 <TIM_OC2_SetConfig+0x94>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a16      	ldr	r2, [pc, #88]	; (8007c1c <TIM_OC2_SetConfig+0xe8>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d113      	bne.n	8007bf0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	695b      	ldr	r3, [r3, #20]
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	693a      	ldr	r2, [r7, #16]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	693a      	ldr	r2, [r7, #16]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	685a      	ldr	r2, [r3, #4]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	621a      	str	r2, [r3, #32]
}
 8007c0a:	bf00      	nop
 8007c0c:	371c      	adds	r7, #28
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	40010000 	.word	0x40010000
 8007c1c:	40010400 	.word	0x40010400

08007c20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b087      	sub	sp, #28
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	69db      	ldr	r3, [r3, #28]
 8007c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f023 0303 	bic.w	r3, r3, #3
 8007c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	021b      	lsls	r3, r3, #8
 8007c70:	697a      	ldr	r2, [r7, #20]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a21      	ldr	r2, [pc, #132]	; (8007d00 <TIM_OC3_SetConfig+0xe0>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d003      	beq.n	8007c86 <TIM_OC3_SetConfig+0x66>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a20      	ldr	r2, [pc, #128]	; (8007d04 <TIM_OC3_SetConfig+0xe4>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d10d      	bne.n	8007ca2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	021b      	lsls	r3, r3, #8
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ca0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a16      	ldr	r2, [pc, #88]	; (8007d00 <TIM_OC3_SetConfig+0xe0>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d003      	beq.n	8007cb2 <TIM_OC3_SetConfig+0x92>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a15      	ldr	r2, [pc, #84]	; (8007d04 <TIM_OC3_SetConfig+0xe4>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d113      	bne.n	8007cda <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	011b      	lsls	r3, r3, #4
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	699b      	ldr	r3, [r3, #24]
 8007cd2:	011b      	lsls	r3, r3, #4
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	693a      	ldr	r2, [r7, #16]
 8007cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	685a      	ldr	r2, [r3, #4]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	621a      	str	r2, [r3, #32]
}
 8007cf4:	bf00      	nop
 8007cf6:	371c      	adds	r7, #28
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr
 8007d00:	40010000 	.word	0x40010000
 8007d04:	40010400 	.word	0x40010400

08007d08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b087      	sub	sp, #28
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	69db      	ldr	r3, [r3, #28]
 8007d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	021b      	lsls	r3, r3, #8
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	031b      	lsls	r3, r3, #12
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a12      	ldr	r2, [pc, #72]	; (8007dac <TIM_OC4_SetConfig+0xa4>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d003      	beq.n	8007d70 <TIM_OC4_SetConfig+0x68>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a11      	ldr	r2, [pc, #68]	; (8007db0 <TIM_OC4_SetConfig+0xa8>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d109      	bne.n	8007d84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	695b      	ldr	r3, [r3, #20]
 8007d7c:	019b      	lsls	r3, r3, #6
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	685a      	ldr	r2, [r3, #4]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	693a      	ldr	r2, [r7, #16]
 8007d9c:	621a      	str	r2, [r3, #32]
}
 8007d9e:	bf00      	nop
 8007da0:	371c      	adds	r7, #28
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	40010000 	.word	0x40010000
 8007db0:	40010400 	.word	0x40010400

08007db4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b087      	sub	sp, #28
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6a1b      	ldr	r3, [r3, #32]
 8007dca:	f023 0201 	bic.w	r2, r3, #1
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	011b      	lsls	r3, r3, #4
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	f023 030a 	bic.w	r3, r3, #10
 8007df0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	693a      	ldr	r2, [r7, #16]
 8007dfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	621a      	str	r2, [r3, #32]
}
 8007e06:	bf00      	nop
 8007e08:	371c      	adds	r7, #28
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b087      	sub	sp, #28
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	60f8      	str	r0, [r7, #12]
 8007e1a:	60b9      	str	r1, [r7, #8]
 8007e1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	f023 0210 	bic.w	r2, r3, #16
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6a1b      	ldr	r3, [r3, #32]
 8007e34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	031b      	lsls	r3, r3, #12
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	011b      	lsls	r3, r3, #4
 8007e54:	693a      	ldr	r2, [r7, #16]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	693a      	ldr	r2, [r7, #16]
 8007e64:	621a      	str	r2, [r3, #32]
}
 8007e66:	bf00      	nop
 8007e68:	371c      	adds	r7, #28
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b085      	sub	sp, #20
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
 8007e7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e8a:	683a      	ldr	r2, [r7, #0]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	f043 0307 	orr.w	r3, r3, #7
 8007e94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	609a      	str	r2, [r3, #8]
}
 8007e9c:	bf00      	nop
 8007e9e:	3714      	adds	r7, #20
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b087      	sub	sp, #28
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
 8007eb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ec2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	021a      	lsls	r2, r3, #8
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	431a      	orrs	r2, r3
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	697a      	ldr	r2, [r7, #20]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	697a      	ldr	r2, [r7, #20]
 8007eda:	609a      	str	r2, [r3, #8]
}
 8007edc:	bf00      	nop
 8007ede:	371c      	adds	r7, #28
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b087      	sub	sp, #28
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	f003 031f 	and.w	r3, r3, #31
 8007efa:	2201      	movs	r2, #1
 8007efc:	fa02 f303 	lsl.w	r3, r2, r3
 8007f00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	6a1a      	ldr	r2, [r3, #32]
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	43db      	mvns	r3, r3
 8007f0a:	401a      	ands	r2, r3
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6a1a      	ldr	r2, [r3, #32]
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	f003 031f 	and.w	r3, r3, #31
 8007f1a:	6879      	ldr	r1, [r7, #4]
 8007f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8007f20:	431a      	orrs	r2, r3
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	621a      	str	r2, [r3, #32]
}
 8007f26:	bf00      	nop
 8007f28:	371c      	adds	r7, #28
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
	...

08007f34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d101      	bne.n	8007f4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f48:	2302      	movs	r3, #2
 8007f4a:	e05a      	b.n	8008002 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2202      	movs	r2, #2
 8007f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a21      	ldr	r2, [pc, #132]	; (8008010 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d022      	beq.n	8007fd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f98:	d01d      	beq.n	8007fd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a1d      	ldr	r2, [pc, #116]	; (8008014 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d018      	beq.n	8007fd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a1b      	ldr	r2, [pc, #108]	; (8008018 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d013      	beq.n	8007fd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a1a      	ldr	r2, [pc, #104]	; (800801c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d00e      	beq.n	8007fd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a18      	ldr	r2, [pc, #96]	; (8008020 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d009      	beq.n	8007fd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a17      	ldr	r2, [pc, #92]	; (8008024 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d004      	beq.n	8007fd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a15      	ldr	r2, [pc, #84]	; (8008028 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d10c      	bne.n	8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	40010000 	.word	0x40010000
 8008014:	40000400 	.word	0x40000400
 8008018:	40000800 	.word	0x40000800
 800801c:	40000c00 	.word	0x40000c00
 8008020:	40010400 	.word	0x40010400
 8008024:	40014000 	.word	0x40014000
 8008028:	40001800 	.word	0x40001800

0800802c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008034:	bf00      	nop
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008048:	bf00      	nop
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d101      	bne.n	8008066 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e03f      	b.n	80080e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b00      	cmp	r3, #0
 8008070:	d106      	bne.n	8008080 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7fb feb0 	bl	8003de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2224      	movs	r2, #36	; 0x24
 8008084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68da      	ldr	r2, [r3, #12]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008096:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 fddf 	bl	8008c5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	691a      	ldr	r2, [r3, #16]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	695a      	ldr	r2, [r3, #20]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68da      	ldr	r2, [r3, #12]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2220      	movs	r2, #32
 80080d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2220      	movs	r2, #32
 80080e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3708      	adds	r7, #8
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b08a      	sub	sp, #40	; 0x28
 80080f2:	af02      	add	r7, sp, #8
 80080f4:	60f8      	str	r0, [r7, #12]
 80080f6:	60b9      	str	r1, [r7, #8]
 80080f8:	603b      	str	r3, [r7, #0]
 80080fa:	4613      	mov	r3, r2
 80080fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80080fe:	2300      	movs	r3, #0
 8008100:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b20      	cmp	r3, #32
 800810c:	d17c      	bne.n	8008208 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d002      	beq.n	800811a <HAL_UART_Transmit+0x2c>
 8008114:	88fb      	ldrh	r3, [r7, #6]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d101      	bne.n	800811e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e075      	b.n	800820a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008124:	2b01      	cmp	r3, #1
 8008126:	d101      	bne.n	800812c <HAL_UART_Transmit+0x3e>
 8008128:	2302      	movs	r3, #2
 800812a:	e06e      	b.n	800820a <HAL_UART_Transmit+0x11c>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2221      	movs	r2, #33	; 0x21
 800813e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008142:	f7fc fa6b 	bl	800461c <HAL_GetTick>
 8008146:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	88fa      	ldrh	r2, [r7, #6]
 800814c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	88fa      	ldrh	r2, [r7, #6]
 8008152:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800815c:	d108      	bne.n	8008170 <HAL_UART_Transmit+0x82>
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d104      	bne.n	8008170 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008166:	2300      	movs	r3, #0
 8008168:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	61bb      	str	r3, [r7, #24]
 800816e:	e003      	b.n	8008178 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008174:	2300      	movs	r3, #0
 8008176:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2200      	movs	r2, #0
 800817c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008180:	e02a      	b.n	80081d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	2200      	movs	r2, #0
 800818a:	2180      	movs	r1, #128	; 0x80
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	f000 fb1f 	bl	80087d0 <UART_WaitOnFlagUntilTimeout>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d001      	beq.n	800819c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e036      	b.n	800820a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d10b      	bne.n	80081ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	881b      	ldrh	r3, [r3, #0]
 80081a6:	461a      	mov	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	3302      	adds	r3, #2
 80081b6:	61bb      	str	r3, [r7, #24]
 80081b8:	e007      	b.n	80081ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	781a      	ldrb	r2, [r3, #0]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	3301      	adds	r3, #1
 80081c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	3b01      	subs	r3, #1
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80081dc:	b29b      	uxth	r3, r3
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1cf      	bne.n	8008182 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	2200      	movs	r2, #0
 80081ea:	2140      	movs	r1, #64	; 0x40
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f000 faef 	bl	80087d0 <UART_WaitOnFlagUntilTimeout>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d001      	beq.n	80081fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80081f8:	2303      	movs	r3, #3
 80081fa:	e006      	b.n	800820a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2220      	movs	r2, #32
 8008200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008204:	2300      	movs	r3, #0
 8008206:	e000      	b.n	800820a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008208:	2302      	movs	r3, #2
  }
}
 800820a:	4618      	mov	r0, r3
 800820c:	3720      	adds	r7, #32
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b084      	sub	sp, #16
 8008216:	af00      	add	r7, sp, #0
 8008218:	60f8      	str	r0, [r7, #12]
 800821a:	60b9      	str	r1, [r7, #8]
 800821c:	4613      	mov	r3, r2
 800821e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008226:	b2db      	uxtb	r3, r3
 8008228:	2b20      	cmp	r3, #32
 800822a:	d11d      	bne.n	8008268 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d002      	beq.n	8008238 <HAL_UART_Receive_IT+0x26>
 8008232:	88fb      	ldrh	r3, [r7, #6]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d101      	bne.n	800823c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	e016      	b.n	800826a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008242:	2b01      	cmp	r3, #1
 8008244:	d101      	bne.n	800824a <HAL_UART_Receive_IT+0x38>
 8008246:	2302      	movs	r3, #2
 8008248:	e00f      	b.n	800826a <HAL_UART_Receive_IT+0x58>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2201      	movs	r2, #1
 800824e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008258:	88fb      	ldrh	r3, [r7, #6]
 800825a:	461a      	mov	r2, r3
 800825c:	68b9      	ldr	r1, [r7, #8]
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f000 fb24 	bl	80088ac <UART_Start_Receive_IT>
 8008264:	4603      	mov	r3, r0
 8008266:	e000      	b.n	800826a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008268:	2302      	movs	r3, #2
  }
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
	...

08008274 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b0ba      	sub	sp, #232	; 0xe8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800829a:	2300      	movs	r3, #0
 800829c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80082a0:	2300      	movs	r3, #0
 80082a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80082a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082aa:	f003 030f 	and.w	r3, r3, #15
 80082ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80082b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d10f      	bne.n	80082da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082be:	f003 0320 	and.w	r3, r3, #32
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d009      	beq.n	80082da <HAL_UART_IRQHandler+0x66>
 80082c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082ca:	f003 0320 	and.w	r3, r3, #32
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d003      	beq.n	80082da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fc07 	bl	8008ae6 <UART_Receive_IT>
      return;
 80082d8:	e256      	b.n	8008788 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80082da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f000 80de 	beq.w	80084a0 <HAL_UART_IRQHandler+0x22c>
 80082e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082e8:	f003 0301 	and.w	r3, r3, #1
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d106      	bne.n	80082fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80082f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	f000 80d1 	beq.w	80084a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80082fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008302:	f003 0301 	and.w	r3, r3, #1
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00b      	beq.n	8008322 <HAL_UART_IRQHandler+0xae>
 800830a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800830e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008312:	2b00      	cmp	r3, #0
 8008314:	d005      	beq.n	8008322 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831a:	f043 0201 	orr.w	r2, r3, #1
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008326:	f003 0304 	and.w	r3, r3, #4
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00b      	beq.n	8008346 <HAL_UART_IRQHandler+0xd2>
 800832e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008332:	f003 0301 	and.w	r3, r3, #1
 8008336:	2b00      	cmp	r3, #0
 8008338:	d005      	beq.n	8008346 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833e:	f043 0202 	orr.w	r2, r3, #2
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800834a:	f003 0302 	and.w	r3, r3, #2
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00b      	beq.n	800836a <HAL_UART_IRQHandler+0xf6>
 8008352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008356:	f003 0301 	and.w	r3, r3, #1
 800835a:	2b00      	cmp	r3, #0
 800835c:	d005      	beq.n	800836a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008362:	f043 0204 	orr.w	r2, r3, #4
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800836a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800836e:	f003 0308 	and.w	r3, r3, #8
 8008372:	2b00      	cmp	r3, #0
 8008374:	d011      	beq.n	800839a <HAL_UART_IRQHandler+0x126>
 8008376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800837a:	f003 0320 	and.w	r3, r3, #32
 800837e:	2b00      	cmp	r3, #0
 8008380:	d105      	bne.n	800838e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008386:	f003 0301 	and.w	r3, r3, #1
 800838a:	2b00      	cmp	r3, #0
 800838c:	d005      	beq.n	800839a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008392:	f043 0208 	orr.w	r2, r3, #8
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f000 81ed 	beq.w	800877e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80083a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083a8:	f003 0320 	and.w	r3, r3, #32
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d008      	beq.n	80083c2 <HAL_UART_IRQHandler+0x14e>
 80083b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083b4:	f003 0320 	and.w	r3, r3, #32
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d002      	beq.n	80083c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 fb92 	bl	8008ae6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	695b      	ldr	r3, [r3, #20]
 80083c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083cc:	2b40      	cmp	r3, #64	; 0x40
 80083ce:	bf0c      	ite	eq
 80083d0:	2301      	moveq	r3, #1
 80083d2:	2300      	movne	r3, #0
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083de:	f003 0308 	and.w	r3, r3, #8
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d103      	bne.n	80083ee <HAL_UART_IRQHandler+0x17a>
 80083e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d04f      	beq.n	800848e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 fa9a 	bl	8008928 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	695b      	ldr	r3, [r3, #20]
 80083fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083fe:	2b40      	cmp	r3, #64	; 0x40
 8008400:	d141      	bne.n	8008486 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	3314      	adds	r3, #20
 8008408:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008410:	e853 3f00 	ldrex	r3, [r3]
 8008414:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008418:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800841c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008420:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	3314      	adds	r3, #20
 800842a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800842e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008432:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008436:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800843a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800843e:	e841 2300 	strex	r3, r2, [r1]
 8008442:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008446:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1d9      	bne.n	8008402 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008452:	2b00      	cmp	r3, #0
 8008454:	d013      	beq.n	800847e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845a:	4a7d      	ldr	r2, [pc, #500]	; (8008650 <HAL_UART_IRQHandler+0x3dc>)
 800845c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008462:	4618      	mov	r0, r3
 8008464:	f7fc ffea 	bl	800543c <HAL_DMA_Abort_IT>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d016      	beq.n	800849c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008478:	4610      	mov	r0, r2
 800847a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800847c:	e00e      	b.n	800849c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f990 	bl	80087a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008484:	e00a      	b.n	800849c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f98c 	bl	80087a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800848c:	e006      	b.n	800849c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f988 	bl	80087a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800849a:	e170      	b.n	800877e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800849c:	bf00      	nop
    return;
 800849e:	e16e      	b.n	800877e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	f040 814a 	bne.w	800873e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80084aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ae:	f003 0310 	and.w	r3, r3, #16
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f000 8143 	beq.w	800873e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80084b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084bc:	f003 0310 	and.w	r3, r3, #16
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f000 813c 	beq.w	800873e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80084c6:	2300      	movs	r3, #0
 80084c8:	60bb      	str	r3, [r7, #8]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	60bb      	str	r3, [r7, #8]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	60bb      	str	r3, [r7, #8]
 80084da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	695b      	ldr	r3, [r3, #20]
 80084e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e6:	2b40      	cmp	r3, #64	; 0x40
 80084e8:	f040 80b4 	bne.w	8008654 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80084f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f000 8140 	beq.w	8008782 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008506:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800850a:	429a      	cmp	r2, r3
 800850c:	f080 8139 	bcs.w	8008782 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008516:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851c:	69db      	ldr	r3, [r3, #28]
 800851e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008522:	f000 8088 	beq.w	8008636 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	330c      	adds	r3, #12
 800852c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008530:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008534:	e853 3f00 	ldrex	r3, [r3]
 8008538:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800853c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008544:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	330c      	adds	r3, #12
 800854e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008552:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008556:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800855e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008562:	e841 2300 	strex	r3, r2, [r1]
 8008566:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800856a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800856e:	2b00      	cmp	r3, #0
 8008570:	d1d9      	bne.n	8008526 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	3314      	adds	r3, #20
 8008578:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800857c:	e853 3f00 	ldrex	r3, [r3]
 8008580:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008582:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008584:	f023 0301 	bic.w	r3, r3, #1
 8008588:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	3314      	adds	r3, #20
 8008592:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008596:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800859a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800859e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80085a2:	e841 2300 	strex	r3, r2, [r1]
 80085a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80085a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d1e1      	bne.n	8008572 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	3314      	adds	r3, #20
 80085b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085b8:	e853 3f00 	ldrex	r3, [r3]
 80085bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80085be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	3314      	adds	r3, #20
 80085ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80085d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80085d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80085d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80085da:	e841 2300 	strex	r3, r2, [r1]
 80085de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80085e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1e3      	bne.n	80085ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2220      	movs	r2, #32
 80085ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	330c      	adds	r3, #12
 80085fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085fe:	e853 3f00 	ldrex	r3, [r3]
 8008602:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008606:	f023 0310 	bic.w	r3, r3, #16
 800860a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	330c      	adds	r3, #12
 8008614:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008618:	65ba      	str	r2, [r7, #88]	; 0x58
 800861a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800861e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008620:	e841 2300 	strex	r3, r2, [r1]
 8008624:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1e3      	bne.n	80085f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008630:	4618      	mov	r0, r3
 8008632:	f7fc fe93 	bl	800535c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800863e:	b29b      	uxth	r3, r3
 8008640:	1ad3      	subs	r3, r2, r3
 8008642:	b29b      	uxth	r3, r3
 8008644:	4619      	mov	r1, r3
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f8b6 	bl	80087b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800864c:	e099      	b.n	8008782 <HAL_UART_IRQHandler+0x50e>
 800864e:	bf00      	nop
 8008650:	080089ef 	.word	0x080089ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800865c:	b29b      	uxth	r3, r3
 800865e:	1ad3      	subs	r3, r2, r3
 8008660:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008668:	b29b      	uxth	r3, r3
 800866a:	2b00      	cmp	r3, #0
 800866c:	f000 808b 	beq.w	8008786 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008670:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008674:	2b00      	cmp	r3, #0
 8008676:	f000 8086 	beq.w	8008786 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	330c      	adds	r3, #12
 8008680:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008684:	e853 3f00 	ldrex	r3, [r3]
 8008688:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800868a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800868c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008690:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	330c      	adds	r3, #12
 800869a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800869e:	647a      	str	r2, [r7, #68]	; 0x44
 80086a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086a6:	e841 2300 	strex	r3, r2, [r1]
 80086aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1e3      	bne.n	800867a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	3314      	adds	r3, #20
 80086b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086bc:	e853 3f00 	ldrex	r3, [r3]
 80086c0:	623b      	str	r3, [r7, #32]
   return(result);
 80086c2:	6a3b      	ldr	r3, [r7, #32]
 80086c4:	f023 0301 	bic.w	r3, r3, #1
 80086c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	3314      	adds	r3, #20
 80086d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80086d6:	633a      	str	r2, [r7, #48]	; 0x30
 80086d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086de:	e841 2300 	strex	r3, r2, [r1]
 80086e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d1e3      	bne.n	80086b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2220      	movs	r2, #32
 80086ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	330c      	adds	r3, #12
 80086fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	e853 3f00 	ldrex	r3, [r3]
 8008706:	60fb      	str	r3, [r7, #12]
   return(result);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f023 0310 	bic.w	r3, r3, #16
 800870e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	330c      	adds	r3, #12
 8008718:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800871c:	61fa      	str	r2, [r7, #28]
 800871e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008720:	69b9      	ldr	r1, [r7, #24]
 8008722:	69fa      	ldr	r2, [r7, #28]
 8008724:	e841 2300 	strex	r3, r2, [r1]
 8008728:	617b      	str	r3, [r7, #20]
   return(result);
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1e3      	bne.n	80086f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008730:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008734:	4619      	mov	r1, r3
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 f83e 	bl	80087b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800873c:	e023      	b.n	8008786 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800873e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008746:	2b00      	cmp	r3, #0
 8008748:	d009      	beq.n	800875e <HAL_UART_IRQHandler+0x4ea>
 800874a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800874e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008752:	2b00      	cmp	r3, #0
 8008754:	d003      	beq.n	800875e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f95d 	bl	8008a16 <UART_Transmit_IT>
    return;
 800875c:	e014      	b.n	8008788 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800875e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00e      	beq.n	8008788 <HAL_UART_IRQHandler+0x514>
 800876a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800876e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008772:	2b00      	cmp	r3, #0
 8008774:	d008      	beq.n	8008788 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f99d 	bl	8008ab6 <UART_EndTransmit_IT>
    return;
 800877c:	e004      	b.n	8008788 <HAL_UART_IRQHandler+0x514>
    return;
 800877e:	bf00      	nop
 8008780:	e002      	b.n	8008788 <HAL_UART_IRQHandler+0x514>
      return;
 8008782:	bf00      	nop
 8008784:	e000      	b.n	8008788 <HAL_UART_IRQHandler+0x514>
      return;
 8008786:	bf00      	nop
  }
}
 8008788:	37e8      	adds	r7, #232	; 0xe8
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop

08008790 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008798:	bf00      	nop
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80087ac:	bf00      	nop
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	460b      	mov	r3, r1
 80087c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80087c4:	bf00      	nop
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b090      	sub	sp, #64	; 0x40
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	603b      	str	r3, [r7, #0]
 80087dc:	4613      	mov	r3, r2
 80087de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087e0:	e050      	b.n	8008884 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e8:	d04c      	beq.n	8008884 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80087ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d007      	beq.n	8008800 <UART_WaitOnFlagUntilTimeout+0x30>
 80087f0:	f7fb ff14 	bl	800461c <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d241      	bcs.n	8008884 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	330c      	adds	r3, #12
 8008806:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880a:	e853 3f00 	ldrex	r3, [r3]
 800880e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008812:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008816:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	330c      	adds	r3, #12
 800881e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008820:	637a      	str	r2, [r7, #52]	; 0x34
 8008822:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008824:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008828:	e841 2300 	strex	r3, r2, [r1]
 800882c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800882e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008830:	2b00      	cmp	r3, #0
 8008832:	d1e5      	bne.n	8008800 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	3314      	adds	r3, #20
 800883a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	e853 3f00 	ldrex	r3, [r3]
 8008842:	613b      	str	r3, [r7, #16]
   return(result);
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	f023 0301 	bic.w	r3, r3, #1
 800884a:	63bb      	str	r3, [r7, #56]	; 0x38
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	3314      	adds	r3, #20
 8008852:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008854:	623a      	str	r2, [r7, #32]
 8008856:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008858:	69f9      	ldr	r1, [r7, #28]
 800885a:	6a3a      	ldr	r2, [r7, #32]
 800885c:	e841 2300 	strex	r3, r2, [r1]
 8008860:	61bb      	str	r3, [r7, #24]
   return(result);
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1e5      	bne.n	8008834 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2220      	movs	r2, #32
 800886c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2220      	movs	r2, #32
 8008874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2200      	movs	r2, #0
 800887c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008880:	2303      	movs	r3, #3
 8008882:	e00f      	b.n	80088a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	4013      	ands	r3, r2
 800888e:	68ba      	ldr	r2, [r7, #8]
 8008890:	429a      	cmp	r2, r3
 8008892:	bf0c      	ite	eq
 8008894:	2301      	moveq	r3, #1
 8008896:	2300      	movne	r3, #0
 8008898:	b2db      	uxtb	r3, r3
 800889a:	461a      	mov	r2, r3
 800889c:	79fb      	ldrb	r3, [r7, #7]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d09f      	beq.n	80087e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3740      	adds	r7, #64	; 0x40
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	4613      	mov	r3, r2
 80088b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	68ba      	ldr	r2, [r7, #8]
 80088be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	88fa      	ldrh	r2, [r7, #6]
 80088c4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	88fa      	ldrh	r2, [r7, #6]
 80088ca:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2222      	movs	r2, #34	; 0x22
 80088d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d007      	beq.n	80088fa <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68da      	ldr	r2, [r3, #12]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088f8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	695a      	ldr	r2, [r3, #20]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f042 0201 	orr.w	r2, r2, #1
 8008908:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68da      	ldr	r2, [r3, #12]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f042 0220 	orr.w	r2, r2, #32
 8008918:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	3714      	adds	r7, #20
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008928:	b480      	push	{r7}
 800892a:	b095      	sub	sp, #84	; 0x54
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	330c      	adds	r3, #12
 8008936:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800893a:	e853 3f00 	ldrex	r3, [r3]
 800893e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008942:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	330c      	adds	r3, #12
 800894e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008950:	643a      	str	r2, [r7, #64]	; 0x40
 8008952:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008954:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008956:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008958:	e841 2300 	strex	r3, r2, [r1]
 800895c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800895e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1e5      	bne.n	8008930 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	3314      	adds	r3, #20
 800896a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896c:	6a3b      	ldr	r3, [r7, #32]
 800896e:	e853 3f00 	ldrex	r3, [r3]
 8008972:	61fb      	str	r3, [r7, #28]
   return(result);
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	f023 0301 	bic.w	r3, r3, #1
 800897a:	64bb      	str	r3, [r7, #72]	; 0x48
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	3314      	adds	r3, #20
 8008982:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008984:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008986:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800898a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800898c:	e841 2300 	strex	r3, r2, [r1]
 8008990:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1e5      	bne.n	8008964 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899c:	2b01      	cmp	r3, #1
 800899e:	d119      	bne.n	80089d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	330c      	adds	r3, #12
 80089a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	e853 3f00 	ldrex	r3, [r3]
 80089ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	f023 0310 	bic.w	r3, r3, #16
 80089b6:	647b      	str	r3, [r7, #68]	; 0x44
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	330c      	adds	r3, #12
 80089be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089c0:	61ba      	str	r2, [r7, #24]
 80089c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c4:	6979      	ldr	r1, [r7, #20]
 80089c6:	69ba      	ldr	r2, [r7, #24]
 80089c8:	e841 2300 	strex	r3, r2, [r1]
 80089cc:	613b      	str	r3, [r7, #16]
   return(result);
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d1e5      	bne.n	80089a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2220      	movs	r2, #32
 80089d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80089e2:	bf00      	nop
 80089e4:	3754      	adds	r7, #84	; 0x54
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b084      	sub	sp, #16
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f7ff fecb 	bl	80087a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a0e:	bf00      	nop
 8008a10:	3710      	adds	r7, #16
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008a16:	b480      	push	{r7}
 8008a18:	b085      	sub	sp, #20
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b21      	cmp	r3, #33	; 0x21
 8008a28:	d13e      	bne.n	8008aa8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a32:	d114      	bne.n	8008a5e <UART_Transmit_IT+0x48>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d110      	bne.n	8008a5e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6a1b      	ldr	r3, [r3, #32]
 8008a40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	881b      	ldrh	r3, [r3, #0]
 8008a46:	461a      	mov	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a1b      	ldr	r3, [r3, #32]
 8008a56:	1c9a      	adds	r2, r3, #2
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	621a      	str	r2, [r3, #32]
 8008a5c:	e008      	b.n	8008a70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a1b      	ldr	r3, [r3, #32]
 8008a62:	1c59      	adds	r1, r3, #1
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	6211      	str	r1, [r2, #32]
 8008a68:	781a      	ldrb	r2, [r3, #0]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	3b01      	subs	r3, #1
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d10f      	bne.n	8008aa4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68da      	ldr	r2, [r3, #12]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	68da      	ldr	r2, [r3, #12]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008aa2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	e000      	b.n	8008aaa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008aa8:	2302      	movs	r3, #2
  }
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3714      	adds	r7, #20
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr

08008ab6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b082      	sub	sp, #8
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68da      	ldr	r2, [r3, #12]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008acc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2220      	movs	r2, #32
 8008ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f7ff fe5a 	bl	8008790 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b08c      	sub	sp, #48	; 0x30
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b22      	cmp	r3, #34	; 0x22
 8008af8:	f040 80ab 	bne.w	8008c52 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b04:	d117      	bne.n	8008b36 <UART_Receive_IT+0x50>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d113      	bne.n	8008b36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b16:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b2e:	1c9a      	adds	r2, r3, #2
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	629a      	str	r2, [r3, #40]	; 0x28
 8008b34:	e026      	b.n	8008b84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b48:	d007      	beq.n	8008b5a <UART_Receive_IT+0x74>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d10a      	bne.n	8008b68 <UART_Receive_IT+0x82>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d106      	bne.n	8008b68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	b2da      	uxtb	r2, r3
 8008b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b64:	701a      	strb	r2, [r3, #0]
 8008b66:	e008      	b.n	8008b7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b74:	b2da      	uxtb	r2, r3
 8008b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b7e:	1c5a      	adds	r2, r3, #1
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	4619      	mov	r1, r3
 8008b92:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d15a      	bne.n	8008c4e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	68da      	ldr	r2, [r3, #12]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f022 0220 	bic.w	r2, r2, #32
 8008ba6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68da      	ldr	r2, [r3, #12]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008bb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	695a      	ldr	r2, [r3, #20]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f022 0201 	bic.w	r2, r2, #1
 8008bc6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2220      	movs	r2, #32
 8008bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d135      	bne.n	8008c44 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	330c      	adds	r3, #12
 8008be4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	e853 3f00 	ldrex	r3, [r3]
 8008bec:	613b      	str	r3, [r7, #16]
   return(result);
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	f023 0310 	bic.w	r3, r3, #16
 8008bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	330c      	adds	r3, #12
 8008bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bfe:	623a      	str	r2, [r7, #32]
 8008c00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c02:	69f9      	ldr	r1, [r7, #28]
 8008c04:	6a3a      	ldr	r2, [r7, #32]
 8008c06:	e841 2300 	strex	r3, r2, [r1]
 8008c0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d1e5      	bne.n	8008bde <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 0310 	and.w	r3, r3, #16
 8008c1c:	2b10      	cmp	r3, #16
 8008c1e:	d10a      	bne.n	8008c36 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c20:	2300      	movs	r3, #0
 8008c22:	60fb      	str	r3, [r7, #12]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	60fb      	str	r3, [r7, #12]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	60fb      	str	r3, [r7, #12]
 8008c34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f7ff fdbb 	bl	80087b8 <HAL_UARTEx_RxEventCallback>
 8008c42:	e002      	b.n	8008c4a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f7fb f971 	bl	8003f2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	e002      	b.n	8008c54 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	e000      	b.n	8008c54 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008c52:	2302      	movs	r3, #2
  }
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3730      	adds	r7, #48	; 0x30
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c60:	b0c0      	sub	sp, #256	; 0x100
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	691b      	ldr	r3, [r3, #16]
 8008c70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c78:	68d9      	ldr	r1, [r3, #12]
 8008c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	ea40 0301 	orr.w	r3, r0, r1
 8008c84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c8a:	689a      	ldr	r2, [r3, #8]
 8008c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	431a      	orrs	r2, r3
 8008c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c98:	695b      	ldr	r3, [r3, #20]
 8008c9a:	431a      	orrs	r2, r3
 8008c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ca0:	69db      	ldr	r3, [r3, #28]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008cb4:	f021 010c 	bic.w	r1, r1, #12
 8008cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008cc2:	430b      	orrs	r3, r1
 8008cc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	695b      	ldr	r3, [r3, #20]
 8008cce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cd6:	6999      	ldr	r1, [r3, #24]
 8008cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	ea40 0301 	orr.w	r3, r0, r1
 8008ce2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	4b8f      	ldr	r3, [pc, #572]	; (8008f28 <UART_SetConfig+0x2cc>)
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d005      	beq.n	8008cfc <UART_SetConfig+0xa0>
 8008cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	4b8d      	ldr	r3, [pc, #564]	; (8008f2c <UART_SetConfig+0x2d0>)
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d104      	bne.n	8008d06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008cfc:	f7fd fcba 	bl	8006674 <HAL_RCC_GetPCLK2Freq>
 8008d00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008d04:	e003      	b.n	8008d0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008d06:	f7fd fca1 	bl	800664c <HAL_RCC_GetPCLK1Freq>
 8008d0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d12:	69db      	ldr	r3, [r3, #28]
 8008d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d18:	f040 810c 	bne.w	8008f34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d20:	2200      	movs	r2, #0
 8008d22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008d26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008d2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008d2e:	4622      	mov	r2, r4
 8008d30:	462b      	mov	r3, r5
 8008d32:	1891      	adds	r1, r2, r2
 8008d34:	65b9      	str	r1, [r7, #88]	; 0x58
 8008d36:	415b      	adcs	r3, r3
 8008d38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008d3e:	4621      	mov	r1, r4
 8008d40:	eb12 0801 	adds.w	r8, r2, r1
 8008d44:	4629      	mov	r1, r5
 8008d46:	eb43 0901 	adc.w	r9, r3, r1
 8008d4a:	f04f 0200 	mov.w	r2, #0
 8008d4e:	f04f 0300 	mov.w	r3, #0
 8008d52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008d56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008d5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008d5e:	4690      	mov	r8, r2
 8008d60:	4699      	mov	r9, r3
 8008d62:	4623      	mov	r3, r4
 8008d64:	eb18 0303 	adds.w	r3, r8, r3
 8008d68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d6c:	462b      	mov	r3, r5
 8008d6e:	eb49 0303 	adc.w	r3, r9, r3
 8008d72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008d86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	18db      	adds	r3, r3, r3
 8008d8e:	653b      	str	r3, [r7, #80]	; 0x50
 8008d90:	4613      	mov	r3, r2
 8008d92:	eb42 0303 	adc.w	r3, r2, r3
 8008d96:	657b      	str	r3, [r7, #84]	; 0x54
 8008d98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008d9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008da0:	f7f7 ff16 	bl	8000bd0 <__aeabi_uldivmod>
 8008da4:	4602      	mov	r2, r0
 8008da6:	460b      	mov	r3, r1
 8008da8:	4b61      	ldr	r3, [pc, #388]	; (8008f30 <UART_SetConfig+0x2d4>)
 8008daa:	fba3 2302 	umull	r2, r3, r3, r2
 8008dae:	095b      	lsrs	r3, r3, #5
 8008db0:	011c      	lsls	r4, r3, #4
 8008db2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008db6:	2200      	movs	r2, #0
 8008db8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008dbc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008dc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008dc4:	4642      	mov	r2, r8
 8008dc6:	464b      	mov	r3, r9
 8008dc8:	1891      	adds	r1, r2, r2
 8008dca:	64b9      	str	r1, [r7, #72]	; 0x48
 8008dcc:	415b      	adcs	r3, r3
 8008dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008dd4:	4641      	mov	r1, r8
 8008dd6:	eb12 0a01 	adds.w	sl, r2, r1
 8008dda:	4649      	mov	r1, r9
 8008ddc:	eb43 0b01 	adc.w	fp, r3, r1
 8008de0:	f04f 0200 	mov.w	r2, #0
 8008de4:	f04f 0300 	mov.w	r3, #0
 8008de8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008dec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008df0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008df4:	4692      	mov	sl, r2
 8008df6:	469b      	mov	fp, r3
 8008df8:	4643      	mov	r3, r8
 8008dfa:	eb1a 0303 	adds.w	r3, sl, r3
 8008dfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e02:	464b      	mov	r3, r9
 8008e04:	eb4b 0303 	adc.w	r3, fp, r3
 8008e08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008e1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008e20:	460b      	mov	r3, r1
 8008e22:	18db      	adds	r3, r3, r3
 8008e24:	643b      	str	r3, [r7, #64]	; 0x40
 8008e26:	4613      	mov	r3, r2
 8008e28:	eb42 0303 	adc.w	r3, r2, r3
 8008e2c:	647b      	str	r3, [r7, #68]	; 0x44
 8008e2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008e32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008e36:	f7f7 fecb 	bl	8000bd0 <__aeabi_uldivmod>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	4611      	mov	r1, r2
 8008e40:	4b3b      	ldr	r3, [pc, #236]	; (8008f30 <UART_SetConfig+0x2d4>)
 8008e42:	fba3 2301 	umull	r2, r3, r3, r1
 8008e46:	095b      	lsrs	r3, r3, #5
 8008e48:	2264      	movs	r2, #100	; 0x64
 8008e4a:	fb02 f303 	mul.w	r3, r2, r3
 8008e4e:	1acb      	subs	r3, r1, r3
 8008e50:	00db      	lsls	r3, r3, #3
 8008e52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008e56:	4b36      	ldr	r3, [pc, #216]	; (8008f30 <UART_SetConfig+0x2d4>)
 8008e58:	fba3 2302 	umull	r2, r3, r3, r2
 8008e5c:	095b      	lsrs	r3, r3, #5
 8008e5e:	005b      	lsls	r3, r3, #1
 8008e60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008e64:	441c      	add	r4, r3
 8008e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008e74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008e78:	4642      	mov	r2, r8
 8008e7a:	464b      	mov	r3, r9
 8008e7c:	1891      	adds	r1, r2, r2
 8008e7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008e80:	415b      	adcs	r3, r3
 8008e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008e88:	4641      	mov	r1, r8
 8008e8a:	1851      	adds	r1, r2, r1
 8008e8c:	6339      	str	r1, [r7, #48]	; 0x30
 8008e8e:	4649      	mov	r1, r9
 8008e90:	414b      	adcs	r3, r1
 8008e92:	637b      	str	r3, [r7, #52]	; 0x34
 8008e94:	f04f 0200 	mov.w	r2, #0
 8008e98:	f04f 0300 	mov.w	r3, #0
 8008e9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008ea0:	4659      	mov	r1, fp
 8008ea2:	00cb      	lsls	r3, r1, #3
 8008ea4:	4651      	mov	r1, sl
 8008ea6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008eaa:	4651      	mov	r1, sl
 8008eac:	00ca      	lsls	r2, r1, #3
 8008eae:	4610      	mov	r0, r2
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	4642      	mov	r2, r8
 8008eb6:	189b      	adds	r3, r3, r2
 8008eb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ebc:	464b      	mov	r3, r9
 8008ebe:	460a      	mov	r2, r1
 8008ec0:	eb42 0303 	adc.w	r3, r2, r3
 8008ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008ed4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008ed8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008edc:	460b      	mov	r3, r1
 8008ede:	18db      	adds	r3, r3, r3
 8008ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	eb42 0303 	adc.w	r3, r2, r3
 8008ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008eea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008eee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008ef2:	f7f7 fe6d 	bl	8000bd0 <__aeabi_uldivmod>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	460b      	mov	r3, r1
 8008efa:	4b0d      	ldr	r3, [pc, #52]	; (8008f30 <UART_SetConfig+0x2d4>)
 8008efc:	fba3 1302 	umull	r1, r3, r3, r2
 8008f00:	095b      	lsrs	r3, r3, #5
 8008f02:	2164      	movs	r1, #100	; 0x64
 8008f04:	fb01 f303 	mul.w	r3, r1, r3
 8008f08:	1ad3      	subs	r3, r2, r3
 8008f0a:	00db      	lsls	r3, r3, #3
 8008f0c:	3332      	adds	r3, #50	; 0x32
 8008f0e:	4a08      	ldr	r2, [pc, #32]	; (8008f30 <UART_SetConfig+0x2d4>)
 8008f10:	fba2 2303 	umull	r2, r3, r2, r3
 8008f14:	095b      	lsrs	r3, r3, #5
 8008f16:	f003 0207 	and.w	r2, r3, #7
 8008f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4422      	add	r2, r4
 8008f22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008f24:	e105      	b.n	8009132 <UART_SetConfig+0x4d6>
 8008f26:	bf00      	nop
 8008f28:	40011000 	.word	0x40011000
 8008f2c:	40011400 	.word	0x40011400
 8008f30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008f3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008f42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008f46:	4642      	mov	r2, r8
 8008f48:	464b      	mov	r3, r9
 8008f4a:	1891      	adds	r1, r2, r2
 8008f4c:	6239      	str	r1, [r7, #32]
 8008f4e:	415b      	adcs	r3, r3
 8008f50:	627b      	str	r3, [r7, #36]	; 0x24
 8008f52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008f56:	4641      	mov	r1, r8
 8008f58:	1854      	adds	r4, r2, r1
 8008f5a:	4649      	mov	r1, r9
 8008f5c:	eb43 0501 	adc.w	r5, r3, r1
 8008f60:	f04f 0200 	mov.w	r2, #0
 8008f64:	f04f 0300 	mov.w	r3, #0
 8008f68:	00eb      	lsls	r3, r5, #3
 8008f6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f6e:	00e2      	lsls	r2, r4, #3
 8008f70:	4614      	mov	r4, r2
 8008f72:	461d      	mov	r5, r3
 8008f74:	4643      	mov	r3, r8
 8008f76:	18e3      	adds	r3, r4, r3
 8008f78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008f7c:	464b      	mov	r3, r9
 8008f7e:	eb45 0303 	adc.w	r3, r5, r3
 8008f82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008f96:	f04f 0200 	mov.w	r2, #0
 8008f9a:	f04f 0300 	mov.w	r3, #0
 8008f9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008fa2:	4629      	mov	r1, r5
 8008fa4:	008b      	lsls	r3, r1, #2
 8008fa6:	4621      	mov	r1, r4
 8008fa8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fac:	4621      	mov	r1, r4
 8008fae:	008a      	lsls	r2, r1, #2
 8008fb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008fb4:	f7f7 fe0c 	bl	8000bd0 <__aeabi_uldivmod>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	460b      	mov	r3, r1
 8008fbc:	4b60      	ldr	r3, [pc, #384]	; (8009140 <UART_SetConfig+0x4e4>)
 8008fbe:	fba3 2302 	umull	r2, r3, r3, r2
 8008fc2:	095b      	lsrs	r3, r3, #5
 8008fc4:	011c      	lsls	r4, r3, #4
 8008fc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008fd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008fd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008fd8:	4642      	mov	r2, r8
 8008fda:	464b      	mov	r3, r9
 8008fdc:	1891      	adds	r1, r2, r2
 8008fde:	61b9      	str	r1, [r7, #24]
 8008fe0:	415b      	adcs	r3, r3
 8008fe2:	61fb      	str	r3, [r7, #28]
 8008fe4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008fe8:	4641      	mov	r1, r8
 8008fea:	1851      	adds	r1, r2, r1
 8008fec:	6139      	str	r1, [r7, #16]
 8008fee:	4649      	mov	r1, r9
 8008ff0:	414b      	adcs	r3, r1
 8008ff2:	617b      	str	r3, [r7, #20]
 8008ff4:	f04f 0200 	mov.w	r2, #0
 8008ff8:	f04f 0300 	mov.w	r3, #0
 8008ffc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009000:	4659      	mov	r1, fp
 8009002:	00cb      	lsls	r3, r1, #3
 8009004:	4651      	mov	r1, sl
 8009006:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800900a:	4651      	mov	r1, sl
 800900c:	00ca      	lsls	r2, r1, #3
 800900e:	4610      	mov	r0, r2
 8009010:	4619      	mov	r1, r3
 8009012:	4603      	mov	r3, r0
 8009014:	4642      	mov	r2, r8
 8009016:	189b      	adds	r3, r3, r2
 8009018:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800901c:	464b      	mov	r3, r9
 800901e:	460a      	mov	r2, r1
 8009020:	eb42 0303 	adc.w	r3, r2, r3
 8009024:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	67bb      	str	r3, [r7, #120]	; 0x78
 8009032:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009034:	f04f 0200 	mov.w	r2, #0
 8009038:	f04f 0300 	mov.w	r3, #0
 800903c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009040:	4649      	mov	r1, r9
 8009042:	008b      	lsls	r3, r1, #2
 8009044:	4641      	mov	r1, r8
 8009046:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800904a:	4641      	mov	r1, r8
 800904c:	008a      	lsls	r2, r1, #2
 800904e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009052:	f7f7 fdbd 	bl	8000bd0 <__aeabi_uldivmod>
 8009056:	4602      	mov	r2, r0
 8009058:	460b      	mov	r3, r1
 800905a:	4b39      	ldr	r3, [pc, #228]	; (8009140 <UART_SetConfig+0x4e4>)
 800905c:	fba3 1302 	umull	r1, r3, r3, r2
 8009060:	095b      	lsrs	r3, r3, #5
 8009062:	2164      	movs	r1, #100	; 0x64
 8009064:	fb01 f303 	mul.w	r3, r1, r3
 8009068:	1ad3      	subs	r3, r2, r3
 800906a:	011b      	lsls	r3, r3, #4
 800906c:	3332      	adds	r3, #50	; 0x32
 800906e:	4a34      	ldr	r2, [pc, #208]	; (8009140 <UART_SetConfig+0x4e4>)
 8009070:	fba2 2303 	umull	r2, r3, r2, r3
 8009074:	095b      	lsrs	r3, r3, #5
 8009076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800907a:	441c      	add	r4, r3
 800907c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009080:	2200      	movs	r2, #0
 8009082:	673b      	str	r3, [r7, #112]	; 0x70
 8009084:	677a      	str	r2, [r7, #116]	; 0x74
 8009086:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800908a:	4642      	mov	r2, r8
 800908c:	464b      	mov	r3, r9
 800908e:	1891      	adds	r1, r2, r2
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	415b      	adcs	r3, r3
 8009094:	60fb      	str	r3, [r7, #12]
 8009096:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800909a:	4641      	mov	r1, r8
 800909c:	1851      	adds	r1, r2, r1
 800909e:	6039      	str	r1, [r7, #0]
 80090a0:	4649      	mov	r1, r9
 80090a2:	414b      	adcs	r3, r1
 80090a4:	607b      	str	r3, [r7, #4]
 80090a6:	f04f 0200 	mov.w	r2, #0
 80090aa:	f04f 0300 	mov.w	r3, #0
 80090ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80090b2:	4659      	mov	r1, fp
 80090b4:	00cb      	lsls	r3, r1, #3
 80090b6:	4651      	mov	r1, sl
 80090b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090bc:	4651      	mov	r1, sl
 80090be:	00ca      	lsls	r2, r1, #3
 80090c0:	4610      	mov	r0, r2
 80090c2:	4619      	mov	r1, r3
 80090c4:	4603      	mov	r3, r0
 80090c6:	4642      	mov	r2, r8
 80090c8:	189b      	adds	r3, r3, r2
 80090ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80090cc:	464b      	mov	r3, r9
 80090ce:	460a      	mov	r2, r1
 80090d0:	eb42 0303 	adc.w	r3, r2, r3
 80090d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80090d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	663b      	str	r3, [r7, #96]	; 0x60
 80090e0:	667a      	str	r2, [r7, #100]	; 0x64
 80090e2:	f04f 0200 	mov.w	r2, #0
 80090e6:	f04f 0300 	mov.w	r3, #0
 80090ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80090ee:	4649      	mov	r1, r9
 80090f0:	008b      	lsls	r3, r1, #2
 80090f2:	4641      	mov	r1, r8
 80090f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090f8:	4641      	mov	r1, r8
 80090fa:	008a      	lsls	r2, r1, #2
 80090fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009100:	f7f7 fd66 	bl	8000bd0 <__aeabi_uldivmod>
 8009104:	4602      	mov	r2, r0
 8009106:	460b      	mov	r3, r1
 8009108:	4b0d      	ldr	r3, [pc, #52]	; (8009140 <UART_SetConfig+0x4e4>)
 800910a:	fba3 1302 	umull	r1, r3, r3, r2
 800910e:	095b      	lsrs	r3, r3, #5
 8009110:	2164      	movs	r1, #100	; 0x64
 8009112:	fb01 f303 	mul.w	r3, r1, r3
 8009116:	1ad3      	subs	r3, r2, r3
 8009118:	011b      	lsls	r3, r3, #4
 800911a:	3332      	adds	r3, #50	; 0x32
 800911c:	4a08      	ldr	r2, [pc, #32]	; (8009140 <UART_SetConfig+0x4e4>)
 800911e:	fba2 2303 	umull	r2, r3, r2, r3
 8009122:	095b      	lsrs	r3, r3, #5
 8009124:	f003 020f 	and.w	r2, r3, #15
 8009128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4422      	add	r2, r4
 8009130:	609a      	str	r2, [r3, #8]
}
 8009132:	bf00      	nop
 8009134:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009138:	46bd      	mov	sp, r7
 800913a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800913e:	bf00      	nop
 8009140:	51eb851f 	.word	0x51eb851f

08009144 <__errno>:
 8009144:	4b01      	ldr	r3, [pc, #4]	; (800914c <__errno+0x8>)
 8009146:	6818      	ldr	r0, [r3, #0]
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop
 800914c:	20000078 	.word	0x20000078

08009150 <__libc_init_array>:
 8009150:	b570      	push	{r4, r5, r6, lr}
 8009152:	4d0d      	ldr	r5, [pc, #52]	; (8009188 <__libc_init_array+0x38>)
 8009154:	4c0d      	ldr	r4, [pc, #52]	; (800918c <__libc_init_array+0x3c>)
 8009156:	1b64      	subs	r4, r4, r5
 8009158:	10a4      	asrs	r4, r4, #2
 800915a:	2600      	movs	r6, #0
 800915c:	42a6      	cmp	r6, r4
 800915e:	d109      	bne.n	8009174 <__libc_init_array+0x24>
 8009160:	4d0b      	ldr	r5, [pc, #44]	; (8009190 <__libc_init_array+0x40>)
 8009162:	4c0c      	ldr	r4, [pc, #48]	; (8009194 <__libc_init_array+0x44>)
 8009164:	f000 f90c 	bl	8009380 <_init>
 8009168:	1b64      	subs	r4, r4, r5
 800916a:	10a4      	asrs	r4, r4, #2
 800916c:	2600      	movs	r6, #0
 800916e:	42a6      	cmp	r6, r4
 8009170:	d105      	bne.n	800917e <__libc_init_array+0x2e>
 8009172:	bd70      	pop	{r4, r5, r6, pc}
 8009174:	f855 3b04 	ldr.w	r3, [r5], #4
 8009178:	4798      	blx	r3
 800917a:	3601      	adds	r6, #1
 800917c:	e7ee      	b.n	800915c <__libc_init_array+0xc>
 800917e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009182:	4798      	blx	r3
 8009184:	3601      	adds	r6, #1
 8009186:	e7f2      	b.n	800916e <__libc_init_array+0x1e>
 8009188:	0800a394 	.word	0x0800a394
 800918c:	0800a394 	.word	0x0800a394
 8009190:	0800a394 	.word	0x0800a394
 8009194:	0800a398 	.word	0x0800a398

08009198 <memcpy>:
 8009198:	440a      	add	r2, r1
 800919a:	4291      	cmp	r1, r2
 800919c:	f100 33ff 	add.w	r3, r0, #4294967295
 80091a0:	d100      	bne.n	80091a4 <memcpy+0xc>
 80091a2:	4770      	bx	lr
 80091a4:	b510      	push	{r4, lr}
 80091a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091ae:	4291      	cmp	r1, r2
 80091b0:	d1f9      	bne.n	80091a6 <memcpy+0xe>
 80091b2:	bd10      	pop	{r4, pc}

080091b4 <memset>:
 80091b4:	4402      	add	r2, r0
 80091b6:	4603      	mov	r3, r0
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d100      	bne.n	80091be <memset+0xa>
 80091bc:	4770      	bx	lr
 80091be:	f803 1b01 	strb.w	r1, [r3], #1
 80091c2:	e7f9      	b.n	80091b8 <memset+0x4>

080091c4 <sqrt>:
 80091c4:	b538      	push	{r3, r4, r5, lr}
 80091c6:	ed2d 8b02 	vpush	{d8}
 80091ca:	ec55 4b10 	vmov	r4, r5, d0
 80091ce:	f000 f825 	bl	800921c <__ieee754_sqrt>
 80091d2:	4622      	mov	r2, r4
 80091d4:	462b      	mov	r3, r5
 80091d6:	4620      	mov	r0, r4
 80091d8:	4629      	mov	r1, r5
 80091da:	eeb0 8a40 	vmov.f32	s16, s0
 80091de:	eef0 8a60 	vmov.f32	s17, s1
 80091e2:	f7f7 fc47 	bl	8000a74 <__aeabi_dcmpun>
 80091e6:	b990      	cbnz	r0, 800920e <sqrt+0x4a>
 80091e8:	2200      	movs	r2, #0
 80091ea:	2300      	movs	r3, #0
 80091ec:	4620      	mov	r0, r4
 80091ee:	4629      	mov	r1, r5
 80091f0:	f7f7 fc18 	bl	8000a24 <__aeabi_dcmplt>
 80091f4:	b158      	cbz	r0, 800920e <sqrt+0x4a>
 80091f6:	f7ff ffa5 	bl	8009144 <__errno>
 80091fa:	2321      	movs	r3, #33	; 0x21
 80091fc:	6003      	str	r3, [r0, #0]
 80091fe:	2200      	movs	r2, #0
 8009200:	2300      	movs	r3, #0
 8009202:	4610      	mov	r0, r2
 8009204:	4619      	mov	r1, r3
 8009206:	f7f7 fac5 	bl	8000794 <__aeabi_ddiv>
 800920a:	ec41 0b18 	vmov	d8, r0, r1
 800920e:	eeb0 0a48 	vmov.f32	s0, s16
 8009212:	eef0 0a68 	vmov.f32	s1, s17
 8009216:	ecbd 8b02 	vpop	{d8}
 800921a:	bd38      	pop	{r3, r4, r5, pc}

0800921c <__ieee754_sqrt>:
 800921c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009220:	ec55 4b10 	vmov	r4, r5, d0
 8009224:	4e55      	ldr	r6, [pc, #340]	; (800937c <__ieee754_sqrt+0x160>)
 8009226:	43ae      	bics	r6, r5
 8009228:	ee10 0a10 	vmov	r0, s0
 800922c:	ee10 3a10 	vmov	r3, s0
 8009230:	462a      	mov	r2, r5
 8009232:	4629      	mov	r1, r5
 8009234:	d110      	bne.n	8009258 <__ieee754_sqrt+0x3c>
 8009236:	ee10 2a10 	vmov	r2, s0
 800923a:	462b      	mov	r3, r5
 800923c:	f7f7 f980 	bl	8000540 <__aeabi_dmul>
 8009240:	4602      	mov	r2, r0
 8009242:	460b      	mov	r3, r1
 8009244:	4620      	mov	r0, r4
 8009246:	4629      	mov	r1, r5
 8009248:	f7f6 ffc4 	bl	80001d4 <__adddf3>
 800924c:	4604      	mov	r4, r0
 800924e:	460d      	mov	r5, r1
 8009250:	ec45 4b10 	vmov	d0, r4, r5
 8009254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009258:	2d00      	cmp	r5, #0
 800925a:	dc10      	bgt.n	800927e <__ieee754_sqrt+0x62>
 800925c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009260:	4330      	orrs	r0, r6
 8009262:	d0f5      	beq.n	8009250 <__ieee754_sqrt+0x34>
 8009264:	b15d      	cbz	r5, 800927e <__ieee754_sqrt+0x62>
 8009266:	ee10 2a10 	vmov	r2, s0
 800926a:	462b      	mov	r3, r5
 800926c:	ee10 0a10 	vmov	r0, s0
 8009270:	f7f6 ffae 	bl	80001d0 <__aeabi_dsub>
 8009274:	4602      	mov	r2, r0
 8009276:	460b      	mov	r3, r1
 8009278:	f7f7 fa8c 	bl	8000794 <__aeabi_ddiv>
 800927c:	e7e6      	b.n	800924c <__ieee754_sqrt+0x30>
 800927e:	1512      	asrs	r2, r2, #20
 8009280:	d074      	beq.n	800936c <__ieee754_sqrt+0x150>
 8009282:	07d4      	lsls	r4, r2, #31
 8009284:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009288:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800928c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009290:	bf5e      	ittt	pl
 8009292:	0fda      	lsrpl	r2, r3, #31
 8009294:	005b      	lslpl	r3, r3, #1
 8009296:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800929a:	2400      	movs	r4, #0
 800929c:	0fda      	lsrs	r2, r3, #31
 800929e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80092a2:	107f      	asrs	r7, r7, #1
 80092a4:	005b      	lsls	r3, r3, #1
 80092a6:	2516      	movs	r5, #22
 80092a8:	4620      	mov	r0, r4
 80092aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80092ae:	1886      	adds	r6, r0, r2
 80092b0:	428e      	cmp	r6, r1
 80092b2:	bfde      	ittt	le
 80092b4:	1b89      	suble	r1, r1, r6
 80092b6:	18b0      	addle	r0, r6, r2
 80092b8:	18a4      	addle	r4, r4, r2
 80092ba:	0049      	lsls	r1, r1, #1
 80092bc:	3d01      	subs	r5, #1
 80092be:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80092c2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80092c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80092ca:	d1f0      	bne.n	80092ae <__ieee754_sqrt+0x92>
 80092cc:	462a      	mov	r2, r5
 80092ce:	f04f 0e20 	mov.w	lr, #32
 80092d2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80092d6:	4281      	cmp	r1, r0
 80092d8:	eb06 0c05 	add.w	ip, r6, r5
 80092dc:	dc02      	bgt.n	80092e4 <__ieee754_sqrt+0xc8>
 80092de:	d113      	bne.n	8009308 <__ieee754_sqrt+0xec>
 80092e0:	459c      	cmp	ip, r3
 80092e2:	d811      	bhi.n	8009308 <__ieee754_sqrt+0xec>
 80092e4:	f1bc 0f00 	cmp.w	ip, #0
 80092e8:	eb0c 0506 	add.w	r5, ip, r6
 80092ec:	da43      	bge.n	8009376 <__ieee754_sqrt+0x15a>
 80092ee:	2d00      	cmp	r5, #0
 80092f0:	db41      	blt.n	8009376 <__ieee754_sqrt+0x15a>
 80092f2:	f100 0801 	add.w	r8, r0, #1
 80092f6:	1a09      	subs	r1, r1, r0
 80092f8:	459c      	cmp	ip, r3
 80092fa:	bf88      	it	hi
 80092fc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009300:	eba3 030c 	sub.w	r3, r3, ip
 8009304:	4432      	add	r2, r6
 8009306:	4640      	mov	r0, r8
 8009308:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800930c:	f1be 0e01 	subs.w	lr, lr, #1
 8009310:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009314:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009318:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800931c:	d1db      	bne.n	80092d6 <__ieee754_sqrt+0xba>
 800931e:	430b      	orrs	r3, r1
 8009320:	d006      	beq.n	8009330 <__ieee754_sqrt+0x114>
 8009322:	1c50      	adds	r0, r2, #1
 8009324:	bf13      	iteet	ne
 8009326:	3201      	addne	r2, #1
 8009328:	3401      	addeq	r4, #1
 800932a:	4672      	moveq	r2, lr
 800932c:	f022 0201 	bicne.w	r2, r2, #1
 8009330:	1063      	asrs	r3, r4, #1
 8009332:	0852      	lsrs	r2, r2, #1
 8009334:	07e1      	lsls	r1, r4, #31
 8009336:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800933a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800933e:	bf48      	it	mi
 8009340:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009344:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009348:	4614      	mov	r4, r2
 800934a:	e781      	b.n	8009250 <__ieee754_sqrt+0x34>
 800934c:	0ad9      	lsrs	r1, r3, #11
 800934e:	3815      	subs	r0, #21
 8009350:	055b      	lsls	r3, r3, #21
 8009352:	2900      	cmp	r1, #0
 8009354:	d0fa      	beq.n	800934c <__ieee754_sqrt+0x130>
 8009356:	02cd      	lsls	r5, r1, #11
 8009358:	d50a      	bpl.n	8009370 <__ieee754_sqrt+0x154>
 800935a:	f1c2 0420 	rsb	r4, r2, #32
 800935e:	fa23 f404 	lsr.w	r4, r3, r4
 8009362:	1e55      	subs	r5, r2, #1
 8009364:	4093      	lsls	r3, r2
 8009366:	4321      	orrs	r1, r4
 8009368:	1b42      	subs	r2, r0, r5
 800936a:	e78a      	b.n	8009282 <__ieee754_sqrt+0x66>
 800936c:	4610      	mov	r0, r2
 800936e:	e7f0      	b.n	8009352 <__ieee754_sqrt+0x136>
 8009370:	0049      	lsls	r1, r1, #1
 8009372:	3201      	adds	r2, #1
 8009374:	e7ef      	b.n	8009356 <__ieee754_sqrt+0x13a>
 8009376:	4680      	mov	r8, r0
 8009378:	e7bd      	b.n	80092f6 <__ieee754_sqrt+0xda>
 800937a:	bf00      	nop
 800937c:	7ff00000 	.word	0x7ff00000

08009380 <_init>:
 8009380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009382:	bf00      	nop
 8009384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009386:	bc08      	pop	{r3}
 8009388:	469e      	mov	lr, r3
 800938a:	4770      	bx	lr

0800938c <_fini>:
 800938c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800938e:	bf00      	nop
 8009390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009392:	bc08      	pop	{r3}
 8009394:	469e      	mov	lr, r3
 8009396:	4770      	bx	lr

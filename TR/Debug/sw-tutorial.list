
sw-tutorial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090cc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fb8  08009254  08009254  00019254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a20c  0800a20c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800a20c  0800a20c  0001a20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a214  0800a214  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a214  0800a214  0001a214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a218  0800a218  0001a218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800a21c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          0000d8cc  20000098  20000098  00020098  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000d964  2000d964  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015f09  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000320b  00000000  00000000  00035fcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001240  00000000  00000000  000391d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001108  00000000  00000000  0003a418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ee2  00000000  00000000  0003b520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001695b  00000000  00000000  0005d402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c83a0  00000000  00000000  00073d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013c0fd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f8c  00000000  00000000  0013c150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800923c 	.word	0x0800923c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	0800923c 	.word	0x0800923c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b974 	b.w	8000ed0 <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	4604      	mov	r4, r0
 8000c08:	468e      	mov	lr, r1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d14d      	bne.n	8000caa <__udivmoddi4+0xaa>
 8000c0e:	428a      	cmp	r2, r1
 8000c10:	4694      	mov	ip, r2
 8000c12:	d969      	bls.n	8000ce8 <__udivmoddi4+0xe8>
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	b152      	cbz	r2, 8000c30 <__udivmoddi4+0x30>
 8000c1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1e:	f1c2 0120 	rsb	r1, r2, #32
 8000c22:	fa20 f101 	lsr.w	r1, r0, r1
 8000c26:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c2a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c2e:	4094      	lsls	r4, r2
 8000c30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c34:	0c21      	lsrs	r1, r4, #16
 8000c36:	fbbe f6f8 	udiv	r6, lr, r8
 8000c3a:	fa1f f78c 	uxth.w	r7, ip
 8000c3e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c42:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c46:	fb06 f107 	mul.w	r1, r6, r7
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x64>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c56:	f080 811f 	bcs.w	8000e98 <__udivmoddi4+0x298>
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	f240 811c 	bls.w	8000e98 <__udivmoddi4+0x298>
 8000c60:	3e02      	subs	r6, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1a5b      	subs	r3, r3, r1
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c74:	fb00 f707 	mul.w	r7, r0, r7
 8000c78:	42a7      	cmp	r7, r4
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x92>
 8000c7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c84:	f080 810a 	bcs.w	8000e9c <__udivmoddi4+0x29c>
 8000c88:	42a7      	cmp	r7, r4
 8000c8a:	f240 8107 	bls.w	8000e9c <__udivmoddi4+0x29c>
 8000c8e:	4464      	add	r4, ip
 8000c90:	3802      	subs	r0, #2
 8000c92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c96:	1be4      	subs	r4, r4, r7
 8000c98:	2600      	movs	r6, #0
 8000c9a:	b11d      	cbz	r5, 8000ca4 <__udivmoddi4+0xa4>
 8000c9c:	40d4      	lsrs	r4, r2
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d909      	bls.n	8000cc2 <__udivmoddi4+0xc2>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	f000 80ef 	beq.w	8000e92 <__udivmoddi4+0x292>
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cba:	4630      	mov	r0, r6
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	fab3 f683 	clz	r6, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d14a      	bne.n	8000d60 <__udivmoddi4+0x160>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xd4>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f200 80f9 	bhi.w	8000ec6 <__udivmoddi4+0x2c6>
 8000cd4:	1a84      	subs	r4, r0, r2
 8000cd6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	469e      	mov	lr, r3
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d0e0      	beq.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ce6:	e7dd      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce8:	b902      	cbnz	r2, 8000cec <__udivmoddi4+0xec>
 8000cea:	deff      	udf	#255	; 0xff
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	f040 8092 	bne.w	8000e1a <__udivmoddi4+0x21a>
 8000cf6:	eba1 010c 	sub.w	r1, r1, ip
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2601      	movs	r6, #1
 8000d04:	0c20      	lsrs	r0, r4, #16
 8000d06:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d0a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d0e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d12:	fb0e f003 	mul.w	r0, lr, r3
 8000d16:	4288      	cmp	r0, r1
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x12c>
 8000d1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x12a>
 8000d24:	4288      	cmp	r0, r1
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2c0>
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	1a09      	subs	r1, r1, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d34:	fb07 1110 	mls	r1, r7, r0, r1
 8000d38:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x156>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x154>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2ca>
 8000d54:	4608      	mov	r0, r1
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d5e:	e79c      	b.n	8000c9a <__udivmoddi4+0x9a>
 8000d60:	f1c6 0720 	rsb	r7, r6, #32
 8000d64:	40b3      	lsls	r3, r6
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d72:	fa01 f306 	lsl.w	r3, r1, r6
 8000d76:	431c      	orrs	r4, r3
 8000d78:	40f9      	lsrs	r1, r7
 8000d7a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d82:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d86:	0c20      	lsrs	r0, r4, #16
 8000d88:	fa1f fe8c 	uxth.w	lr, ip
 8000d8c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d90:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d94:	fb08 f00e 	mul.w	r0, r8, lr
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b8>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2bc>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2bc>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4461      	add	r1, ip
 8000db8:	1a09      	subs	r1, r1, r0
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc0:	fb09 1110 	mls	r1, r9, r0, r1
 8000dc4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dcc:	458e      	cmp	lr, r1
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1e2>
 8000dd0:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dda:	458e      	cmp	lr, r1
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dde:	3802      	subs	r0, #2
 8000de0:	4461      	add	r1, ip
 8000de2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dea:	eba1 010e 	sub.w	r1, r1, lr
 8000dee:	42a1      	cmp	r1, r4
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46a6      	mov	lr, r4
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x2a4>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x2a0>
 8000df8:	b15d      	cbz	r5, 8000e12 <__udivmoddi4+0x212>
 8000dfa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dfe:	eb61 010e 	sbc.w	r1, r1, lr
 8000e02:	fa01 f707 	lsl.w	r7, r1, r7
 8000e06:	fa22 f306 	lsr.w	r3, r2, r6
 8000e0a:	40f1      	lsrs	r1, r6
 8000e0c:	431f      	orrs	r7, r3
 8000e0e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e12:	2600      	movs	r6, #0
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	f1c2 0320 	rsb	r3, r2, #32
 8000e1e:	40d8      	lsrs	r0, r3
 8000e20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e24:	fa21 f303 	lsr.w	r3, r1, r3
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4301      	orrs	r1, r0
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e38:	fb07 3610 	mls	r6, r7, r0, r3
 8000e3c:	0c0b      	lsrs	r3, r1, #16
 8000e3e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e42:	fb00 f60e 	mul.w	r6, r0, lr
 8000e46:	429e      	cmp	r6, r3
 8000e48:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x260>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e58:	429e      	cmp	r6, r3
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4463      	add	r3, ip
 8000e60:	1b9b      	subs	r3, r3, r6
 8000e62:	b289      	uxth	r1, r1
 8000e64:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e68:	fb07 3316 	mls	r3, r7, r6, r3
 8000e6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e70:	fb06 f30e 	mul.w	r3, r6, lr
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x28a>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e86:	3e02      	subs	r6, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	1ac9      	subs	r1, r1, r3
 8000e8c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0x104>
 8000e92:	462e      	mov	r6, r5
 8000e94:	4628      	mov	r0, r5
 8000e96:	e705      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000e98:	4606      	mov	r6, r0
 8000e9a:	e6e3      	b.n	8000c64 <__udivmoddi4+0x64>
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	e6f8      	b.n	8000c92 <__udivmoddi4+0x92>
 8000ea0:	454b      	cmp	r3, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f8>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eac:	3801      	subs	r0, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f8>
 8000eb0:	4646      	mov	r6, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x28a>
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1e2>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x260>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b8>
 8000ec0:	3b02      	subs	r3, #2
 8000ec2:	4461      	add	r1, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x12c>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e709      	b.n	8000cde <__udivmoddi4+0xde>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x156>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <MX_CAN1_Init+0x64>)
 8000eda:	4a18      	ldr	r2, [pc, #96]	; (8000f3c <MX_CAN1_Init+0x68>)
 8000edc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <MX_CAN1_Init+0x64>)
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_CAN1_Init+0x64>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <MX_CAN1_Init+0x64>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_CAN1_Init+0x64>)
 8000ef2:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000ef6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_CAN1_Init+0x64>)
 8000efa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000efe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f00:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <MX_CAN1_Init+0x64>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_CAN1_Init+0x64>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f0c:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <MX_CAN1_Init+0x64>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_CAN1_Init+0x64>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f18:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <MX_CAN1_Init+0x64>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_CAN1_Init+0x64>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <MX_CAN1_Init+0x64>)
 8000f26:	f003 fbcd 	bl	80046c4 <HAL_CAN_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000f30:	f002 fcac 	bl	800388c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000194 	.word	0x20000194
 8000f3c:	40006400 	.word	0x40006400

08000f40 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <MX_CAN2_Init+0x64>)
 8000f46:	4a18      	ldr	r2, [pc, #96]	; (8000fa8 <MX_CAN2_Init+0x68>)
 8000f48:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8000f4a:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <MX_CAN2_Init+0x64>)
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <MX_CAN2_Init+0x64>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <MX_CAN2_Init+0x64>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <MX_CAN2_Init+0x64>)
 8000f5e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000f62:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <MX_CAN2_Init+0x64>)
 8000f66:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f6a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <MX_CAN2_Init+0x64>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <MX_CAN2_Init+0x64>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <MX_CAN2_Init+0x64>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <MX_CAN2_Init+0x64>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000f84:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <MX_CAN2_Init+0x64>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <MX_CAN2_Init+0x64>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000f90:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <MX_CAN2_Init+0x64>)
 8000f92:	f003 fb97 	bl	80046c4 <HAL_CAN_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000f9c:	f002 fc76 	bl	800388c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200001bc 	.word	0x200001bc
 8000fa8:	40006800 	.word	0x40006800

08000fac <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08c      	sub	sp, #48	; 0x30
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 031c 	add.w	r3, r7, #28
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a43      	ldr	r2, [pc, #268]	; (80010d8 <HAL_CAN_MspInit+0x12c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d136      	bne.n	800103c <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000fce:	4b43      	ldr	r3, [pc, #268]	; (80010dc <HAL_CAN_MspInit+0x130>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	4a41      	ldr	r2, [pc, #260]	; (80010dc <HAL_CAN_MspInit+0x130>)
 8000fd6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000fd8:	4b40      	ldr	r3, [pc, #256]	; (80010dc <HAL_CAN_MspInit+0x130>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d10d      	bne.n	8000ffc <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61bb      	str	r3, [r7, #24]
 8000fe4:	4b3e      	ldr	r3, [pc, #248]	; (80010e0 <HAL_CAN_MspInit+0x134>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	4a3d      	ldr	r2, [pc, #244]	; (80010e0 <HAL_CAN_MspInit+0x134>)
 8000fea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fee:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff0:	4b3b      	ldr	r3, [pc, #236]	; (80010e0 <HAL_CAN_MspInit+0x134>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff8:	61bb      	str	r3, [r7, #24]
 8000ffa:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	4b37      	ldr	r3, [pc, #220]	; (80010e0 <HAL_CAN_MspInit+0x134>)
 8001002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001004:	4a36      	ldr	r2, [pc, #216]	; (80010e0 <HAL_CAN_MspInit+0x134>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6313      	str	r3, [r2, #48]	; 0x30
 800100c:	4b34      	ldr	r3, [pc, #208]	; (80010e0 <HAL_CAN_MspInit+0x134>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001018:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800101c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800102a:	2309      	movs	r3, #9
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	4619      	mov	r1, r3
 8001034:	482b      	ldr	r0, [pc, #172]	; (80010e4 <HAL_CAN_MspInit+0x138>)
 8001036:	f004 fcb1 	bl	800599c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800103a:	e048      	b.n	80010ce <HAL_CAN_MspInit+0x122>
  else if(canHandle->Instance==CAN2)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a29      	ldr	r2, [pc, #164]	; (80010e8 <HAL_CAN_MspInit+0x13c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d143      	bne.n	80010ce <HAL_CAN_MspInit+0x122>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <HAL_CAN_MspInit+0x134>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	4a24      	ldr	r2, [pc, #144]	; (80010e0 <HAL_CAN_MspInit+0x134>)
 8001050:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001054:	6413      	str	r3, [r2, #64]	; 0x40
 8001056:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <HAL_CAN_MspInit+0x134>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <HAL_CAN_MspInit+0x130>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	3301      	adds	r3, #1
 8001068:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <HAL_CAN_MspInit+0x130>)
 800106a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800106c:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <HAL_CAN_MspInit+0x130>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d10d      	bne.n	8001090 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <HAL_CAN_MspInit+0x134>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	4a18      	ldr	r2, [pc, #96]	; (80010e0 <HAL_CAN_MspInit+0x134>)
 800107e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001082:	6413      	str	r3, [r2, #64]	; 0x40
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <HAL_CAN_MspInit+0x134>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_CAN_MspInit+0x134>)
 8001096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001098:	4a11      	ldr	r2, [pc, #68]	; (80010e0 <HAL_CAN_MspInit+0x134>)
 800109a:	f043 0302 	orr.w	r3, r3, #2
 800109e:	6313      	str	r3, [r2, #48]	; 0x30
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <HAL_CAN_MspInit+0x134>)
 80010a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80010ac:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80010b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80010be:	2309      	movs	r3, #9
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	4619      	mov	r1, r3
 80010c8:	4808      	ldr	r0, [pc, #32]	; (80010ec <HAL_CAN_MspInit+0x140>)
 80010ca:	f004 fc67 	bl	800599c <HAL_GPIO_Init>
}
 80010ce:	bf00      	nop
 80010d0:	3730      	adds	r7, #48	; 0x30
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40006400 	.word	0x40006400
 80010dc:	200001e4 	.word	0x200001e4
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40020000 	.word	0x40020000
 80010e8:	40006800 	.word	0x40006800
 80010ec:	40020400 	.word	0x40020400

080010f0 <can_init>:
	CAN_FilterConfigStructure.FilterBank = 0;

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
}

void can_init() {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 80010f6:	2300      	movs	r3, #0
 80010f8:	603b      	str	r3, [r7, #0]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 800110e:	2301      	movs	r3, #1
 8001110:	61fb      	str	r3, [r7, #28]
	CAN_FilterConfigStructure.FilterActivation = ENABLE;
 8001112:	2301      	movs	r3, #1
 8001114:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterBank = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]

	HAL_CAN_ConfigFilter(&hcan1, &CAN_FilterConfigStructure);
 800111a:	463b      	mov	r3, r7
 800111c:	4619      	mov	r1, r3
 800111e:	480d      	ldr	r0, [pc, #52]	; (8001154 <can_init+0x64>)
 8001120:	f003 fbcc 	bl	80048bc <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 8001124:	480b      	ldr	r0, [pc, #44]	; (8001154 <can_init+0x64>)
 8001126:	f003 fca9 	bl	8004a7c <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800112a:	2102      	movs	r1, #2
 800112c:	4809      	ldr	r0, [pc, #36]	; (8001154 <can_init+0x64>)
 800112e:	f003 fefa 	bl	8004f26 <HAL_CAN_ActivateNotification>

	HAL_CAN_ConfigFilter(&hcan2, &CAN_FilterConfigStructure);
 8001132:	463b      	mov	r3, r7
 8001134:	4619      	mov	r1, r3
 8001136:	4808      	ldr	r0, [pc, #32]	; (8001158 <can_init+0x68>)
 8001138:	f003 fbc0 	bl	80048bc <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan2);
 800113c:	4806      	ldr	r0, [pc, #24]	; (8001158 <can_init+0x68>)
 800113e:	f003 fc9d 	bl	8004a7c <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001142:	2102      	movs	r1, #2
 8001144:	4804      	ldr	r0, [pc, #16]	; (8001158 <can_init+0x68>)
 8001146:	f003 feee 	bl	8004f26 <HAL_CAN_ActivateNotification>
}
 800114a:	bf00      	nop
 800114c:	3728      	adds	r7, #40	; 0x28
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000194 	.word	0x20000194
 8001158:	200001bc 	.word	0x200001bc

0800115c <HAL_CAN_RxFifo0MsgPendingCallback>:
	__from_bigendian(data + 2, &(ptr->vel_rpm));
	__from_bigendian(data + 4, &(ptr->raw_current));
	ptr->temperature = data[6];
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b09a      	sub	sp, #104	; 0x68
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	uint8_t rx_data[8];
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	f107 021c 	add.w	r2, r7, #28
 800116c:	2100      	movs	r1, #0
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f003 fdc7 	bl	8004d02 <HAL_CAN_GetRxMessage>
	uint8_t base_id = rx_header.StdId - CAN_3508_M1_ID;
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	3b01      	subs	r3, #1
 800117a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (hcan == &hcan2) {
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a43      	ldr	r2, [pc, #268]	; (8001290 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d104      	bne.n	8001190 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
		base_id += 8;
 8001186:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800118a:	3308      	adds	r3, #8
 800118c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	663b      	str	r3, [r7, #96]	; 0x60
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	65fb      	str	r3, [r7, #92]	; 0x5c
	__from_bigendian(data, &(ptr->encoder));
 800119c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800119e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80011a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80011a2:	657b      	str	r3, [r7, #84]	; 0x54
	uint8_t *o = out;
 80011a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011a6:	653b      	str	r3, [r7, #80]	; 0x50
	*o = *(in + 1);
 80011a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011aa:	785a      	ldrb	r2, [r3, #1]
 80011ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011ae:	701a      	strb	r2, [r3, #0]
	*(o + 1) = *in;
 80011b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011b2:	3301      	adds	r3, #1
 80011b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80011b6:	7812      	ldrb	r2, [r2, #0]
 80011b8:	701a      	strb	r2, [r3, #0]
}
 80011ba:	bf00      	nop
	__from_bigendian(data + 2, &(ptr->vel_rpm));
 80011bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011be:	1c9a      	adds	r2, r3, #2
 80011c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011c2:	3302      	adds	r3, #2
 80011c4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80011c6:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t *o = out;
 80011c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011ca:	647b      	str	r3, [r7, #68]	; 0x44
	*o = *(in + 1);
 80011cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011ce:	785a      	ldrb	r2, [r3, #1]
 80011d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011d2:	701a      	strb	r2, [r3, #0]
	*(o + 1) = *in;
 80011d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011d6:	3301      	adds	r3, #1
 80011d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80011da:	7812      	ldrb	r2, [r2, #0]
 80011dc:	701a      	strb	r2, [r3, #0]
}
 80011de:	bf00      	nop
	__from_bigendian(data + 4, &(ptr->raw_current));
 80011e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011e2:	1d1a      	adds	r2, r3, #4
 80011e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011e6:	3304      	adds	r3, #4
 80011e8:	643a      	str	r2, [r7, #64]	; 0x40
 80011ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t *o = out;
 80011ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011ee:	63bb      	str	r3, [r7, #56]	; 0x38
	*o = *(in + 1);
 80011f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011f2:	785a      	ldrb	r2, [r3, #1]
 80011f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011f6:	701a      	strb	r2, [r3, #0]
	*(o + 1) = *in;
 80011f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011fa:	3301      	adds	r3, #1
 80011fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80011fe:	7812      	ldrb	r2, [r2, #0]
 8001200:	701a      	strb	r2, [r3, #0]
}
 8001202:	bf00      	nop
	ptr->temperature = data[6];
 8001204:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001206:	799a      	ldrb	r2, [r3, #6]
 8001208:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800120a:	719a      	strb	r2, [r3, #6]
}
 800120c:	bf00      	nop
	}
	MotorFeedback fb;
	__get_motor_fb(&fb, rx_data);
	rm_fb_cmd[base_id].encoder = fb.encoder;
 800120e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001212:	89b8      	ldrh	r0, [r7, #12]
 8001214:	491f      	ldr	r1, [pc, #124]	; (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001216:	4613      	mov	r3, r2
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	4413      	add	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	440b      	add	r3, r1
 8001220:	4602      	mov	r2, r0
 8001222:	801a      	strh	r2, [r3, #0]
	rm_fb_cmd[base_id].vel_rpm = fb.vel_rpm;
 8001224:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001228:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800122c:	4919      	ldr	r1, [pc, #100]	; (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	440b      	add	r3, r1
 8001238:	3302      	adds	r3, #2
 800123a:	4602      	mov	r2, r0
 800123c:	801a      	strh	r2, [r3, #0]
	rm_fb_cmd[base_id].actual_current = (float)fb.raw_current * 20.0f / 16384.0f;
 800123e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001242:	ee07 3a90 	vmov	s15, r3
 8001246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800124a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800124e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001252:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001256:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001298 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>
 800125a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800125e:	490d      	ldr	r1, [pc, #52]	; (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001260:	4613      	mov	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4413      	add	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	440b      	add	r3, r1
 800126a:	3304      	adds	r3, #4
 800126c:	edc3 7a00 	vstr	s15, [r3]
	rm_fb_cmd[base_id].temperature = fb.temperature;
 8001270:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001274:	7cb8      	ldrb	r0, [r7, #18]
 8001276:	4907      	ldr	r1, [pc, #28]	; (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001278:	4613      	mov	r3, r2
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4413      	add	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	440b      	add	r3, r1
 8001282:	3308      	adds	r3, #8
 8001284:	4602      	mov	r2, r0
 8001286:	701a      	strb	r2, [r3, #0]
}
 8001288:	bf00      	nop
 800128a:	3768      	adds	r7, #104	; 0x68
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200001bc 	.word	0x200001bc
 8001294:	200000d4 	.word	0x200000d4
 8001298:	46800000 	.word	0x46800000

0800129c <can_transmit>:

void can_transmit(CAN_HandleTypeDef *hcan, uint16_t id, int16_t msg1, int16_t msg2, int16_t msg3, int16_t msg4) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b08e      	sub	sp, #56	; 0x38
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	4608      	mov	r0, r1
 80012a6:	4611      	mov	r1, r2
 80012a8:	461a      	mov	r2, r3
 80012aa:	4603      	mov	r3, r0
 80012ac:	817b      	strh	r3, [r7, #10]
 80012ae:	460b      	mov	r3, r1
 80012b0:	813b      	strh	r3, [r7, #8]
 80012b2:	4613      	mov	r3, r2
 80012b4:	80fb      	strh	r3, [r7, #6]
	CAN_TxHeaderTypeDef tx_header;
	uint8_t data[8];
	uint32_t pTxMailbox;

	tx_header.StdId = id;
 80012b6:	897b      	ldrh	r3, [r7, #10]
 80012b8:	623b      	str	r3, [r7, #32]
	tx_header.IDE = CAN_ID_STD;
 80012ba:	2300      	movs	r3, #0
 80012bc:	62bb      	str	r3, [r7, #40]	; 0x28
	tx_header.RTR = CAN_RTR_DATA;
 80012be:	2300      	movs	r3, #0
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	tx_header.DLC = CAN_DATA_SIZE;
 80012c2:	2308      	movs	r3, #8
 80012c4:	633b      	str	r3, [r7, #48]	; 0x30
	tx_header.TransmitGlobalTime = DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	data[0] = msg1 >> 8;
 80012cc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80012d0:	121b      	asrs	r3, r3, #8
 80012d2:	b21b      	sxth	r3, r3
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	763b      	strb	r3, [r7, #24]
	data[1] = msg1;
 80012d8:	893b      	ldrh	r3, [r7, #8]
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	767b      	strb	r3, [r7, #25]
	data[2] = msg2 >> 8;
 80012de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012e2:	121b      	asrs	r3, r3, #8
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	76bb      	strb	r3, [r7, #26]
	data[3] = msg2;
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	76fb      	strb	r3, [r7, #27]
	data[4] = msg3 >> 8;
 80012f0:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80012f4:	121b      	asrs	r3, r3, #8
 80012f6:	b21b      	sxth	r3, r3
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	773b      	strb	r3, [r7, #28]
	data[5] = msg3;
 80012fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001300:	b2db      	uxtb	r3, r3
 8001302:	777b      	strb	r3, [r7, #29]
	data[6] = msg4 >> 8;
 8001304:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001308:	121b      	asrs	r3, r3, #8
 800130a:	b21b      	sxth	r3, r3
 800130c:	b2db      	uxtb	r3, r3
 800130e:	77bb      	strb	r3, [r7, #30]
	data[7] = msg4;
 8001310:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001314:	b2db      	uxtb	r3, r3
 8001316:	77fb      	strb	r3, [r7, #31]

	if (HAL_CAN_AddTxMessage(hcan, &tx_header, data, &pTxMailbox) == HAL_OK) {
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	f107 0218 	add.w	r2, r7, #24
 8001320:	f107 0120 	add.w	r1, r7, #32
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	f003 fbed 	bl	8004b04 <HAL_CAN_AddTxMessage>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d108      	bne.n	8001342 <can_transmit+0xa6>
		while (HAL_CAN_IsTxMessagePending(hcan, pTxMailbox))
 8001330:	bf00      	nop
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	4619      	mov	r1, r3
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f003 fcbf 	bl	8004cba <HAL_CAN_IsTxMessagePending>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f7      	bne.n	8001332 <can_transmit+0x96>
			;
	}
}
 8001342:	bf00      	nop
 8001344:	3738      	adds	r7, #56	; 0x38
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <can_ctrl_loop>:

void can_ctrl_loop() {
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af02      	add	r7, sp, #8
	/* ======= TX ======= */
	// CAN1
	can_transmit(&hcan1, RM_TX_GRP1_ID, rm_ctrl_cmd[CAN1_MOTOR0], rm_ctrl_cmd[CAN1_MOTOR1], rm_ctrl_cmd[CAN1_MOTOR2],
 8001352:	4b2e      	ldr	r3, [pc, #184]	; (800140c <can_ctrl_loop+0xc0>)
 8001354:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001358:	4b2c      	ldr	r3, [pc, #176]	; (800140c <can_ctrl_loop+0xc0>)
 800135a:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 800135e:	4b2b      	ldr	r3, [pc, #172]	; (800140c <can_ctrl_loop+0xc0>)
 8001360:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001364:	4a29      	ldr	r2, [pc, #164]	; (800140c <can_ctrl_loop+0xc0>)
 8001366:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800136a:	9201      	str	r2, [sp, #4]
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	4603      	mov	r3, r0
 8001370:	460a      	mov	r2, r1
 8001372:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001376:	4826      	ldr	r0, [pc, #152]	; (8001410 <can_ctrl_loop+0xc4>)
 8001378:	f7ff ff90 	bl	800129c <can_transmit>
				 rm_ctrl_cmd[CAN1_MOTOR3]);
	can_transmit(&hcan1, RM_TX_GRP2_ID, rm_ctrl_cmd[CAN1_MOTOR4], rm_ctrl_cmd[CAN1_MOTOR5], rm_ctrl_cmd[CAN1_MOTOR6],
 800137c:	4b23      	ldr	r3, [pc, #140]	; (800140c <can_ctrl_loop+0xc0>)
 800137e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8001382:	4b22      	ldr	r3, [pc, #136]	; (800140c <can_ctrl_loop+0xc0>)
 8001384:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8001388:	4b20      	ldr	r3, [pc, #128]	; (800140c <can_ctrl_loop+0xc0>)
 800138a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800138e:	4a1f      	ldr	r2, [pc, #124]	; (800140c <can_ctrl_loop+0xc0>)
 8001390:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001394:	9201      	str	r2, [sp, #4]
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	4603      	mov	r3, r0
 800139a:	460a      	mov	r2, r1
 800139c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013a0:	481b      	ldr	r0, [pc, #108]	; (8001410 <can_ctrl_loop+0xc4>)
 80013a2:	f7ff ff7b 	bl	800129c <can_transmit>
				 rm_ctrl_cmd[CAN1_MOTOR7]);

	// CAN2
	can_transmit(&hcan2, RM_TX_GRP1_ID, rm_ctrl_cmd[CAN2_MOTOR0], rm_ctrl_cmd[CAN2_MOTOR1], rm_ctrl_cmd[CAN2_MOTOR2],
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <can_ctrl_loop+0xc0>)
 80013a8:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 80013ac:	4b17      	ldr	r3, [pc, #92]	; (800140c <can_ctrl_loop+0xc0>)
 80013ae:	f9b3 0012 	ldrsh.w	r0, [r3, #18]
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <can_ctrl_loop+0xc0>)
 80013b4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80013b8:	4a14      	ldr	r2, [pc, #80]	; (800140c <can_ctrl_loop+0xc0>)
 80013ba:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 80013be:	9201      	str	r2, [sp, #4]
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	4603      	mov	r3, r0
 80013c4:	460a      	mov	r2, r1
 80013c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ca:	4812      	ldr	r0, [pc, #72]	; (8001414 <can_ctrl_loop+0xc8>)
 80013cc:	f7ff ff66 	bl	800129c <can_transmit>
				 rm_ctrl_cmd[CAN2_MOTOR3]);
	can_transmit(&hcan2, RM_TX_GRP2_ID, rm_ctrl_cmd[CAN2_MOTOR4], rm_ctrl_cmd[CAN2_MOTOR5], rm_ctrl_cmd[CAN2_MOTOR6],
 80013d0:	4b0e      	ldr	r3, [pc, #56]	; (800140c <can_ctrl_loop+0xc0>)
 80013d2:	f9b3 1018 	ldrsh.w	r1, [r3, #24]
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <can_ctrl_loop+0xc0>)
 80013d8:	f9b3 001a 	ldrsh.w	r0, [r3, #26]
 80013dc:	4b0b      	ldr	r3, [pc, #44]	; (800140c <can_ctrl_loop+0xc0>)
 80013de:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80013e2:	4a0a      	ldr	r2, [pc, #40]	; (800140c <can_ctrl_loop+0xc0>)
 80013e4:	f9b2 201e 	ldrsh.w	r2, [r2, #30]
 80013e8:	9201      	str	r2, [sp, #4]
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	4603      	mov	r3, r0
 80013ee:	460a      	mov	r2, r1
 80013f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013f4:	4807      	ldr	r0, [pc, #28]	; (8001414 <can_ctrl_loop+0xc8>)
 80013f6:	f7ff ff51 	bl	800129c <can_transmit>
				 rm_ctrl_cmd[CAN2_MOTOR7]);

	/* ======= RX ======= */
	HAL_CAN_RxFifo0MsgPendingCallback(&hcan1);
 80013fa:	4805      	ldr	r0, [pc, #20]	; (8001410 <can_ctrl_loop+0xc4>)
 80013fc:	f7ff feae 	bl	800115c <HAL_CAN_RxFifo0MsgPendingCallback>
	HAL_CAN_RxFifo0MsgPendingCallback(&hcan2);
 8001400:	4804      	ldr	r0, [pc, #16]	; (8001414 <can_ctrl_loop+0xc8>)
 8001402:	f7ff feab 	bl	800115c <HAL_CAN_RxFifo0MsgPendingCallback>
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200000b4 	.word	0x200000b4
 8001410:	20000194 	.word	0x20000194
 8001414:	200001bc 	.word	0x200001bc

08001418 <get_motor_feedback>:

/* USER FUNCTIONS */

MotorStats get_motor_feedback(Motor tar_motor) { return rm_fb_cmd[tar_motor]; }
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	70fb      	strb	r3, [r7, #3]
 8001424:	78fa      	ldrb	r2, [r7, #3]
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	4907      	ldr	r1, [pc, #28]	; (8001448 <get_motor_feedback+0x30>)
 800142a:	4613      	mov	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	18ca      	adds	r2, r1, r3
 8001434:	4603      	mov	r3, r0
 8001436:	ca07      	ldmia	r2, {r0, r1, r2}
 8001438:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	200000d4 	.word	0x200000d4

0800144c <set_motor_current>:

void set_motor_current(Motor tar_motor, int16_t tar_current) {
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	460a      	mov	r2, r1
 8001456:	71fb      	strb	r3, [r7, #7]
 8001458:	4613      	mov	r3, r2
 800145a:	80bb      	strh	r3, [r7, #4]
	if (tar_current > 16384) {
 800145c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001460:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001464:	dd03      	ble.n	800146e <set_motor_current+0x22>
		tar_current = 16384;
 8001466:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800146a:	80bb      	strh	r3, [r7, #4]
 800146c:	e007      	b.n	800147e <set_motor_current+0x32>
	} else if (tar_current < -16384) {
 800146e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001472:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8001476:	da02      	bge.n	800147e <set_motor_current+0x32>
		tar_current = -16384;
 8001478:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800147c:	80bb      	strh	r3, [r7, #4]
	}
	rm_ctrl_cmd[tar_motor] = tar_current;
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	4904      	ldr	r1, [pc, #16]	; (8001494 <set_motor_current+0x48>)
 8001482:	88ba      	ldrh	r2, [r7, #4]
 8001484:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	200000b4 	.word	0x200000b4

08001498 <max>:

int max (int currents[]) {
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	int tempmax = currents[0];
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < 500; i++) {
 80014a6:	2301      	movs	r3, #1
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	e010      	b.n	80014ce <max+0x36>
		if (tempmax < currents[i]) tempmax = currents[i];
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	4413      	add	r3, r2
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	da05      	bge.n	80014c8 <max+0x30>
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	4413      	add	r3, r2
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < 500; i++) {
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	3301      	adds	r3, #1
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014d4:	dbea      	blt.n	80014ac <max+0x14>
	}
	return tempmax;
 80014d6:	68fb      	ldr	r3, [r7, #12]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <min>:

int min (int currents[]) {
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	int tempmin = currents[0];
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < 500; i++) {
 80014f2:	2301      	movs	r3, #1
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	e010      	b.n	800151a <min+0x36>
		if (tempmin > currents[i]) tempmin = currents[i];
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	4413      	add	r3, r2
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	429a      	cmp	r2, r3
 8001506:	dd05      	ble.n	8001514 <min+0x30>
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	4413      	add	r3, r2
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < 500; i++) {
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	3301      	adds	r3, #1
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001520:	dbea      	blt.n	80014f8 <min+0x14>
	}
	return tempmin;
 8001522:	68fb      	ldr	r3, [r7, #12]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <average>:

int average (int currents[]) {
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	int tempsum = currents[0];
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < 500; i++) {
 800153e:	2301      	movs	r3, #1
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	e00a      	b.n	800155a <average+0x2a>
		tempsum += currents[i];
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	4413      	add	r3, r2
 8001552:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < 500; i++) {
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	3301      	adds	r3, #1
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001560:	dbf0      	blt.n	8001544 <average+0x14>
	}
	return tempsum/500;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4a05      	ldr	r2, [pc, #20]	; (800157c <average+0x4c>)
 8001566:	fb82 1203 	smull	r1, r2, r2, r3
 800156a:	1152      	asrs	r2, r2, #5
 800156c:	17db      	asrs	r3, r3, #31
 800156e:	1ad3      	subs	r3, r2, r3
}
 8001570:	4618      	mov	r0, r3
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	10624dd3 	.word	0x10624dd3

08001580 <General_PID>:
static double prev_error[MAX_NUM_OF_MOTORS];
static double accu[MAX_NUM_OF_MOTORS];
static double tar_current[MAX_NUM_OF_MOTORS];
//static double last_ticks[MAX_NUM_OF_MOTORS];

int32_t General_PID(Motor cur_motor, int16_t error, int16_t prev_error, double* accu, const double kp, const double ki, const double kd) {
 8001580:	b5b0      	push	{r4, r5, r7, lr}
 8001582:	b090      	sub	sp, #64	; 0x40
 8001584:	af00      	add	r7, sp, #0
 8001586:	61fb      	str	r3, [r7, #28]
 8001588:	ed87 0b04 	vstr	d0, [r7, #16]
 800158c:	ed87 1b02 	vstr	d1, [r7, #8]
 8001590:	ed87 2b00 	vstr	d2, [r7]
 8001594:	4603      	mov	r3, r0
 8001596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800159a:	460b      	mov	r3, r1
 800159c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800159e:	4613      	mov	r3, r2
 80015a0:	847b      	strh	r3, [r7, #34]	; 0x22

	// prevent 0
//	deltatime = (deltatime == 0)? 1 : deltatime; // Failed

	// P
	P_Gain = kp * error;
 80015a2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe ff60 	bl	800046c <__aeabi_i2d>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015b4:	f7fe ffc4 	bl	8000540 <__aeabi_dmul>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	// I
	*accu += error;
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80015c6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ff4e 	bl	800046c <__aeabi_i2d>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4620      	mov	r0, r4
 80015d6:	4629      	mov	r1, r5
 80015d8:	f7fe fdfc 	bl	80001d4 <__adddf3>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	69f9      	ldr	r1, [r7, #28]
 80015e2:	e9c1 2300 	strd	r2, r3, [r1]

	I_Gain = ki * (*accu);
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015f0:	f7fe ffa6 	bl	8000540 <__aeabi_dmul>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	// D
	D_Gain = kd * (error - prev_error) ;
 80015fc:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8001600:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe ff30 	bl	800046c <__aeabi_i2d>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001614:	f7fe ff94 	bl	8000540 <__aeabi_dmul>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

//	last_ticks[cur_motor] = HAL_GetTick();

	return (P_Gain + I_Gain + D_Gain);
 8001620:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001624:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001628:	f7fe fdd4 	bl	80001d4 <__adddf3>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001638:	f7fe fdcc 	bl	80001d4 <__adddf3>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4610      	mov	r0, r2
 8001642:	4619      	mov	r1, r3
 8001644:	f7ff fa2c 	bl	8000aa0 <__aeabi_d2iz>
 8001648:	4603      	mov	r3, r0

}
 800164a:	4618      	mov	r0, r3
 800164c:	3740      	adds	r7, #64	; 0x40
 800164e:	46bd      	mov	sp, r7
 8001650:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001654 <PID_variable_init>:



void PID_variable_init() {
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_NUM_OF_MOTORS; i++) {
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	e02f      	b.n	80016c0 <PID_variable_init+0x6c>
		indexes[i] = 0;
 8001660:	4a1c      	ldr	r2, [pc, #112]	; (80016d4 <PID_variable_init+0x80>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2100      	movs	r1, #0
 8001666:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		error[i] = 0;
 800166a:	4a1b      	ldr	r2, [pc, #108]	; (80016d8 <PID_variable_init+0x84>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	18d1      	adds	r1, r2, r3
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	f04f 0300 	mov.w	r3, #0
 800167a:	e9c1 2300 	strd	r2, r3, [r1]
		prev_error[i] = 0;
 800167e:	4a17      	ldr	r2, [pc, #92]	; (80016dc <PID_variable_init+0x88>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	18d1      	adds	r1, r2, r3
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	e9c1 2300 	strd	r2, r3, [r1]
		accu[i] = 0;
 8001692:	4a13      	ldr	r2, [pc, #76]	; (80016e0 <PID_variable_init+0x8c>)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	18d1      	adds	r1, r2, r3
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	e9c1 2300 	strd	r2, r3, [r1]
		tar_current[i] = 0;
 80016a6:	4a0f      	ldr	r2, [pc, #60]	; (80016e4 <PID_variable_init+0x90>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	18d1      	adds	r1, r2, r3
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < MAX_NUM_OF_MOTORS; i++) {
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3301      	adds	r3, #1
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b0f      	cmp	r3, #15
 80016c4:	ddcc      	ble.n	8001660 <PID_variable_init+0xc>
//		last_ticks[i] = 0;
	}
}
 80016c6:	bf00      	nop
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	20007ee8 	.word	0x20007ee8
 80016d8:	20007f28 	.word	0x20007f28
 80016dc:	20007fa8 	.word	0x20007fa8
 80016e0:	20008028 	.word	0x20008028
 80016e4:	200080a8 	.word	0x200080a8

080016e8 <set_motor_speed>:

//for (int i = 0, i < MAX_NUM_OF_MOTORS; i++) {
//	indexes[i]
//}

void set_motor_speed(Motor tar_motor, int16_t tar_vel, const double kp, const double ki, const double kd, const Motor motorlist[]) {
 80016e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ea:	b08d      	sub	sp, #52	; 0x34
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	ed87 0b04 	vstr	d0, [r7, #16]
 80016f4:	ed87 1b02 	vstr	d1, [r7, #8]
 80016f8:	ed87 2b00 	vstr	d2, [r7]
 80016fc:	61ba      	str	r2, [r7, #24]
 80016fe:	77fb      	strb	r3, [r7, #31]
 8001700:	460b      	mov	r3, r1
 8001702:	83bb      	strh	r3, [r7, #28]
	static double Cur_vel = 0;
	tar_vel = (tar_motor == motorlist[1] || tar_motor == motorlist[2] ) ? -tar_vel: tar_vel;
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	3301      	adds	r3, #1
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	7ffa      	ldrb	r2, [r7, #31]
 800170c:	429a      	cmp	r2, r3
 800170e:	d005      	beq.n	800171c <set_motor_speed+0x34>
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	3302      	adds	r3, #2
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	7ffa      	ldrb	r2, [r7, #31]
 8001718:	429a      	cmp	r2, r3
 800171a:	d104      	bne.n	8001726 <set_motor_speed+0x3e>
 800171c:	8bbb      	ldrh	r3, [r7, #28]
 800171e:	425b      	negs	r3, r3
 8001720:	b29b      	uxth	r3, r3
 8001722:	b21b      	sxth	r3, r3
 8001724:	e001      	b.n	800172a <set_motor_speed+0x42>
 8001726:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800172a:	83bb      	strh	r3, [r7, #28]
	// collect current velocity
	Cur_vel = get_motor_feedback(tar_motor).vel_rpm;
 800172c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001730:	7ffa      	ldrb	r2, [r7, #31]
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fe6f 	bl	8001418 <get_motor_feedback>
 800173a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe fe94 	bl	800046c <__aeabi_i2d>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4944      	ldr	r1, [pc, #272]	; (800185c <set_motor_speed+0x174>)
 800174a:	e9c1 2300 	strd	r2, r3, [r1]
	error[tar_motor] = tar_vel - Cur_vel;
 800174e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe fe8a 	bl	800046c <__aeabi_i2d>
 8001758:	4b40      	ldr	r3, [pc, #256]	; (800185c <set_motor_speed+0x174>)
 800175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175e:	7ffc      	ldrb	r4, [r7, #31]
 8001760:	f7fe fd36 	bl	80001d0 <__aeabi_dsub>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	483d      	ldr	r0, [pc, #244]	; (8001860 <set_motor_speed+0x178>)
 800176a:	00e1      	lsls	r1, r4, #3
 800176c:	4401      	add	r1, r0
 800176e:	e9c1 2300 	strd	r2, r3, [r1]

	// calculate error
	tar_current[tar_motor] = General_PID(tar_motor, error[tar_motor], prev_error[tar_motor], accu+tar_motor,kp,ki,kd);
 8001772:	7ffb      	ldrb	r3, [r7, #31]
 8001774:	4a3a      	ldr	r2, [pc, #232]	; (8001860 <set_motor_speed+0x178>)
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	4413      	add	r3, r2
 800177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	f7ff f98d 	bl	8000aa0 <__aeabi_d2iz>
 8001786:	4603      	mov	r3, r0
 8001788:	b21c      	sxth	r4, r3
 800178a:	7ffb      	ldrb	r3, [r7, #31]
 800178c:	4a35      	ldr	r2, [pc, #212]	; (8001864 <set_motor_speed+0x17c>)
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	4413      	add	r3, r2
 8001792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	f7ff f981 	bl	8000aa0 <__aeabi_d2iz>
 800179e:	4603      	mov	r3, r0
 80017a0:	b21a      	sxth	r2, r3
 80017a2:	7ffb      	ldrb	r3, [r7, #31]
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	4930      	ldr	r1, [pc, #192]	; (8001868 <set_motor_speed+0x180>)
 80017a8:	440b      	add	r3, r1
 80017aa:	7ff8      	ldrb	r0, [r7, #31]
 80017ac:	ed97 2b00 	vldr	d2, [r7]
 80017b0:	ed97 1b02 	vldr	d1, [r7, #8]
 80017b4:	ed97 0b04 	vldr	d0, [r7, #16]
 80017b8:	4621      	mov	r1, r4
 80017ba:	f7ff fee1 	bl	8001580 <General_PID>
 80017be:	4603      	mov	r3, r0
 80017c0:	7ffc      	ldrb	r4, [r7, #31]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fe52 	bl	800046c <__aeabi_i2d>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4827      	ldr	r0, [pc, #156]	; (800186c <set_motor_speed+0x184>)
 80017ce:	00e1      	lsls	r1, r4, #3
 80017d0:	4401      	add	r1, r0
 80017d2:	e9c1 2300 	strd	r2, r3, [r1]
	prev_error[tar_motor] = error[tar_motor];
 80017d6:	7ffb      	ldrb	r3, [r7, #31]
 80017d8:	7ff9      	ldrb	r1, [r7, #31]
 80017da:	4a21      	ldr	r2, [pc, #132]	; (8001860 <set_motor_speed+0x178>)
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	4413      	add	r3, r2
 80017e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e4:	481f      	ldr	r0, [pc, #124]	; (8001864 <set_motor_speed+0x17c>)
 80017e6:	00c9      	lsls	r1, r1, #3
 80017e8:	4401      	add	r1, r0
 80017ea:	e9c1 2300 	strd	r2, r3, [r1]

	set_motor_current(tar_motor,tar_current[tar_motor]);
 80017ee:	7ffb      	ldrb	r3, [r7, #31]
 80017f0:	4a1e      	ldr	r2, [pc, #120]	; (800186c <set_motor_speed+0x184>)
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	4413      	add	r3, r2
 80017f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fa:	4610      	mov	r0, r2
 80017fc:	4619      	mov	r1, r3
 80017fe:	f7ff f94f 	bl	8000aa0 <__aeabi_d2iz>
 8001802:	4603      	mov	r3, r0
 8001804:	b21a      	sxth	r2, r3
 8001806:	7ffb      	ldrb	r3, [r7, #31]
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fe1e 	bl	800144c <set_motor_current>

	currents[tar_motor][indexes[tar_motor]++ % 500] = Cur_vel;
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <set_motor_speed+0x174>)
 8001812:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001816:	7ffd      	ldrb	r5, [r7, #31]
 8001818:	7ffa      	ldrb	r2, [r7, #31]
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <set_motor_speed+0x188>)
 800181c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001820:	1c5c      	adds	r4, r3, #1
 8001822:	4e13      	ldr	r6, [pc, #76]	; (8001870 <set_motor_speed+0x188>)
 8001824:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
 8001828:	4a12      	ldr	r2, [pc, #72]	; (8001874 <set_motor_speed+0x18c>)
 800182a:	fb82 4203 	smull	r4, r2, r2, r3
 800182e:	1154      	asrs	r4, r2, #5
 8001830:	17da      	asrs	r2, r3, #31
 8001832:	1aa4      	subs	r4, r4, r2
 8001834:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001838:	fb04 f202 	mul.w	r2, r4, r2
 800183c:	1a9c      	subs	r4, r3, r2
 800183e:	f7ff f92f 	bl	8000aa0 <__aeabi_d2iz>
 8001842:	4602      	mov	r2, r0
 8001844:	490c      	ldr	r1, [pc, #48]	; (8001878 <set_motor_speed+0x190>)
 8001846:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800184a:	fb05 f303 	mul.w	r3, r5, r3
 800184e:	4423      	add	r3, r4
 8001850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	return;
 8001854:	bf00      	nop
}
 8001856:	3734      	adds	r7, #52	; 0x34
 8001858:	46bd      	mov	sp, r7
 800185a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800185c:	20008128 	.word	0x20008128
 8001860:	20007f28 	.word	0x20007f28
 8001864:	20007fa8 	.word	0x20007fa8
 8001868:	20008028 	.word	0x20008028
 800186c:	200080a8 	.word	0x200080a8
 8001870:	20007ee8 	.word	0x20007ee8
 8001874:	10624dd3 	.word	0x10624dd3
 8001878:	200001e8 	.word	0x200001e8

0800187c <testing>:

void testing(const Motor tar_motor[]) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b094      	sub	sp, #80	; 0x50
 8001880:	af04      	add	r7, sp, #16
 8001882:	6078      	str	r0, [r7, #4]
	int maximum[4];
	int minimum[4];
	int range[4];

	for (int i = 0; i < 4; i++) {
 8001884:	2300      	movs	r3, #0
 8001886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001888:	e03f      	b.n	800190a <testing+0x8e>
		maximum[i] = max(currents[tar_motor[i]]);
 800188a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	4413      	add	r3, r2
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001898:	fb02 f303 	mul.w	r3, r2, r3
 800189c:	4a34      	ldr	r2, [pc, #208]	; (8001970 <testing+0xf4>)
 800189e:	4413      	add	r3, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fdf9 	bl	8001498 <max>
 80018a6:	4602      	mov	r2, r0
 80018a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	3340      	adds	r3, #64	; 0x40
 80018ae:	443b      	add	r3, r7
 80018b0:	f843 2c14 	str.w	r2, [r3, #-20]
		minimum[i] = min(currents[tar_motor[i]]);
 80018b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80018c2:	fb02 f303 	mul.w	r3, r2, r3
 80018c6:	4a2a      	ldr	r2, [pc, #168]	; (8001970 <testing+0xf4>)
 80018c8:	4413      	add	r3, r2
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fe0a 	bl	80014e4 <min>
 80018d0:	4602      	mov	r2, r0
 80018d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	3340      	adds	r3, #64	; 0x40
 80018d8:	443b      	add	r3, r7
 80018da:	f843 2c24 	str.w	r2, [r3, #-36]
		range[i] = maximum[i] - minimum[i];
 80018de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	3340      	adds	r3, #64	; 0x40
 80018e4:	443b      	add	r3, r7
 80018e6:	f853 2c14 	ldr.w	r2, [r3, #-20]
 80018ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	3340      	adds	r3, #64	; 0x40
 80018f0:	443b      	add	r3, r7
 80018f2:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80018f6:	1ad2      	subs	r2, r2, r3
 80018f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	3340      	adds	r3, #64	; 0x40
 80018fe:	443b      	add	r3, r7
 8001900:	f843 2c34 	str.w	r2, [r3, #-52]
	for (int i = 0; i < 4; i++) {
 8001904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001906:	3301      	adds	r3, #1
 8001908:	63fb      	str	r3, [r7, #60]	; 0x3c
 800190a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800190c:	2b03      	cmp	r3, #3
 800190e:	ddbc      	ble.n	800188a <testing+0xe>
	}

	tft_prints(0, 6, "%d %d %d %d ", maximum[0], maximum[1], maximum[2], maximum[3]);
 8001910:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001914:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001916:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001918:	9102      	str	r1, [sp, #8]
 800191a:	9201      	str	r2, [sp, #4]
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	4603      	mov	r3, r0
 8001920:	4a14      	ldr	r2, [pc, #80]	; (8001974 <testing+0xf8>)
 8001922:	2106      	movs	r1, #6
 8001924:	2000      	movs	r0, #0
 8001926:	f001 f9d1 	bl	8002ccc <tft_prints>
	tft_prints(0, 7, "%d %d %d %d ", minimum[0], minimum[1], minimum[2], minimum[3]);
 800192a:	69f8      	ldr	r0, [r7, #28]
 800192c:	6a3b      	ldr	r3, [r7, #32]
 800192e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001930:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001932:	9102      	str	r1, [sp, #8]
 8001934:	9201      	str	r2, [sp, #4]
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	4603      	mov	r3, r0
 800193a:	4a0e      	ldr	r2, [pc, #56]	; (8001974 <testing+0xf8>)
 800193c:	2107      	movs	r1, #7
 800193e:	2000      	movs	r0, #0
 8001940:	f001 f9c4 	bl	8002ccc <tft_prints>

	tft_prints(0, 8, "%d %d ", range[0], range[1]);
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	4613      	mov	r3, r2
 800194c:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <testing+0xfc>)
 800194e:	2108      	movs	r1, #8
 8001950:	2000      	movs	r0, #0
 8001952:	f001 f9bb 	bl	8002ccc <tft_prints>
	tft_prints(0, 9, "%d %d ", range[2], range[3]);
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	4613      	mov	r3, r2
 800195e:	4a06      	ldr	r2, [pc, #24]	; (8001978 <testing+0xfc>)
 8001960:	2109      	movs	r1, #9
 8001962:	2000      	movs	r0, #0
 8001964:	f001 f9b2 	bl	8002ccc <tft_prints>
	return;
 8001968:	bf00      	nop
}
 800196a:	3740      	adds	r7, #64	; 0x40
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	200001e8 	.word	0x200001e8
 8001974:	08009254 	.word	0x08009254
 8001978:	08009264 	.word	0x08009264

0800197c <averagespeed>:

double averagespeed(Motor tar_motor) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
	return average(currents[tar_motor]);
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800198c:	fb02 f303 	mul.w	r3, r2, r3
 8001990:	4a09      	ldr	r2, [pc, #36]	; (80019b8 <averagespeed+0x3c>)
 8001992:	4413      	add	r3, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fdcb 	bl	8001530 <average>
 800199a:	4603      	mov	r3, r0
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fd65 	bl	800046c <__aeabi_i2d>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	ec43 2b17 	vmov	d7, r2, r3
}
 80019aa:	eeb0 0a47 	vmov.f32	s0, s14
 80019ae:	eef0 0a67 	vmov.f32	s1, s15
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	200001e8 	.word	0x200001e8

080019bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <MX_DMA_Init+0x3c>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <MX_DMA_Init+0x3c>)
 80019cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <MX_DMA_Init+0x3c>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	203b      	movs	r0, #59	; 0x3b
 80019e4:	f003 fba1 	bl	800512a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80019e8:	203b      	movs	r0, #59	; 0x3b
 80019ea:	f003 fbba 	bl	8005162 <HAL_NVIC_EnableIRQ>

}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800

080019fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	; 0x28
 8001a00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
 8001a10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	4b6c      	ldr	r3, [pc, #432]	; (8001bc8 <MX_GPIO_Init+0x1cc>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a6b      	ldr	r2, [pc, #428]	; (8001bc8 <MX_GPIO_Init+0x1cc>)
 8001a1c:	f043 0304 	orr.w	r3, r3, #4
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b69      	ldr	r3, [pc, #420]	; (8001bc8 <MX_GPIO_Init+0x1cc>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	4b65      	ldr	r3, [pc, #404]	; (8001bc8 <MX_GPIO_Init+0x1cc>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a64      	ldr	r2, [pc, #400]	; (8001bc8 <MX_GPIO_Init+0x1cc>)
 8001a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b62      	ldr	r3, [pc, #392]	; (8001bc8 <MX_GPIO_Init+0x1cc>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	4b5e      	ldr	r3, [pc, #376]	; (8001bc8 <MX_GPIO_Init+0x1cc>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a5d      	ldr	r2, [pc, #372]	; (8001bc8 <MX_GPIO_Init+0x1cc>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b5b      	ldr	r3, [pc, #364]	; (8001bc8 <MX_GPIO_Init+0x1cc>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	4b57      	ldr	r3, [pc, #348]	; (8001bc8 <MX_GPIO_Init+0x1cc>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a56      	ldr	r2, [pc, #344]	; (8001bc8 <MX_GPIO_Init+0x1cc>)
 8001a70:	f043 0302 	orr.w	r3, r3, #2
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b54      	ldr	r3, [pc, #336]	; (8001bc8 <MX_GPIO_Init+0x1cc>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	4b50      	ldr	r3, [pc, #320]	; (8001bc8 <MX_GPIO_Init+0x1cc>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a4f      	ldr	r2, [pc, #316]	; (8001bc8 <MX_GPIO_Init+0x1cc>)
 8001a8c:	f043 0308 	orr.w	r3, r3, #8
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b4d      	ldr	r3, [pc, #308]	; (8001bc8 <MX_GPIO_Init+0x1cc>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	603b      	str	r3, [r7, #0]
 8001a9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAM_WRST_Pin|TFT_RES_Pin|CAM_OE_Pin, GPIO_PIN_RESET);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f248 0150 	movw	r1, #32848	; 0x8050
 8001aa4:	4849      	ldr	r0, [pc, #292]	; (8001bcc <MX_GPIO_Init+0x1d0>)
 8001aa6:	f004 f92d 	bl	8005d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TFT_DC_Pin|TFT_CS_Pin, GPIO_PIN_RESET);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2130      	movs	r1, #48	; 0x30
 8001aae:	4848      	ldr	r0, [pc, #288]	; (8001bd0 <MX_GPIO_Init+0x1d4>)
 8001ab0:	f004 f928 	bl	8005d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_BL_Pin|CAM_WEN_Pin|CAM_RCLK_Pin|LED4_Pin
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f248 01f3 	movw	r1, #33011	; 0x80f3
 8001aba:	4846      	ldr	r0, [pc, #280]	; (8001bd4 <MX_GPIO_Init+0x1d8>)
 8001abc:	f004 f922 	bl	8005d04 <HAL_GPIO_WritePin>
                          |LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CAM_D7_Pin|CAM_D0_Pin|CAM_D1_Pin|CAM_D2_Pin
 8001ac0:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 8001ac4:	617b      	str	r3, [r7, #20]
                          |CAM_D3_Pin|CAM_D4_Pin|CAM_D5_Pin|CAM_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	483e      	ldr	r0, [pc, #248]	; (8001bd0 <MX_GPIO_Init+0x1d4>)
 8001ad6:	f003 ff61 	bl	800599c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CAM_HREF_Pin|CAM_RRST_Pin;
 8001ada:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	4619      	mov	r1, r3
 8001aee:	4837      	ldr	r0, [pc, #220]	; (8001bcc <MX_GPIO_Init+0x1d0>)
 8001af0:	f003 ff54 	bl	800599c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CAM_WRST_Pin|TFT_RES_Pin|CAM_OE_Pin;
 8001af4:	f248 0350 	movw	r3, #32848	; 0x8050
 8001af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afa:	2301      	movs	r3, #1
 8001afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b02:	2300      	movs	r3, #0
 8001b04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	482f      	ldr	r0, [pc, #188]	; (8001bcc <MX_GPIO_Init+0x1d0>)
 8001b0e:	f003 ff45 	bl	800599c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = TFT_DC_Pin|TFT_CS_Pin;
 8001b12:	2330      	movs	r3, #48	; 0x30
 8001b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b16:	2301      	movs	r3, #1
 8001b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	4619      	mov	r1, r3
 8001b28:	4829      	ldr	r0, [pc, #164]	; (8001bd0 <MX_GPIO_Init+0x1d4>)
 8001b2a:	f003 ff37 	bl	800599c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TFT_BL_Pin|CAM_WEN_Pin|CAM_RCLK_Pin|LED4_Pin
 8001b2e:	f248 03f3 	movw	r3, #33011	; 0x80f3
 8001b32:	617b      	str	r3, [r7, #20]
                          |LED3_Pin|LED2_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b34:	2301      	movs	r3, #1
 8001b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4619      	mov	r1, r3
 8001b46:	4823      	ldr	r0, [pc, #140]	; (8001bd4 <MX_GPIO_Init+0x1d8>)
 8001b48:	f003 ff28 	bl	800599c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Boot1_Pin;
 8001b4c:	2304      	movs	r3, #4
 8001b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boot1_GPIO_Port, &GPIO_InitStruct);
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	481d      	ldr	r0, [pc, #116]	; (8001bd4 <MX_GPIO_Init+0x1d8>)
 8001b60:	f003 ff1c 	bl	800599c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_VSYNC_Pin;
 8001b64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b6a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAM_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4816      	ldr	r0, [pc, #88]	; (8001bd4 <MX_GPIO_Init+0x1d8>)
 8001b7c:	f003 ff0e 	bl	800599c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 8001b80:	2304      	movs	r3, #4
 8001b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4619      	mov	r1, r3
 8001b92:	4811      	ldr	r0, [pc, #68]	; (8001bd8 <MX_GPIO_Init+0x1dc>)
 8001b94:	f003 ff02 	bl	800599c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8001b98:	2308      	movs	r3, #8
 8001b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	4619      	mov	r1, r3
 8001baa:	480a      	ldr	r0, [pc, #40]	; (8001bd4 <MX_GPIO_Init+0x1d8>)
 8001bac:	f003 fef6 	bl	800599c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	2028      	movs	r0, #40	; 0x28
 8001bb6:	f003 fab8 	bl	800512a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bba:	2028      	movs	r0, #40	; 0x28
 8001bbc:	f003 fad1 	bl	8005162 <HAL_NVIC_EnableIRQ>

}
 8001bc0:	bf00      	nop
 8001bc2:	3728      	adds	r7, #40	; 0x28
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40020000 	.word	0x40020000
 8001bd0:	40020800 	.word	0x40020800
 8001bd4:	40020400 	.word	0x40020400
 8001bd8:	40020c00 	.word	0x40020c00

08001bdc <tft_char_is_changed>:
/* Macro */
#define TFT_XY(x, y) ((y)*char_max_x + (x))  // 2D to 1D index

// Useful function to improve performance
static inline bool tft_char_is_changed(const TFTBuffer buf, uint8_t x,
        uint8_t y) {
 8001bdc:	b490      	push	{r4, r7}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	70fb      	strb	r3, [r7, #3]
 8001be8:	4613      	mov	r3, r2
 8001bea:	70bb      	strb	r3, [r7, #2]
    const uint16_t idx = TFT_XY(x, y);
 8001bec:	78bb      	ldrb	r3, [r7, #2]
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	4b3e      	ldr	r3, [pc, #248]	; (8001cec <tft_char_is_changed+0x110>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	fb12 f303 	smulbb	r3, r2, r3
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	4413      	add	r3, r2
 8001c02:	81fb      	strh	r3, [r7, #14]
    return ((buf->text_buf[buf->curr_screen][idx]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	89fa      	ldrh	r2, [r7, #14]
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	4603      	mov	r3, r0
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4403      	add	r3, r0
 8001c14:	015b      	lsls	r3, r3, #5
 8001c16:	440b      	add	r3, r1
 8001c18:	4413      	add	r3, r2
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	781a      	ldrb	r2, [r3, #0]
            != buf->text_buf[!buf->curr_screen][idx])
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	bf0c      	ite	eq
 8001c26:	2301      	moveq	r3, #1
 8001c28:	2300      	movne	r3, #0
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	461c      	mov	r4, r3
 8001c2e:	89f9      	ldrh	r1, [r7, #14]
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	4623      	mov	r3, r4
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4423      	add	r3, r4
 8001c38:	015b      	lsls	r3, r3, #5
 8001c3a:	4403      	add	r3, r0
 8001c3c:	440b      	add	r3, r1
 8001c3e:	3301      	adds	r3, #1
 8001c40:	781b      	ldrb	r3, [r3, #0]
            || (buf->text_color_buf[buf->curr_screen][idx]
                    != buf->text_color_buf[!buf->curr_screen][idx])
            || (buf->bg_color_buf[buf->curr_screen][idx]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d147      	bne.n	8001cd6 <tft_char_is_changed+0xfa>
            || (buf->text_color_buf[buf->curr_screen][idx]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	89f9      	ldrh	r1, [r7, #14]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	4603      	mov	r3, r0
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4403      	add	r3, r0
 8001c56:	015b      	lsls	r3, r3, #5
 8001c58:	440b      	add	r3, r1
 8001c5a:	33a0      	adds	r3, #160	; 0xa0
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	885a      	ldrh	r2, [r3, #2]
                    != buf->text_color_buf[!buf->curr_screen][idx])
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	bf0c      	ite	eq
 8001c6a:	2301      	moveq	r3, #1
 8001c6c:	2300      	movne	r3, #0
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	461c      	mov	r4, r3
 8001c72:	89f8      	ldrh	r0, [r7, #14]
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	4623      	mov	r3, r4
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4423      	add	r3, r4
 8001c7c:	015b      	lsls	r3, r3, #5
 8001c7e:	4403      	add	r3, r0
 8001c80:	33a0      	adds	r3, #160	; 0xa0
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	440b      	add	r3, r1
 8001c86:	885b      	ldrh	r3, [r3, #2]
            || (buf->text_color_buf[buf->curr_screen][idx]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d124      	bne.n	8001cd6 <tft_char_is_changed+0xfa>
            || (buf->bg_color_buf[buf->curr_screen][idx]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	89f9      	ldrh	r1, [r7, #14]
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	4603      	mov	r3, r0
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4403      	add	r3, r0
 8001c9c:	015b      	lsls	r3, r3, #5
 8001c9e:	440b      	add	r3, r1
 8001ca0:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	4413      	add	r3, r2
 8001ca8:	885a      	ldrh	r2, [r3, #2]
                    != buf->bg_color_buf[!buf->curr_screen][idx]));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	bf0c      	ite	eq
 8001cb2:	2301      	moveq	r3, #1
 8001cb4:	2300      	movne	r3, #0
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	461c      	mov	r4, r3
 8001cba:	89f8      	ldrh	r0, [r7, #14]
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	4623      	mov	r3, r4
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4423      	add	r3, r4
 8001cc4:	015b      	lsls	r3, r3, #5
 8001cc6:	4403      	add	r3, r0
 8001cc8:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	440b      	add	r3, r1
 8001cd0:	885b      	ldrh	r3, [r3, #2]
            || (buf->bg_color_buf[buf->curr_screen][idx]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d001      	beq.n	8001cda <tft_char_is_changed+0xfe>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <tft_char_is_changed+0x100>
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	b2db      	uxtb	r3, r3
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc90      	pop	{r4, r7}
 8001cea:	4770      	bx	lr
 8001cec:	20008139 	.word	0x20008139

08001cf0 <itos>:
 * @param      data  The string to write to
 * @param[in]  i     The signed integer to convert
 *
 * @return     Returns the new end pointer of the string
 */
static inline char* itos(char *data, int32_t i) {
 8001cf0:	b480      	push	{r7}
 8001cf2:	b089      	sub	sp, #36	; 0x24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
    if (i < 0) {
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	da07      	bge.n	8001d10 <itos+0x20>
        i = -i;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	425b      	negs	r3, r3
 8001d04:	603b      	str	r3, [r7, #0]
        *data++ = '-';
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	607a      	str	r2, [r7, #4]
 8001d0c:	222d      	movs	r2, #45	; 0x2d
 8001d0e:	701a      	strb	r2, [r3, #0]
    }
    char buf[14] = { 0 };
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	f107 0310 	add.w	r3, r7, #16
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	811a      	strh	r2, [r3, #8]
    char *ptr = &buf[1];
 8001d20:	f107 030c 	add.w	r3, r7, #12
 8001d24:	3301      	adds	r3, #1
 8001d26:	61fb      	str	r3, [r7, #28]
    do {
        *ptr++ = '0' + (i % 10);
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <itos+0xa8>)
 8001d2c:	fb83 1302 	smull	r1, r3, r3, r2
 8001d30:	1099      	asrs	r1, r3, #2
 8001d32:	17d3      	asrs	r3, r2, #31
 8001d34:	1ac9      	subs	r1, r1, r3
 8001d36:	460b      	mov	r3, r1
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	1ad1      	subs	r1, r2, r3
 8001d40:	b2ca      	uxtb	r2, r1
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	1c59      	adds	r1, r3, #1
 8001d46:	61f9      	str	r1, [r7, #28]
 8001d48:	3230      	adds	r2, #48	; 0x30
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	701a      	strb	r2, [r3, #0]
        i /= 10;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	4a11      	ldr	r2, [pc, #68]	; (8001d98 <itos+0xa8>)
 8001d52:	fb82 1203 	smull	r1, r2, r2, r3
 8001d56:	1092      	asrs	r2, r2, #2
 8001d58:	17db      	asrs	r3, r3, #31
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	603b      	str	r3, [r7, #0]
    } while (i);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1e1      	bne.n	8001d28 <itos+0x38>
    ptr--;
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	61fb      	str	r3, [r7, #28]
    while (*ptr) {
 8001d6a:	e007      	b.n	8001d7c <itos+0x8c>
        *data++ = *ptr--;
 8001d6c:	69fa      	ldr	r2, [r7, #28]
 8001d6e:	1e53      	subs	r3, r2, #1
 8001d70:	61fb      	str	r3, [r7, #28]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	1c59      	adds	r1, r3, #1
 8001d76:	6079      	str	r1, [r7, #4]
 8001d78:	7812      	ldrb	r2, [r2, #0]
 8001d7a:	701a      	strb	r2, [r3, #0]
    while (*ptr) {
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1f3      	bne.n	8001d6c <itos+0x7c>
    }
    *data = '\0';
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	701a      	strb	r2, [r3, #0]
    return data;
 8001d8a:	687b      	ldr	r3, [r7, #4]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3724      	adds	r7, #36	; 0x24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	66666667 	.word	0x66666667

08001d9c <utos0>:
 * @param[in]  i       The unsigned integer
 * @param[in]  digits  The number of digits
 *
 * @return     Returns the new end pointer of the string
 */
static inline char* utos0(char *data, uint32_t i, uint32_t digits) {
 8001d9c:	b480      	push	{r7}
 8001d9e:	b08d      	sub	sp, #52	; 0x34
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
    char buf[20] = { 0 };
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	f107 0318 	add.w	r3, r7, #24
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
    char *ptr = &buf[1];
 8001dba:	f107 0314 	add.w	r3, r7, #20
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    digits--;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	607b      	str	r3, [r7, #4]
    uint32_t n = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	62bb      	str	r3, [r7, #40]	; 0x28
    do {
        *ptr++ = '0' + (i % 10);
 8001dcc:	68b9      	ldr	r1, [r7, #8]
 8001dce:	4b21      	ldr	r3, [pc, #132]	; (8001e54 <utos0+0xb8>)
 8001dd0:	fba3 2301 	umull	r2, r3, r3, r1
 8001dd4:	08da      	lsrs	r2, r3, #3
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	1aca      	subs	r2, r1, r3
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de4:	1c59      	adds	r1, r3, #1
 8001de6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001de8:	3230      	adds	r2, #48	; 0x30
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	701a      	strb	r2, [r3, #0]
        i /= 10;
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	4a18      	ldr	r2, [pc, #96]	; (8001e54 <utos0+0xb8>)
 8001df2:	fba2 2303 	umull	r2, r3, r2, r3
 8001df6:	08db      	lsrs	r3, r3, #3
 8001df8:	60bb      	str	r3, [r7, #8]
        n++;
 8001dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    } while (i);
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1e2      	bne.n	8001dcc <utos0+0x30>
    ptr--;
 8001e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (n++ <= digits) {
 8001e0c:	e004      	b.n	8001e18 <utos0+0x7c>
        *data++ = '0';
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	60fa      	str	r2, [r7, #12]
 8001e14:	2230      	movs	r2, #48	; 0x30
 8001e16:	701a      	strb	r2, [r3, #0]
    while (n++ <= digits) {
 8001e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1a:	1c5a      	adds	r2, r3, #1
 8001e1c:	62ba      	str	r2, [r7, #40]	; 0x28
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d2f4      	bcs.n	8001e0e <utos0+0x72>
    }
    while (*ptr) {
 8001e24:	e007      	b.n	8001e36 <utos0+0x9a>
        *data++ = *ptr--;
 8001e26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e28:	1e53      	subs	r3, r2, #1
 8001e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	1c59      	adds	r1, r3, #1
 8001e30:	60f9      	str	r1, [r7, #12]
 8001e32:	7812      	ldrb	r2, [r2, #0]
 8001e34:	701a      	strb	r2, [r3, #0]
    while (*ptr) {
 8001e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f3      	bne.n	8001e26 <utos0+0x8a>
    }
    *data = '\0';
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
    return data;
 8001e44:	68fb      	ldr	r3, [r7, #12]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3734      	adds	r7, #52	; 0x34
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	cccccccd 	.word	0xcccccccd

08001e58 <ftos>:
 * @param[in]  i       The float
 * @param[in]  digits  The number of decimal places
 *
 * @return     Returns the new end pointer of the string
 */
static inline char* ftos(char *data, float a, uint32_t dp) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e64:	6079      	str	r1, [r7, #4]
    int32_t i = a;
 8001e66:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e6e:	ee17 3a90 	vmov	r3, s15
 8001e72:	61fb      	str	r3, [r7, #28]
    if (a < 0) {
 8001e74:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e80:	d515      	bpl.n	8001eae <ftos+0x56>
        *data++ = '-';
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	60fa      	str	r2, [r7, #12]
 8001e88:	222d      	movs	r2, #45	; 0x2d
 8001e8a:	701a      	strb	r2, [r3, #0]
        i = -i;
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	425b      	negs	r3, r3
 8001e90:	61fb      	str	r3, [r7, #28]
        a = -a - i;
 8001e92:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e96:	eeb1 7a67 	vneg.f32	s14, s15
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	ee07 3a90 	vmov	s15, r3
 8001ea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ea8:	edc7 7a02 	vstr	s15, [r7, #8]
 8001eac:	e00a      	b.n	8001ec4 <ftos+0x6c>
    } else {
        a = a - i;
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	ee07 3a90 	vmov	s15, r3
 8001eb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eb8:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ebc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ec0:	edc7 7a02 	vstr	s15, [r7, #8]
    }
    data = itos(data, i);
 8001ec4:	69f9      	ldr	r1, [r7, #28]
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f7ff ff12 	bl	8001cf0 <itos>
 8001ecc:	60f8      	str	r0, [r7, #12]
    *data++ = '.';
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	60fa      	str	r2, [r7, #12]
 8001ed4:	222e      	movs	r2, #46	; 0x2e
 8001ed6:	701a      	strb	r2, [r3, #0]
    float d = a;
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	61bb      	str	r3, [r7, #24]
    uint32_t __dp = dp;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	617b      	str	r3, [r7, #20]
    while (dp--) {
 8001ee0:	e007      	b.n	8001ef2 <ftos+0x9a>
        d *= 10;
 8001ee2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ee6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001eea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eee:	edc7 7a06 	vstr	s15, [r7, #24]
    while (dp--) {
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	1e5a      	subs	r2, r3, #1
 8001ef6:	607a      	str	r2, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f2      	bne.n	8001ee2 <ftos+0x8a>
    }
    if (__dp != 0)
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00e      	beq.n	8001f20 <ftos+0xc8>
        data = utos0(data, (uint32_t) (d + 0.5f), __dp);
 8001f02:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f06:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001f0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	ee17 1a90 	vmov	r1, s15
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f7ff ff3f 	bl	8001d9c <utos0>
 8001f1e:	60f8      	str	r0, [r7, #12]
    return data;
 8001f20:	68fb      	ldr	r3, [r7, #12]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3720      	adds	r7, #32
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <prints>:
}

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad) {
 8001f2a:	b4f0      	push	{r4, r5, r6, r7}
 8001f2c:	b08a      	sub	sp, #40	; 0x28
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	607a      	str	r2, [r7, #4]
 8001f36:	603b      	str	r3, [r7, #0]
    register int pc = 0, padchar = ' ';
 8001f38:	2400      	movs	r4, #0
 8001f3a:	2320      	movs	r3, #32
 8001f3c:	4619      	mov	r1, r3

    if (width > 0) {
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	dd17      	ble.n	8001f74 <prints+0x4a>
        register int len = 0;
 8001f44:	2500      	movs	r5, #0
        register const char *ptr;
        for (ptr = string; *ptr; ++ptr)
 8001f46:	68be      	ldr	r6, [r7, #8]
 8001f48:	e001      	b.n	8001f4e <prints+0x24>
            ++len;
 8001f4a:	3501      	adds	r5, #1
        for (ptr = string; *ptr; ++ptr)
 8001f4c:	3601      	adds	r6, #1
 8001f4e:	7833      	ldrb	r3, [r6, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1fa      	bne.n	8001f4a <prints+0x20>
        if (len >= width)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	429d      	cmp	r5, r3
 8001f58:	db02      	blt.n	8001f60 <prints+0x36>
            width = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	607b      	str	r3, [r7, #4]
 8001f5e:	e002      	b.n	8001f66 <prints+0x3c>
        else
            width -= len;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	1b5b      	subs	r3, r3, r5
 8001f64:	607b      	str	r3, [r7, #4]
        if (pad & PAD_ZERO)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <prints+0x4a>
            padchar = '0';
 8001f70:	2330      	movs	r3, #48	; 0x30
 8001f72:	4619      	mov	r1, r3
    }
    if (!(pad & PAD_RIGHT)) {
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d12c      	bne.n	8001fd8 <prints+0xae>
        for (; width > 0; --width) {
 8001f7e:	e012      	b.n	8001fa6 <prints+0x7c>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
 8001f84:	460b      	mov	r3, r1
 8001f86:	623b      	str	r3, [r7, #32]
    **str = (char) c;
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6a3a      	ldr	r2, [r7, #32]
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	701a      	strb	r2, [r3, #0]
    ++(*str);
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	601a      	str	r2, [r3, #0]
}
 8001f9c:	bf00      	nop
            printchar(out, padchar);
            ++pc;
 8001f9e:	3401      	adds	r4, #1
        for (; width > 0; --width) {
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	607b      	str	r3, [r7, #4]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	dce9      	bgt.n	8001f80 <prints+0x56>
        }
    }
    for (; *string; ++string) {
 8001fac:	e014      	b.n	8001fd8 <prints+0xae>
        printchar(out, *string);
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	61fb      	str	r3, [r7, #28]
 8001fb8:	61ba      	str	r2, [r7, #24]
    **str = (char) c;
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	701a      	strb	r2, [r3, #0]
    ++(*str);
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	1c5a      	adds	r2, r3, #1
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	601a      	str	r2, [r3, #0]
}
 8001fce:	bf00      	nop
        ++pc;
 8001fd0:	3401      	adds	r4, #1
    for (; *string; ++string) {
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	60bb      	str	r3, [r7, #8]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1e6      	bne.n	8001fae <prints+0x84>
    }
    for (; width > 0; --width) {
 8001fe0:	e012      	b.n	8002008 <prints+0xde>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	613b      	str	r3, [r7, #16]
    **str = (char) c;
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	701a      	strb	r2, [r3, #0]
    ++(*str);
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	601a      	str	r2, [r3, #0]
}
 8001ffe:	bf00      	nop
        printchar(out, padchar);
        ++pc;
 8002000:	3401      	adds	r4, #1
    for (; width > 0; --width) {
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3b01      	subs	r3, #1
 8002006:	607b      	str	r3, [r7, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	dce9      	bgt.n	8001fe2 <prints+0xb8>
    }

    return pc;
 800200e:	4623      	mov	r3, r4
}
 8002010:	4618      	mov	r0, r3
 8002012:	3728      	adds	r7, #40	; 0x28
 8002014:	46bd      	mov	sp, r7
 8002016:	bcf0      	pop	{r4, r5, r6, r7}
 8002018:	4770      	bx	lr

0800201a <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad,
        int letbase) {
 800201a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800201e:	b08b      	sub	sp, #44	; 0x2c
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
 8002028:	603b      	str	r3, [r7, #0]
    char print_buf[PRINT_BUF_LEN];
    register char *s;
    register int t, neg = 0, pc = 0;
 800202a:	f04f 0900 	mov.w	r9, #0
 800202e:	2600      	movs	r6, #0
    register unsigned int u = (unsigned int) i;
 8002030:	68bd      	ldr	r5, [r7, #8]

    if (i == 0) {
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10c      	bne.n	8002052 <printi+0x38>
        print_buf[0] = '0';
 8002038:	2330      	movs	r3, #48	; 0x30
 800203a:	753b      	strb	r3, [r7, #20]
        print_buf[1] = '\0';
 800203c:	2300      	movs	r3, #0
 800203e:	757b      	strb	r3, [r7, #21]
        return prints(out, print_buf, width, pad);
 8002040:	f107 0114 	add.w	r1, r7, #20
 8002044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002046:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f7ff ff6e 	bl	8001f2a <prints>
 800204e:	4603      	mov	r3, r0
 8002050:	e055      	b.n	80020fe <printi+0xe4>
    }

    if (sg && b == 10 && i < 0) {
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00a      	beq.n	800206e <printi+0x54>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b0a      	cmp	r3, #10
 800205c:	d107      	bne.n	800206e <printi+0x54>
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2b00      	cmp	r3, #0
 8002062:	da04      	bge.n	800206e <printi+0x54>
        neg = 1;
 8002064:	f04f 0901 	mov.w	r9, #1
        u = (unsigned int) -i;
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	425b      	negs	r3, r3
 800206c:	461d      	mov	r5, r3
    }

    s = print_buf + PRINT_BUF_LEN - 1;
 800206e:	f107 0414 	add.w	r4, r7, #20
 8002072:	340b      	adds	r4, #11
    *s = '\0';
 8002074:	2300      	movs	r3, #0
 8002076:	7023      	strb	r3, [r4, #0]

    while (u) {
 8002078:	e015      	b.n	80020a6 <printi+0x8c>
        t = (unsigned int) u % b;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	fbb5 f2f3 	udiv	r2, r5, r3
 8002080:	fb02 f303 	mul.w	r3, r2, r3
 8002084:	1aeb      	subs	r3, r5, r3
 8002086:	4698      	mov	r8, r3
        if (t >= 10)
 8002088:	f1b8 0f09 	cmp.w	r8, #9
 800208c:	dd02      	ble.n	8002094 <printi+0x7a>
            t += letbase - '0' - 10;
 800208e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002090:	3b3a      	subs	r3, #58	; 0x3a
 8002092:	4498      	add	r8, r3
        *--s = (char) (t + '0');
 8002094:	fa5f f388 	uxtb.w	r3, r8
 8002098:	3c01      	subs	r4, #1
 800209a:	3330      	adds	r3, #48	; 0x30
 800209c:	b2db      	uxtb	r3, r3
 800209e:	7023      	strb	r3, [r4, #0]
        u /= b;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	fbb5 f5f3 	udiv	r5, r5, r3
    while (u) {
 80020a6:	2d00      	cmp	r5, #0
 80020a8:	d1e7      	bne.n	800207a <printi+0x60>
    }

    if (neg) {
 80020aa:	f1b9 0f00 	cmp.w	r9, #0
 80020ae:	d01e      	beq.n	80020ee <printi+0xd4>
        if (width && (pad & PAD_ZERO)) {
 80020b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d018      	beq.n	80020e8 <printi+0xce>
 80020b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d013      	beq.n	80020e8 <printi+0xce>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
 80020c4:	232d      	movs	r3, #45	; 0x2d
 80020c6:	623b      	str	r3, [r7, #32]
    **str = (char) c;
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6a3a      	ldr	r2, [r7, #32]
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	701a      	strb	r2, [r3, #0]
    ++(*str);
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	601a      	str	r2, [r3, #0]
}
 80020dc:	bf00      	nop
            printchar(out, '-');
            ++pc;
 80020de:	3601      	adds	r6, #1
            --width;
 80020e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020e2:	3b01      	subs	r3, #1
 80020e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80020e6:	e002      	b.n	80020ee <printi+0xd4>
        } else {
            *--s = '-';
 80020e8:	3c01      	subs	r4, #1
 80020ea:	232d      	movs	r3, #45	; 0x2d
 80020ec:	7023      	strb	r3, [r4, #0]
        }
    }

    return pc + prints(out, s, width, pad);
 80020ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80020f2:	4621      	mov	r1, r4
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f7ff ff18 	bl	8001f2a <prints>
 80020fa:	4603      	mov	r3, r0
 80020fc:	4433      	add	r3, r6
}
 80020fe:	4618      	mov	r0, r3
 8002100:	372c      	adds	r7, #44	; 0x2c
 8002102:	46bd      	mov	sp, r7
 8002104:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002108 <printf_>:

static int printf_(char **out, float f, int width, int dp, int pad) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b090      	sub	sp, #64	; 0x40
 800210c:	af00      	add	r7, sp, #0
 800210e:	6178      	str	r0, [r7, #20]
 8002110:	ed87 0a04 	vstr	s0, [r7, #16]
 8002114:	60f9      	str	r1, [r7, #12]
 8002116:	60ba      	str	r2, [r7, #8]
 8002118:	607b      	str	r3, [r7, #4]
    char buf[40] = { 0 };
 800211a:	2300      	movs	r3, #0
 800211c:	61bb      	str	r3, [r7, #24]
 800211e:	f107 031c 	add.w	r3, r7, #28
 8002122:	2224      	movs	r2, #36	; 0x24
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f006 ffa2 	bl	8009070 <memset>
    ftos(buf, f, dp);
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	f107 0318 	add.w	r3, r7, #24
 8002132:	4611      	mov	r1, r2
 8002134:	ed97 0a04 	vldr	s0, [r7, #16]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fe8d 	bl	8001e58 <ftos>
    return prints(out, buf, width, pad);
 800213e:	f107 0118 	add.w	r1, r7, #24
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	6978      	ldr	r0, [r7, #20]
 8002148:	f7ff feef 	bl	8001f2a <prints>
 800214c:	4603      	mov	r3, r0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3740      	adds	r7, #64	; 0x40
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <print>:
 * @param out pointer to Output string
 * @param format Format string
 * @param args Arguments
 * @return length of string
 */
static int print(char **out, const char *format, va_list args) {
 8002158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800215c:	b08c      	sub	sp, #48	; 0x30
 800215e:	af04      	add	r7, sp, #16
 8002160:	60f8      	str	r0, [r7, #12]
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
    register int width, pad, dp;
    register int pc = 0;
 8002166:	2400      	movs	r4, #0
    char scr[2];

    for (; *format != 0; ++format) {
 8002168:	e109      	b.n	800237e <print+0x226>
        if (*format == '%') {
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b25      	cmp	r3, #37	; 0x25
 8002170:	f040 80ed 	bne.w	800234e <print+0x1f6>
            ++format;
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	3301      	adds	r3, #1
 8002178:	60bb      	str	r3, [r7, #8]
            width = pad = dp = 0;
 800217a:	f04f 0800 	mov.w	r8, #0
 800217e:	4646      	mov	r6, r8
 8002180:	4635      	mov	r5, r6
            if (*format == '\0')
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 80ff 	beq.w	800238a <print+0x232>
                break;
            if (*format == '%')
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b25      	cmp	r3, #37	; 0x25
 8002192:	f000 80de 	beq.w	8002352 <print+0x1fa>
                goto out;
            if (*format == '-') {
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b2d      	cmp	r3, #45	; 0x2d
 800219c:	d109      	bne.n	80021b2 <print+0x5a>
                ++format;
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	3301      	adds	r3, #1
 80021a2:	60bb      	str	r3, [r7, #8]
                pad = PAD_RIGHT;
 80021a4:	2601      	movs	r6, #1
            }
            while (*format == '0') {
 80021a6:	e004      	b.n	80021b2 <print+0x5a>
                ++format;
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	3301      	adds	r3, #1
 80021ac:	60bb      	str	r3, [r7, #8]
                pad |= PAD_ZERO;
 80021ae:	f046 0602 	orr.w	r6, r6, #2
            while (*format == '0') {
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b30      	cmp	r3, #48	; 0x30
 80021b8:	d0f6      	beq.n	80021a8 <print+0x50>
            }
            for (; *format >= '0' && *format <= '9'; ++format) {
 80021ba:	e00b      	b.n	80021d4 <print+0x7c>
                width *= 10;
 80021bc:	462b      	mov	r3, r5
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	442b      	add	r3, r5
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	461d      	mov	r5, r3
                width += *format - '0';
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	3b30      	subs	r3, #48	; 0x30
 80021cc:	441d      	add	r5, r3
            for (; *format >= '0' && *format <= '9'; ++format) {
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	3301      	adds	r3, #1
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b2f      	cmp	r3, #47	; 0x2f
 80021da:	d903      	bls.n	80021e4 <print+0x8c>
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b39      	cmp	r3, #57	; 0x39
 80021e2:	d9eb      	bls.n	80021bc <print+0x64>
            }
            if (*format == '.') {
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b2e      	cmp	r3, #46	; 0x2e
 80021ea:	d117      	bne.n	800221c <print+0xc4>
                ++format;
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	3301      	adds	r3, #1
 80021f0:	60bb      	str	r3, [r7, #8]
                for (; *format >= '0' && *format <= '9'; ++format) {
 80021f2:	e00b      	b.n	800220c <print+0xb4>
                    dp *= 10;
 80021f4:	4643      	mov	r3, r8
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4443      	add	r3, r8
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	4698      	mov	r8, r3
                    dp += *format - '0';
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	3b30      	subs	r3, #48	; 0x30
 8002204:	4498      	add	r8, r3
                for (; *format >= '0' && *format <= '9'; ++format) {
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	3301      	adds	r3, #1
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b2f      	cmp	r3, #47	; 0x2f
 8002212:	d903      	bls.n	800221c <print+0xc4>
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b39      	cmp	r3, #57	; 0x39
 800221a:	d9eb      	bls.n	80021f4 <print+0x9c>
                }
            }
            if (*format == 's') {
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b73      	cmp	r3, #115	; 0x73
 8002222:	d112      	bne.n	800224a <print+0xf2>
                register char *s = (char*) va_arg(args, int);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	1d1a      	adds	r2, r3, #4
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4698      	mov	r8, r3
                pc += prints(out, s ? s : "(null)", width, pad);
 800222e:	f1b8 0f00 	cmp.w	r8, #0
 8002232:	d001      	beq.n	8002238 <print+0xe0>
 8002234:	4641      	mov	r1, r8
 8002236:	e000      	b.n	800223a <print+0xe2>
 8002238:	4957      	ldr	r1, [pc, #348]	; (8002398 <print+0x240>)
 800223a:	4633      	mov	r3, r6
 800223c:	462a      	mov	r2, r5
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f7ff fe73 	bl	8001f2a <prints>
 8002244:	4603      	mov	r3, r0
 8002246:	441c      	add	r4, r3
                continue;
 8002248:	e096      	b.n	8002378 <print+0x220>
            }
            if (*format == 'd') {
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b64      	cmp	r3, #100	; 0x64
 8002250:	d10f      	bne.n	8002272 <print+0x11a>
                pc += printi(out, va_arg(args, int), 10, 1, width, pad, 'a');
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	1d1a      	adds	r2, r3, #4
 8002256:	607a      	str	r2, [r7, #4]
 8002258:	6819      	ldr	r1, [r3, #0]
 800225a:	2361      	movs	r3, #97	; 0x61
 800225c:	9302      	str	r3, [sp, #8]
 800225e:	9601      	str	r6, [sp, #4]
 8002260:	9500      	str	r5, [sp, #0]
 8002262:	2301      	movs	r3, #1
 8002264:	220a      	movs	r2, #10
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f7ff fed7 	bl	800201a <printi>
 800226c:	4603      	mov	r3, r0
 800226e:	441c      	add	r4, r3
                continue;
 8002270:	e082      	b.n	8002378 <print+0x220>
            }
            if (*format == 'x') {
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b78      	cmp	r3, #120	; 0x78
 8002278:	d10f      	bne.n	800229a <print+0x142>
                pc += printi(out, va_arg(args, int), 16, 0, width, pad, 'a');
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	1d1a      	adds	r2, r3, #4
 800227e:	607a      	str	r2, [r7, #4]
 8002280:	6819      	ldr	r1, [r3, #0]
 8002282:	2361      	movs	r3, #97	; 0x61
 8002284:	9302      	str	r3, [sp, #8]
 8002286:	9601      	str	r6, [sp, #4]
 8002288:	9500      	str	r5, [sp, #0]
 800228a:	2300      	movs	r3, #0
 800228c:	2210      	movs	r2, #16
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f7ff fec3 	bl	800201a <printi>
 8002294:	4603      	mov	r3, r0
 8002296:	441c      	add	r4, r3
                continue;
 8002298:	e06e      	b.n	8002378 <print+0x220>
            }
            if (*format == 'X') {
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b58      	cmp	r3, #88	; 0x58
 80022a0:	d10f      	bne.n	80022c2 <print+0x16a>
                pc += printi(out, va_arg(args, int), 16, 0, width, pad, 'A');
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	1d1a      	adds	r2, r3, #4
 80022a6:	607a      	str	r2, [r7, #4]
 80022a8:	6819      	ldr	r1, [r3, #0]
 80022aa:	2341      	movs	r3, #65	; 0x41
 80022ac:	9302      	str	r3, [sp, #8]
 80022ae:	9601      	str	r6, [sp, #4]
 80022b0:	9500      	str	r5, [sp, #0]
 80022b2:	2300      	movs	r3, #0
 80022b4:	2210      	movs	r2, #16
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f7ff feaf 	bl	800201a <printi>
 80022bc:	4603      	mov	r3, r0
 80022be:	441c      	add	r4, r3
                continue;
 80022c0:	e05a      	b.n	8002378 <print+0x220>
            }
            if (*format == 'u') {
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b75      	cmp	r3, #117	; 0x75
 80022c8:	d10f      	bne.n	80022ea <print+0x192>
                pc += printi(out, va_arg(args, int), 10, 0, width, pad, 'a');
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	1d1a      	adds	r2, r3, #4
 80022ce:	607a      	str	r2, [r7, #4]
 80022d0:	6819      	ldr	r1, [r3, #0]
 80022d2:	2361      	movs	r3, #97	; 0x61
 80022d4:	9302      	str	r3, [sp, #8]
 80022d6:	9601      	str	r6, [sp, #4]
 80022d8:	9500      	str	r5, [sp, #0]
 80022da:	2300      	movs	r3, #0
 80022dc:	220a      	movs	r2, #10
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f7ff fe9b 	bl	800201a <printi>
 80022e4:	4603      	mov	r3, r0
 80022e6:	441c      	add	r4, r3
                continue;
 80022e8:	e046      	b.n	8002378 <print+0x220>
            }
            if (*format == 'c') {
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b63      	cmp	r3, #99	; 0x63
 80022f0:	d111      	bne.n	8002316 <print+0x1be>
                /* char are converted to int then pushed on the stack */
                scr[0] = (char) va_arg(args, int);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	1d1a      	adds	r2, r3, #4
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	753b      	strb	r3, [r7, #20]
                scr[1] = '\0';
 80022fe:	2300      	movs	r3, #0
 8002300:	757b      	strb	r3, [r7, #21]
                pc += prints(out, scr, width, pad);
 8002302:	f107 0114 	add.w	r1, r7, #20
 8002306:	4633      	mov	r3, r6
 8002308:	462a      	mov	r2, r5
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f7ff fe0d 	bl	8001f2a <prints>
 8002310:	4603      	mov	r3, r0
 8002312:	441c      	add	r4, r3
                continue;
 8002314:	e030      	b.n	8002378 <print+0x220>
            }
            if (*format == 'f') {
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b66      	cmp	r3, #102	; 0x66
 800231c:	d12c      	bne.n	8002378 <print+0x220>
                pc += printf_(out, va_arg(args, double), width, dp, pad);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3307      	adds	r3, #7
 8002322:	f023 0307 	bic.w	r3, r3, #7
 8002326:	f103 0208 	add.w	r2, r3, #8
 800232a:	607a      	str	r2, [r7, #4]
 800232c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002330:	4610      	mov	r0, r2
 8002332:	4619      	mov	r1, r3
 8002334:	f7fe fbfc 	bl	8000b30 <__aeabi_d2f>
 8002338:	4633      	mov	r3, r6
 800233a:	4642      	mov	r2, r8
 800233c:	4629      	mov	r1, r5
 800233e:	ee00 0a10 	vmov	s0, r0
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f7ff fee0 	bl	8002108 <printf_>
 8002348:	4603      	mov	r3, r0
 800234a:	441c      	add	r4, r3
                continue;
 800234c:	e014      	b.n	8002378 <print+0x220>
            }
        } else {
            out: printchar(out, *format);
 800234e:	bf00      	nop
 8002350:	e000      	b.n	8002354 <print+0x1fc>
                goto out;
 8002352:	bf00      	nop
            out: printchar(out, *format);
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	461a      	mov	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	61fb      	str	r3, [r7, #28]
 800235e:	61ba      	str	r2, [r7, #24]
    **str = (char) c;
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	701a      	strb	r2, [r3, #0]
    ++(*str);
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	601a      	str	r2, [r3, #0]
}
 8002374:	bf00      	nop
            ++pc;
 8002376:	3401      	adds	r4, #1
    for (; *format != 0; ++format) {
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	3301      	adds	r3, #1
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	f47f aef1 	bne.w	800216a <print+0x12>
 8002388:	e000      	b.n	800238c <print+0x234>
                break;
 800238a:	bf00      	nop
        }
    }
    va_end(args);
    return pc;
 800238c:	4623      	mov	r3, r4
}
 800238e:	4618      	mov	r0, r3
 8002390:	3720      	adds	r7, #32
 8002392:	46bd      	mov	sp, r7
 8002394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002398:	0800926c 	.word	0x0800926c

0800239c <write_command>:
uint8_t buf_ptr = 0;
static uint8_t tft_dma_bufs[2][TFT_DMA_BUF_SIZE];
#define curr_tft_dma_buf tft_dma_bufs[buf_ptr]

/* TFT SPI communication - with MCU */
static inline void write_command(uint8_t command) {
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
    while (HAL_SPI_GetState(&TFT_SPI) != HAL_SPI_STATE_READY)
 80023a6:	bf00      	nop
 80023a8:	480c      	ldr	r0, [pc, #48]	; (80023dc <write_command+0x40>)
 80023aa:	f004 fd35 	bl	8006e18 <HAL_SPI_GetState>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d1f9      	bne.n	80023a8 <write_command+0xc>
        // wait for the spi to be ready
        ;

    HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_RESET); // Data-Command Pin 0-Command 1-Data
 80023b4:	2200      	movs	r2, #0
 80023b6:	2110      	movs	r1, #16
 80023b8:	4809      	ldr	r0, [pc, #36]	; (80023e0 <write_command+0x44>)
 80023ba:	f003 fca3 	bl	8005d04 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&TFT_SPI, (uint8_t*) &command, 1, 1);
 80023be:	1df9      	adds	r1, r7, #7
 80023c0:	2301      	movs	r3, #1
 80023c2:	2201      	movs	r2, #1
 80023c4:	4805      	ldr	r0, [pc, #20]	; (80023dc <write_command+0x40>)
 80023c6:	f004 fa16 	bl	80067f6 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);
 80023ca:	2201      	movs	r2, #1
 80023cc:	2110      	movs	r1, #16
 80023ce:	4804      	ldr	r0, [pc, #16]	; (80023e0 <write_command+0x44>)
 80023d0:	f003 fc98 	bl	8005d04 <HAL_GPIO_WritePin>
}
 80023d4:	bf00      	nop
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	2000d7ac 	.word	0x2000d7ac
 80023e0:	40020800 	.word	0x40020800

080023e4 <write_data>:
static inline void write_data(uint8_t *data, uint16_t size) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&TFT_SPI, (uint8_t*) data, size, 1);
 80023f0:	887a      	ldrh	r2, [r7, #2]
 80023f2:	2301      	movs	r3, #1
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4803      	ldr	r0, [pc, #12]	; (8002404 <write_data+0x20>)
 80023f8:	f004 f9fd 	bl	80067f6 <HAL_SPI_Transmit>
}
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	2000d7ac 	.word	0x2000d7ac

08002408 <write_many>:
static inline void write_many(uint8_t command, uint8_t *data, uint16_t size) {
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	6039      	str	r1, [r7, #0]
 8002412:	71fb      	strb	r3, [r7, #7]
 8002414:	4613      	mov	r3, r2
 8002416:	80bb      	strh	r3, [r7, #4]
    write_command(command);
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff ffbe 	bl	800239c <write_command>
    write_data(data, size);
 8002420:	88bb      	ldrh	r3, [r7, #4]
 8002422:	4619      	mov	r1, r3
 8002424:	6838      	ldr	r0, [r7, #0]
 8002426:	f7ff ffdd 	bl	80023e4 <write_data>
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <write_many_dma>:
static inline void write_many_dma(uint8_t command, uint8_t *data, uint16_t size) {
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	6039      	str	r1, [r7, #0]
 800243e:	71fb      	strb	r3, [r7, #7]
 8002440:	4613      	mov	r3, r2
 8002442:	80bb      	strh	r3, [r7, #4]
    write_command(command);
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff ffa8 	bl	800239c <write_command>
    HAL_SPI_Transmit_DMA(&TFT_SPI, (uint8_t*) data, size);
 800244c:	88bb      	ldrh	r3, [r7, #4]
 800244e:	461a      	mov	r2, r3
 8002450:	6839      	ldr	r1, [r7, #0]
 8002452:	4803      	ldr	r0, [pc, #12]	; (8002460 <write_many_dma+0x2c>)
 8002454:	f004 fb0c 	bl	8006a70 <HAL_SPI_Transmit_DMA>
}
 8002458:	bf00      	nop
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	2000d7ac 	.word	0x2000d7ac

08002464 <write_byte>:
static inline void write_byte(uint8_t command, uint8_t data) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	460a      	mov	r2, r1
 800246e:	71fb      	strb	r3, [r7, #7]
 8002470:	4613      	mov	r3, r2
 8002472:	71bb      	strb	r3, [r7, #6]
    write_command(command);
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff ff90 	bl	800239c <write_command>
    write_data(&data, 1);
 800247c:	1dbb      	adds	r3, r7, #6
 800247e:	2101      	movs	r1, #1
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ffaf 	bl	80023e4 <write_data>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <write_2hword>:
static inline void write_2hword(uint8_t command, uint16_t a, uint16_t b) {
 800248e:	b580      	push	{r7, lr}
 8002490:	b084      	sub	sp, #16
 8002492:	af00      	add	r7, sp, #0
 8002494:	4603      	mov	r3, r0
 8002496:	71fb      	strb	r3, [r7, #7]
 8002498:	460b      	mov	r3, r1
 800249a:	80bb      	strh	r3, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	807b      	strh	r3, [r7, #2]
    write_command(command);
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff ff7a 	bl	800239c <write_command>
    uint8_t buf[4] = { a >> 8, a & 0xFF, b >> 8, b & 0xFF };
 80024a8:	88bb      	ldrh	r3, [r7, #4]
 80024aa:	0a1b      	lsrs	r3, r3, #8
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	733b      	strb	r3, [r7, #12]
 80024b2:	88bb      	ldrh	r3, [r7, #4]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	737b      	strb	r3, [r7, #13]
 80024b8:	887b      	ldrh	r3, [r7, #2]
 80024ba:	0a1b      	lsrs	r3, r3, #8
 80024bc:	b29b      	uxth	r3, r3
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	73bb      	strb	r3, [r7, #14]
 80024c2:	887b      	ldrh	r3, [r7, #2]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	73fb      	strb	r3, [r7, #15]
    write_data(buf, 4);
 80024c8:	f107 030c 	add.w	r3, r7, #12
 80024cc:	2104      	movs	r1, #4
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff ff88 	bl	80023e4 <write_data>
}
 80024d4:	bf00      	nop
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <tft_clear>:

/**
 * @brief Clear the whole text buffer
 *
 */
static inline void tft_clear(void) {
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
    for (uint8_t y = 0; y < char_max_y; y++) {
 80024e2:	2300      	movs	r3, #0
 80024e4:	71fb      	strb	r3, [r7, #7]
 80024e6:	e023      	b.n	8002530 <tft_clear+0x54>
        for (uint8_t x = 0; x < char_max_x; x++) {
 80024e8:	2300      	movs	r3, #0
 80024ea:	71bb      	strb	r3, [r7, #6]
 80024ec:	e018      	b.n	8002520 <tft_clear+0x44>
            curr_text_buf[TFT_XY(x, y)] = ' ';
 80024ee:	4b16      	ldr	r3, [pc, #88]	; (8002548 <tft_clear+0x6c>)
 80024f0:	6819      	ldr	r1, [r3, #0]
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <tft_clear+0x6c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	4a13      	ldr	r2, [pc, #76]	; (800254c <tft_clear+0x70>)
 80024fe:	7812      	ldrb	r2, [r2, #0]
 8002500:	fb03 f202 	mul.w	r2, r3, r2
 8002504:	79bb      	ldrb	r3, [r7, #6]
 8002506:	441a      	add	r2, r3
 8002508:	4603      	mov	r3, r0
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4403      	add	r3, r0
 800250e:	015b      	lsls	r3, r3, #5
 8002510:	440b      	add	r3, r1
 8002512:	4413      	add	r3, r2
 8002514:	3301      	adds	r3, #1
 8002516:	2220      	movs	r2, #32
 8002518:	701a      	strb	r2, [r3, #0]
        for (uint8_t x = 0; x < char_max_x; x++) {
 800251a:	79bb      	ldrb	r3, [r7, #6]
 800251c:	3301      	adds	r3, #1
 800251e:	71bb      	strb	r3, [r7, #6]
 8002520:	4b0a      	ldr	r3, [pc, #40]	; (800254c <tft_clear+0x70>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	79ba      	ldrb	r2, [r7, #6]
 8002526:	429a      	cmp	r2, r3
 8002528:	d3e1      	bcc.n	80024ee <tft_clear+0x12>
    for (uint8_t y = 0; y < char_max_y; y++) {
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	3301      	adds	r3, #1
 800252e:	71fb      	strb	r3, [r7, #7]
 8002530:	4b07      	ldr	r3, [pc, #28]	; (8002550 <tft_clear+0x74>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	79fa      	ldrb	r2, [r7, #7]
 8002536:	429a      	cmp	r2, r3
 8002538:	d3d6      	bcc.n	80024e8 <tft_clear+0xc>
        }
    }
}
 800253a:	bf00      	nop
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	20000000 	.word	0x20000000
 800254c:	20008139 	.word	0x20008139
 8002550:	2000813a 	.word	0x2000813a

08002554 <tft_clear_full>:

/**
 * @brief Clear the whole text buffer and color buffers
 *
 */
static inline void tft_clear_full(void) {
 8002554:	b490      	push	{r4, r7}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
    for (uint8_t y = 0; y < char_max_y; y++) {
 800255a:	2300      	movs	r3, #0
 800255c:	71fb      	strb	r3, [r7, #7]
 800255e:	e050      	b.n	8002602 <tft_clear_full+0xae>
        for (uint8_t x = 0; x < char_max_x; x++) {
 8002560:	2300      	movs	r3, #0
 8002562:	71bb      	strb	r3, [r7, #6]
 8002564:	e045      	b.n	80025f2 <tft_clear_full+0x9e>
            uint16_t idx = TFT_XY(x, y);
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	b29a      	uxth	r2, r3
 800256a:	4b2b      	ldr	r3, [pc, #172]	; (8002618 <tft_clear_full+0xc4>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	b29b      	uxth	r3, r3
 8002570:	fb12 f303 	smulbb	r3, r2, r3
 8002574:	b29a      	uxth	r2, r3
 8002576:	79bb      	ldrb	r3, [r7, #6]
 8002578:	b29b      	uxth	r3, r3
 800257a:	4413      	add	r3, r2
 800257c:	80bb      	strh	r3, [r7, #4]
            curr_text_buf[idx] = ' ';
 800257e:	4b27      	ldr	r3, [pc, #156]	; (800261c <tft_clear_full+0xc8>)
 8002580:	6819      	ldr	r1, [r3, #0]
 8002582:	4b26      	ldr	r3, [pc, #152]	; (800261c <tft_clear_full+0xc8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	88ba      	ldrh	r2, [r7, #4]
 800258c:	4603      	mov	r3, r0
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4403      	add	r3, r0
 8002592:	015b      	lsls	r3, r3, #5
 8002594:	440b      	add	r3, r1
 8002596:	4413      	add	r3, r2
 8002598:	3301      	adds	r3, #1
 800259a:	2220      	movs	r2, #32
 800259c:	701a      	strb	r2, [r3, #0]
            curr_text_color_buf[idx] = curr_text_color;
 800259e:	4b1f      	ldr	r3, [pc, #124]	; (800261c <tft_clear_full+0xc8>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4b1e      	ldr	r3, [pc, #120]	; (800261c <tft_clear_full+0xc8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	88b9      	ldrh	r1, [r7, #4]
 80025ac:	4b1c      	ldr	r3, [pc, #112]	; (8002620 <tft_clear_full+0xcc>)
 80025ae:	881c      	ldrh	r4, [r3, #0]
 80025b0:	4603      	mov	r3, r0
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4403      	add	r3, r0
 80025b6:	015b      	lsls	r3, r3, #5
 80025b8:	440b      	add	r3, r1
 80025ba:	33a0      	adds	r3, #160	; 0xa0
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	4413      	add	r3, r2
 80025c0:	4622      	mov	r2, r4
 80025c2:	805a      	strh	r2, [r3, #2]
            curr_bg_color_buf[idx] = curr_bg_color;
 80025c4:	4b15      	ldr	r3, [pc, #84]	; (800261c <tft_clear_full+0xc8>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b14      	ldr	r3, [pc, #80]	; (800261c <tft_clear_full+0xc8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	88b9      	ldrh	r1, [r7, #4]
 80025d2:	4b14      	ldr	r3, [pc, #80]	; (8002624 <tft_clear_full+0xd0>)
 80025d4:	881c      	ldrh	r4, [r3, #0]
 80025d6:	4603      	mov	r3, r0
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4403      	add	r3, r0
 80025dc:	015b      	lsls	r3, r3, #5
 80025de:	440b      	add	r3, r1
 80025e0:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	4413      	add	r3, r2
 80025e8:	4622      	mov	r2, r4
 80025ea:	805a      	strh	r2, [r3, #2]
        for (uint8_t x = 0; x < char_max_x; x++) {
 80025ec:	79bb      	ldrb	r3, [r7, #6]
 80025ee:	3301      	adds	r3, #1
 80025f0:	71bb      	strb	r3, [r7, #6]
 80025f2:	4b09      	ldr	r3, [pc, #36]	; (8002618 <tft_clear_full+0xc4>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	79ba      	ldrb	r2, [r7, #6]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d3b4      	bcc.n	8002566 <tft_clear_full+0x12>
    for (uint8_t y = 0; y < char_max_y; y++) {
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	3301      	adds	r3, #1
 8002600:	71fb      	strb	r3, [r7, #7]
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <tft_clear_full+0xd4>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	79fa      	ldrb	r2, [r7, #7]
 8002608:	429a      	cmp	r2, r3
 800260a:	d3a9      	bcc.n	8002560 <tft_clear_full+0xc>
        }
    }
}
 800260c:	bf00      	nop
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bc90      	pop	{r4, r7}
 8002616:	4770      	bx	lr
 8002618:	20008139 	.word	0x20008139
 800261c:	20000000 	.word	0x20000000
 8002620:	20008134 	.word	0x20008134
 8002624:	20008130 	.word	0x20008130
 8002628:	2000813a 	.word	0x2000813a

0800262c <tft_set_region>:

static inline void tft_set_region(uint16_t x, uint16_t y, uint16_t w,
        uint16_t h) {
 800262c:	b590      	push	{r4, r7, lr}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	4604      	mov	r4, r0
 8002634:	4608      	mov	r0, r1
 8002636:	4611      	mov	r1, r2
 8002638:	461a      	mov	r2, r3
 800263a:	4623      	mov	r3, r4
 800263c:	80fb      	strh	r3, [r7, #6]
 800263e:	4603      	mov	r3, r0
 8002640:	80bb      	strh	r3, [r7, #4]
 8002642:	460b      	mov	r3, r1
 8002644:	807b      	strh	r3, [r7, #2]
 8002646:	4613      	mov	r3, r2
 8002648:	803b      	strh	r3, [r7, #0]
    uint16_t startx = x;
 800264a:	88fb      	ldrh	r3, [r7, #6]
 800264c:	81fb      	strh	r3, [r7, #14]
    uint16_t starty = y;
 800264e:	88bb      	ldrh	r3, [r7, #4]
 8002650:	81bb      	strh	r3, [r7, #12]
    uint16_t endx = x + w;
 8002652:	88fa      	ldrh	r2, [r7, #6]
 8002654:	887b      	ldrh	r3, [r7, #2]
 8002656:	4413      	add	r3, r2
 8002658:	817b      	strh	r3, [r7, #10]
    uint16_t endy = y + h;
 800265a:	88ba      	ldrh	r2, [r7, #4]
 800265c:	883b      	ldrh	r3, [r7, #0]
 800265e:	4413      	add	r3, r2
 8002660:	813b      	strh	r3, [r7, #8]

#ifdef MODEL_ST7735
    startx += col_shift;
 8002662:	4b14      	ldr	r3, [pc, #80]	; (80026b4 <tft_set_region+0x88>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	b29a      	uxth	r2, r3
 8002668:	89fb      	ldrh	r3, [r7, #14]
 800266a:	4413      	add	r3, r2
 800266c:	81fb      	strh	r3, [r7, #14]
    starty += row_shift;
 800266e:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <tft_set_region+0x8c>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	b29a      	uxth	r2, r3
 8002674:	89bb      	ldrh	r3, [r7, #12]
 8002676:	4413      	add	r3, r2
 8002678:	81bb      	strh	r3, [r7, #12]
    endx += col_shift;
 800267a:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <tft_set_region+0x88>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	b29a      	uxth	r2, r3
 8002680:	897b      	ldrh	r3, [r7, #10]
 8002682:	4413      	add	r3, r2
 8002684:	817b      	strh	r3, [r7, #10]
    endy += row_shift;
 8002686:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <tft_set_region+0x8c>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	b29a      	uxth	r2, r3
 800268c:	893b      	ldrh	r3, [r7, #8]
 800268e:	4413      	add	r3, r2
 8002690:	813b      	strh	r3, [r7, #8]
#endif

    write_2hword(0x2a, startx, endx);  // Column addr set
 8002692:	897a      	ldrh	r2, [r7, #10]
 8002694:	89fb      	ldrh	r3, [r7, #14]
 8002696:	4619      	mov	r1, r3
 8002698:	202a      	movs	r0, #42	; 0x2a
 800269a:	f7ff fef8 	bl	800248e <write_2hword>
    write_2hword(0x2b, starty, endy);  // Row addr set
 800269e:	893a      	ldrh	r2, [r7, #8]
 80026a0:	89bb      	ldrh	r3, [r7, #12]
 80026a2:	4619      	mov	r1, r3
 80026a4:	202b      	movs	r0, #43	; 0x2b
 80026a6:	f7ff fef2 	bl	800248e <write_2hword>
}
 80026aa:	bf00      	nop
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd90      	pop	{r4, r7, pc}
 80026b2:	bf00      	nop
 80026b4:	2000877e 	.word	0x2000877e
 80026b8:	2000877f 	.word	0x2000877f

080026bc <tft_init>:
 * @param  text_color: default text color
 * @param  text_color_sp: default special text color
 * @param  highlight_color: default highlight color
 */
void tft_init(TFT_ORIENTATION orientation, uint16_t bg_color,
        uint16_t text_color, uint16_t text_color_sp, uint16_t highlight_color) {
 80026bc:	b590      	push	{r4, r7, lr}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4604      	mov	r4, r0
 80026c4:	4608      	mov	r0, r1
 80026c6:	4611      	mov	r1, r2
 80026c8:	461a      	mov	r2, r3
 80026ca:	4623      	mov	r3, r4
 80026cc:	71fb      	strb	r3, [r7, #7]
 80026ce:	4603      	mov	r3, r0
 80026d0:	80bb      	strh	r3, [r7, #4]
 80026d2:	460b      	mov	r3, r1
 80026d4:	807b      	strh	r3, [r7, #2]
 80026d6:	4613      	mov	r3, r2
 80026d8:	803b      	strh	r3, [r7, #0]
    curr_screen = 0;
 80026da:	4b6e      	ldr	r3, [pc, #440]	; (8002894 <tft_init+0x1d8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]
    tft_orientation = orientation;
 80026e2:	4a6d      	ldr	r2, [pc, #436]	; (8002898 <tft_init+0x1dc>)
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	7013      	strb	r3, [r2, #0]

    char_max_x =
            (orientation % 2) ? CHAR_MAX_X_HORIZONTAL : CHAR_MAX_X_VERTICAL;
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	b2db      	uxtb	r3, r3
    char_max_x =
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <tft_init+0x3c>
 80026f4:	2214      	movs	r2, #20
 80026f6:	e000      	b.n	80026fa <tft_init+0x3e>
 80026f8:	2210      	movs	r2, #16
 80026fa:	4b68      	ldr	r3, [pc, #416]	; (800289c <tft_init+0x1e0>)
 80026fc:	701a      	strb	r2, [r3, #0]
    char_max_y =
            (orientation % 2) ? CHAR_MAX_Y_HORIZONTAL : CHAR_MAX_Y_VERTICAL;
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	b2db      	uxtb	r3, r3
    char_max_y =
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <tft_init+0x52>
 800270a:	2208      	movs	r2, #8
 800270c:	e000      	b.n	8002710 <tft_init+0x54>
 800270e:	220a      	movs	r2, #10
 8002710:	4b63      	ldr	r3, [pc, #396]	; (80028a0 <tft_init+0x1e4>)
 8002712:	701a      	strb	r2, [r3, #0]

    TFT_SPI_INIT();
 8002714:	f001 f8c0 	bl	8003898 <MX_SPI1_Init>

    HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_SET);
 8002718:	2201      	movs	r2, #1
 800271a:	2140      	movs	r1, #64	; 0x40
 800271c:	4861      	ldr	r0, [pc, #388]	; (80028a4 <tft_init+0x1e8>)
 800271e:	f003 faf1 	bl	8005d04 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8002722:	2064      	movs	r0, #100	; 0x64
 8002724:	f001 ffaa 	bl	800467c <HAL_Delay>
    HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_RESET);
 8002728:	2200      	movs	r2, #0
 800272a:	2140      	movs	r1, #64	; 0x40
 800272c:	485d      	ldr	r0, [pc, #372]	; (80028a4 <tft_init+0x1e8>)
 800272e:	f003 fae9 	bl	8005d04 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8002732:	2064      	movs	r0, #100	; 0x64
 8002734:	f001 ffa2 	bl	800467c <HAL_Delay>
    HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_SET);
 8002738:	2201      	movs	r2, #1
 800273a:	2140      	movs	r1, #64	; 0x40
 800273c:	4859      	ldr	r0, [pc, #356]	; (80028a4 <tft_init+0x1e8>)
 800273e:	f003 fae1 	bl	8005d04 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8002742:	2064      	movs	r0, #100	; 0x64
 8002744:	f001 ff9a 	bl	800467c <HAL_Delay>

    HAL_GPIO_WritePin(TFT_BL_GPIO_Port, TFT_BL_Pin, GPIO_PIN_SET);
 8002748:	2201      	movs	r2, #1
 800274a:	2101      	movs	r1, #1
 800274c:	4856      	ldr	r0, [pc, #344]	; (80028a8 <tft_init+0x1ec>)
 800274e:	f003 fad9 	bl	8005d04 <HAL_GPIO_WritePin>

#if defined(TFT_CS_Pin) && !defined(MODEL_ST7735)
    HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_SET);
#endif

    uint32_t i = 0;
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
    while (tft_init_code[++i] != TFT_EOF_MARKER) {
 8002756:	e058      	b.n	800280a <tft_init+0x14e>
        if (tft_init_code[i] == TFT_ORIENTATION_CMD) {
 8002758:	4a54      	ldr	r2, [pc, #336]	; (80028ac <tft_init+0x1f0>)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4413      	add	r3, r2
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b36      	cmp	r3, #54	; 0x36
 8002762:	d110      	bne.n	8002786 <tft_init+0xca>
            write_byte(tft_init_code[i],
 8002764:	4a51      	ldr	r2, [pc, #324]	; (80028ac <tft_init+0x1f0>)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4413      	add	r3, r2
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	4a4a      	ldr	r2, [pc, #296]	; (8002898 <tft_init+0x1dc>)
 800276e:	7812      	ldrb	r2, [r2, #0]
 8002770:	4611      	mov	r1, r2
 8002772:	4a4f      	ldr	r2, [pc, #316]	; (80028b0 <tft_init+0x1f4>)
 8002774:	5c52      	ldrb	r2, [r2, r1]
 8002776:	4611      	mov	r1, r2
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff fe73 	bl	8002464 <write_byte>
                    tft_orientation_init_code[tft_orientation]);
            i++;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	3301      	adds	r3, #1
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	e041      	b.n	800280a <tft_init+0x14e>
        } else if (tft_init_code[i] == TFT_DELAY_MARKER) {
 8002786:	4a49      	ldr	r2, [pc, #292]	; (80028ac <tft_init+0x1f0>)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4413      	add	r3, r2
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2bff      	cmp	r3, #255	; 0xff
 8002790:	d10a      	bne.n	80027a8 <tft_init+0xec>
            i += 3;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	3303      	adds	r3, #3
 8002796:	60fb      	str	r3, [r7, #12]
            HAL_Delay(tft_init_code[i]);
 8002798:	4a44      	ldr	r2, [pc, #272]	; (80028ac <tft_init+0x1f0>)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	4413      	add	r3, r2
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f001 ff6b 	bl	800467c <HAL_Delay>
 80027a6:	e030      	b.n	800280a <tft_init+0x14e>
        } else if (tft_init_code[i + 1] == TFT_EOL_MARKER) {
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	3301      	adds	r3, #1
 80027ac:	4a3f      	ldr	r2, [pc, #252]	; (80028ac <tft_init+0x1f0>)
 80027ae:	5cd3      	ldrb	r3, [r2, r3]
 80027b0:	2b43      	cmp	r3, #67	; 0x43
 80027b2:	d10a      	bne.n	80027ca <tft_init+0x10e>
            write_command(tft_init_code[i]);
 80027b4:	4a3d      	ldr	r2, [pc, #244]	; (80028ac <tft_init+0x1f0>)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4413      	add	r3, r2
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fded 	bl	800239c <write_command>
            i++;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	3301      	adds	r3, #1
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	e01f      	b.n	800280a <tft_init+0x14e>
        } else {
            int len;
            for (len = 0; tft_init_code[i + len + 1] != TFT_EOL_MARKER; len++) {
 80027ca:	2300      	movs	r3, #0
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	e002      	b.n	80027d6 <tft_init+0x11a>
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	3301      	adds	r3, #1
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4413      	add	r3, r2
 80027dc:	3301      	adds	r3, #1
 80027de:	4a33      	ldr	r2, [pc, #204]	; (80028ac <tft_init+0x1f0>)
 80027e0:	5cd3      	ldrb	r3, [r2, r3]
 80027e2:	2b43      	cmp	r3, #67	; 0x43
 80027e4:	d1f4      	bne.n	80027d0 <tft_init+0x114>
            }
            write_many(tft_init_code[i], (uint8_t*) &tft_init_code[i + 1], len);
 80027e6:	4a31      	ldr	r2, [pc, #196]	; (80028ac <tft_init+0x1f0>)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4413      	add	r3, r2
 80027ec:	7818      	ldrb	r0, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	3301      	adds	r3, #1
 80027f2:	4a2e      	ldr	r2, [pc, #184]	; (80028ac <tft_init+0x1f0>)
 80027f4:	4413      	add	r3, r2
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	b292      	uxth	r2, r2
 80027fa:	4619      	mov	r1, r3
 80027fc:	f7ff fe04 	bl	8002408 <write_many>
            i += len + 1;
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4413      	add	r3, r2
 8002806:	3301      	adds	r3, #1
 8002808:	60fb      	str	r3, [r7, #12]
    while (tft_init_code[++i] != TFT_EOF_MARKER) {
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	3301      	adds	r3, #1
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	4a26      	ldr	r2, [pc, #152]	; (80028ac <tft_init+0x1f0>)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	4413      	add	r3, r2
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b42      	cmp	r3, #66	; 0x42
 800281a:	d19d      	bne.n	8002758 <tft_init+0x9c>
        }
    }

#ifdef MODEL_ST7735
    switch (tft_orientation) {
 800281c:	4b1e      	ldr	r3, [pc, #120]	; (8002898 <tft_init+0x1dc>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b03      	cmp	r3, #3
 8002822:	d01a      	beq.n	800285a <tft_init+0x19e>
 8002824:	2b03      	cmp	r3, #3
 8002826:	dc03      	bgt.n	8002830 <tft_init+0x174>
 8002828:	2b01      	cmp	r3, #1
 800282a:	d008      	beq.n	800283e <tft_init+0x182>
 800282c:	2b02      	cmp	r3, #2
 800282e:	d00d      	beq.n	800284c <tft_init+0x190>
    default:
    case 0:
        col_shift = 2;
 8002830:	4b20      	ldr	r3, [pc, #128]	; (80028b4 <tft_init+0x1f8>)
 8002832:	2202      	movs	r2, #2
 8002834:	701a      	strb	r2, [r3, #0]
        row_shift = 1;
 8002836:	4b20      	ldr	r3, [pc, #128]	; (80028b8 <tft_init+0x1fc>)
 8002838:	2201      	movs	r2, #1
 800283a:	701a      	strb	r2, [r3, #0]
        break;
 800283c:	e014      	b.n	8002868 <tft_init+0x1ac>
    case 1:
        col_shift = 1;
 800283e:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <tft_init+0x1f8>)
 8002840:	2201      	movs	r2, #1
 8002842:	701a      	strb	r2, [r3, #0]
        row_shift = 2;
 8002844:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <tft_init+0x1fc>)
 8002846:	2202      	movs	r2, #2
 8002848:	701a      	strb	r2, [r3, #0]
        break;
 800284a:	e00d      	b.n	8002868 <tft_init+0x1ac>
    case 2:
        col_shift = 2;
 800284c:	4b19      	ldr	r3, [pc, #100]	; (80028b4 <tft_init+0x1f8>)
 800284e:	2202      	movs	r2, #2
 8002850:	701a      	strb	r2, [r3, #0]
        row_shift = 2;
 8002852:	4b19      	ldr	r3, [pc, #100]	; (80028b8 <tft_init+0x1fc>)
 8002854:	2202      	movs	r2, #2
 8002856:	701a      	strb	r2, [r3, #0]
        break;
 8002858:	e006      	b.n	8002868 <tft_init+0x1ac>
    case 3:
        col_shift = 1;
 800285a:	4b16      	ldr	r3, [pc, #88]	; (80028b4 <tft_init+0x1f8>)
 800285c:	2201      	movs	r2, #1
 800285e:	701a      	strb	r2, [r3, #0]
        row_shift = 2;
 8002860:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <tft_init+0x1fc>)
 8002862:	2202      	movs	r2, #2
 8002864:	701a      	strb	r2, [r3, #0]
        break;
 8002866:	bf00      	nop
    }
#endif

    tft_set_bg_color(bg_color);
 8002868:	88bb      	ldrh	r3, [r7, #4]
 800286a:	4618      	mov	r0, r3
 800286c:	f000 f826 	bl	80028bc <tft_set_bg_color>
    tft_set_text_color(text_color);
 8002870:	887b      	ldrh	r3, [r7, #2]
 8002872:	4618      	mov	r0, r3
 8002874:	f000 f842 	bl	80028fc <tft_set_text_color>
    tft_set_special_color(text_color_sp);
 8002878:	883b      	ldrh	r3, [r7, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f000 f84e 	bl	800291c <tft_set_special_color>
    tft_set_highlight_color(highlight_color);
 8002880:	8c3b      	ldrh	r3, [r7, #32]
 8002882:	4618      	mov	r0, r3
 8002884:	f000 f82a 	bl	80028dc <tft_set_highlight_color>

    tft_force_clear();
 8002888:	f000 f858 	bl	800293c <tft_force_clear>
}
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	bd90      	pop	{r4, r7, pc}
 8002894:	20000000 	.word	0x20000000
 8002898:	20008138 	.word	0x20008138
 800289c:	20008139 	.word	0x20008139
 80028a0:	2000813a 	.word	0x2000813a
 80028a4:	40020000 	.word	0x40020000
 80028a8:	40020400 	.word	0x40020400
 80028ac:	0800a174 	.word	0x0800a174
 80028b0:	0800a1e8 	.word	0x0800a1e8
 80028b4:	2000877e 	.word	0x2000877e
 80028b8:	2000877f 	.word	0x2000877f

080028bc <tft_set_bg_color>:
/**
 * @brief Set current background color
 *
 * @param bg_color (BLACK, BLUE, RED, ...)
 */
void tft_set_bg_color(uint16_t bg_color) {
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	80fb      	strh	r3, [r7, #6]
    curr_bg_color = bg_color;
 80028c6:	4a04      	ldr	r2, [pc, #16]	; (80028d8 <tft_set_bg_color+0x1c>)
 80028c8:	88fb      	ldrh	r3, [r7, #6]
 80028ca:	8013      	strh	r3, [r2, #0]
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	20008130 	.word	0x20008130

080028dc <tft_set_highlight_color>:
/**
 * @brief Set current highlight color
 *
 * @param highlight_color (YELLOW, ORANGE, CYAN, ...)
 */
void tft_set_highlight_color(uint16_t highlight_color) {
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	80fb      	strh	r3, [r7, #6]
    curr_highlight_color = highlight_color;
 80028e6:	4a04      	ldr	r2, [pc, #16]	; (80028f8 <tft_set_highlight_color+0x1c>)
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	8013      	strh	r3, [r2, #0]
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	20008132 	.word	0x20008132

080028fc <tft_set_text_color>:
/**
 * @brief Set current text color
 *
 * @param text_color (WHITE, SKYBLUE, GREEN, ...)
 */
void tft_set_text_color(uint16_t text_color) {
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	80fb      	strh	r3, [r7, #6]
    curr_text_color = text_color;
 8002906:	4a04      	ldr	r2, [pc, #16]	; (8002918 <tft_set_text_color+0x1c>)
 8002908:	88fb      	ldrh	r3, [r7, #6]
 800290a:	8013      	strh	r3, [r2, #0]
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	20008134 	.word	0x20008134

0800291c <tft_set_special_color>:
/**
 * @brief Set current special text color
 *
 * @param text_color_sp (YELLOW, ORANGE, CYAN, ...)
 */
void tft_set_special_color(uint16_t text_color_sp) {
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	80fb      	strh	r3, [r7, #6]
    curr_text_color_sp = text_color_sp;
 8002926:	4a04      	ldr	r2, [pc, #16]	; (8002938 <tft_set_special_color+0x1c>)
 8002928:	88fb      	ldrh	r3, [r7, #6]
 800292a:	8013      	strh	r3, [r2, #0]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	20008136 	.word	0x20008136

0800293c <tft_force_clear>:

/**
 * @brief  Clear every pixels on the screen
 */
void tft_force_clear(void) {
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af02      	add	r7, sp, #8
    tft_clear_full();
 8002942:	f7ff fe07 	bl	8002554 <tft_clear_full>
    tft_update(0);
 8002946:	2000      	movs	r0, #0
 8002948:	f000 fb22 	bl	8002f90 <tft_update>
    tft_clear_full();
 800294c:	f7ff fe02 	bl	8002554 <tft_clear_full>
    if (tft_orientation % 2)
 8002950:	4b0e      	ldr	r3, [pc, #56]	; (800298c <tft_force_clear+0x50>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d009      	beq.n	8002972 <tft_force_clear+0x36>
        tft_print_rectangle(curr_bg_color, 0, 0, MAX_HEIGHT, MAX_WIDTH);
 800295e:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <tft_force_clear+0x54>)
 8002960:	8818      	ldrh	r0, [r3, #0]
 8002962:	2380      	movs	r3, #128	; 0x80
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	23a0      	movs	r3, #160	; 0xa0
 8002968:	2200      	movs	r2, #0
 800296a:	2100      	movs	r1, #0
 800296c:	f000 fa5a 	bl	8002e24 <tft_print_rectangle>
    else
        tft_print_rectangle(curr_bg_color, 0, 0, MAX_WIDTH, MAX_HEIGHT);
}
 8002970:	e008      	b.n	8002984 <tft_force_clear+0x48>
        tft_print_rectangle(curr_bg_color, 0, 0, MAX_WIDTH, MAX_HEIGHT);
 8002972:	4b07      	ldr	r3, [pc, #28]	; (8002990 <tft_force_clear+0x54>)
 8002974:	8818      	ldrh	r0, [r3, #0]
 8002976:	23a0      	movs	r3, #160	; 0xa0
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	2380      	movs	r3, #128	; 0x80
 800297c:	2200      	movs	r2, #0
 800297e:	2100      	movs	r1, #0
 8002980:	f000 fa50 	bl	8002e24 <tft_print_rectangle>
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20008138 	.word	0x20008138
 8002990:	20008130 	.word	0x20008130

08002994 <tft_print_colored>:
 * @param x starting x-coordinate
 * @param y starting y-coordinate
 * @param fp pointer to the character(s)
 */
void tft_print_colored(uint8_t x, uint8_t y, const char *fp,
        uint16_t text_color, uint16_t bg_color) {
 8002994:	b490      	push	{r4, r7}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	603a      	str	r2, [r7, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	4603      	mov	r3, r0
 80029a0:	71fb      	strb	r3, [r7, #7]
 80029a2:	460b      	mov	r3, r1
 80029a4:	71bb      	strb	r3, [r7, #6]
 80029a6:	4613      	mov	r3, r2
 80029a8:	80bb      	strh	r3, [r7, #4]
    uint8_t i = x;
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	73fb      	strb	r3, [r7, #15]
    uint8_t j = y;
 80029ae:	79bb      	ldrb	r3, [r7, #6]
 80029b0:	73bb      	strb	r3, [r7, #14]
    uint8_t is_special = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	737b      	strb	r3, [r7, #13]
    uint8_t is_highlighted = 0;
 80029b6:	2300      	movs	r3, #0
 80029b8:	733b      	strb	r3, [r7, #12]
    uint8_t is_underlined = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	72fb      	strb	r3, [r7, #11]

    while (*fp && i < char_max_x && j < char_max_y) {
 80029be:	e14a      	b.n	8002c56 <tft_print_colored+0x2c2>
        switch (*fp) {
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b7d      	cmp	r3, #125	; 0x7d
 80029c6:	f300 80e0 	bgt.w	8002b8a <tft_print_colored+0x1f6>
 80029ca:	2b5b      	cmp	r3, #91	; 0x5b
 80029cc:	da04      	bge.n	80029d8 <tft_print_colored+0x44>
 80029ce:	2b0a      	cmp	r3, #10
 80029d0:	d050      	beq.n	8002a74 <tft_print_colored+0xe0>
 80029d2:	2b0d      	cmp	r3, #13
 80029d4:	d051      	beq.n	8002a7a <tft_print_colored+0xe6>
 80029d6:	e0d8      	b.n	8002b8a <tft_print_colored+0x1f6>
 80029d8:	3b5b      	subs	r3, #91	; 0x5b
 80029da:	2b22      	cmp	r3, #34	; 0x22
 80029dc:	f200 80d5 	bhi.w	8002b8a <tft_print_colored+0x1f6>
 80029e0:	a201      	add	r2, pc, #4	; (adr r2, 80029e8 <tft_print_colored+0x54>)
 80029e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e6:	bf00      	nop
 80029e8:	08002b57 	.word	0x08002b57
 80029ec:	08002b8b 	.word	0x08002b8b
 80029f0:	08002b57 	.word	0x08002b57
 80029f4:	08002b8b 	.word	0x08002b8b
 80029f8:	08002b8b 	.word	0x08002b8b
 80029fc:	08002a81 	.word	0x08002a81
 8002a00:	08002b8b 	.word	0x08002b8b
 8002a04:	08002b8b 	.word	0x08002b8b
 8002a08:	08002b8b 	.word	0x08002b8b
 8002a0c:	08002b8b 	.word	0x08002b8b
 8002a10:	08002b8b 	.word	0x08002b8b
 8002a14:	08002b8b 	.word	0x08002b8b
 8002a18:	08002b8b 	.word	0x08002b8b
 8002a1c:	08002b8b 	.word	0x08002b8b
 8002a20:	08002b8b 	.word	0x08002b8b
 8002a24:	08002b8b 	.word	0x08002b8b
 8002a28:	08002b8b 	.word	0x08002b8b
 8002a2c:	08002b8b 	.word	0x08002b8b
 8002a30:	08002b8b 	.word	0x08002b8b
 8002a34:	08002b8b 	.word	0x08002b8b
 8002a38:	08002b8b 	.word	0x08002b8b
 8002a3c:	08002b8b 	.word	0x08002b8b
 8002a40:	08002b8b 	.word	0x08002b8b
 8002a44:	08002b8b 	.word	0x08002b8b
 8002a48:	08002b8b 	.word	0x08002b8b
 8002a4c:	08002b8b 	.word	0x08002b8b
 8002a50:	08002b8b 	.word	0x08002b8b
 8002a54:	08002b8b 	.word	0x08002b8b
 8002a58:	08002b8b 	.word	0x08002b8b
 8002a5c:	08002b8b 	.word	0x08002b8b
 8002a60:	08002b8b 	.word	0x08002b8b
 8002a64:	08002b8b 	.word	0x08002b8b
 8002a68:	08002b69 	.word	0x08002b69
 8002a6c:	08002b7b 	.word	0x08002b7b
 8002a70:	08002b69 	.word	0x08002b69
        case '\n':
            j++;  // fall through
 8002a74:	7bbb      	ldrb	r3, [r7, #14]
 8002a76:	3301      	adds	r3, #1
 8002a78:	73bb      	strb	r3, [r7, #14]
        case '\r':
            i = x;
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	73fb      	strb	r3, [r7, #15]
            break;
 8002a7e:	e0e7      	b.n	8002c50 <tft_print_colored+0x2bc>
        case '`': // escape character
            if (*(fp + 1) != '\0') {
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	3301      	adds	r3, #1
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 80e1 	beq.w	8002c4e <tft_print_colored+0x2ba>
                fp++;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	603b      	str	r3, [r7, #0]
                curr_text_buf[TFT_XY(i, j)] = ((*fp) | (is_underlined ? 0x80 : 0x00));
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	b25b      	sxtb	r3, r3
 8002a98:	7afa      	ldrb	r2, [r7, #11]
 8002a9a:	2a00      	cmp	r2, #0
 8002a9c:	d002      	beq.n	8002aa4 <tft_print_colored+0x110>
 8002a9e:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002aa2:	e000      	b.n	8002aa6 <tft_print_colored+0x112>
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	b25c      	sxtb	r4, r3
 8002aaa:	4b75      	ldr	r3, [pc, #468]	; (8002c80 <tft_print_colored+0x2ec>)
 8002aac:	6819      	ldr	r1, [r3, #0]
 8002aae:	4b74      	ldr	r3, [pc, #464]	; (8002c80 <tft_print_colored+0x2ec>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	7bbb      	ldrb	r3, [r7, #14]
 8002ab8:	4a72      	ldr	r2, [pc, #456]	; (8002c84 <tft_print_colored+0x2f0>)
 8002aba:	7812      	ldrb	r2, [r2, #0]
 8002abc:	fb03 f202 	mul.w	r2, r3, r2
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
 8002ac2:	441a      	add	r2, r3
 8002ac4:	b2e4      	uxtb	r4, r4
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4403      	add	r3, r0
 8002acc:	015b      	lsls	r3, r3, #5
 8002ace:	440b      	add	r3, r1
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	4622      	mov	r2, r4
 8002ad6:	701a      	strb	r2, [r3, #0]
                curr_text_color_buf[TFT_XY(i, j)] = is_special ? curr_text_color_sp : text_color;
 8002ad8:	7b7b      	ldrb	r3, [r7, #13]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <tft_print_colored+0x150>
 8002ade:	4b6a      	ldr	r3, [pc, #424]	; (8002c88 <tft_print_colored+0x2f4>)
 8002ae0:	881a      	ldrh	r2, [r3, #0]
 8002ae2:	e000      	b.n	8002ae6 <tft_print_colored+0x152>
 8002ae4:	88ba      	ldrh	r2, [r7, #4]
 8002ae6:	4b66      	ldr	r3, [pc, #408]	; (8002c80 <tft_print_colored+0x2ec>)
 8002ae8:	6819      	ldr	r1, [r3, #0]
 8002aea:	4b65      	ldr	r3, [pc, #404]	; (8002c80 <tft_print_colored+0x2ec>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	461c      	mov	r4, r3
 8002af2:	7bbb      	ldrb	r3, [r7, #14]
 8002af4:	4863      	ldr	r0, [pc, #396]	; (8002c84 <tft_print_colored+0x2f0>)
 8002af6:	7800      	ldrb	r0, [r0, #0]
 8002af8:	fb03 f000 	mul.w	r0, r3, r0
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
 8002afe:	4418      	add	r0, r3
 8002b00:	4623      	mov	r3, r4
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4423      	add	r3, r4
 8002b06:	015b      	lsls	r3, r3, #5
 8002b08:	4403      	add	r3, r0
 8002b0a:	33a0      	adds	r3, #160	; 0xa0
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	440b      	add	r3, r1
 8002b10:	805a      	strh	r2, [r3, #2]
                curr_bg_color_buf[TFT_XY(i, j)] = is_highlighted ? curr_highlight_color : bg_color;
 8002b12:	7b3b      	ldrb	r3, [r7, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d002      	beq.n	8002b1e <tft_print_colored+0x18a>
 8002b18:	4b5c      	ldr	r3, [pc, #368]	; (8002c8c <tft_print_colored+0x2f8>)
 8002b1a:	881a      	ldrh	r2, [r3, #0]
 8002b1c:	e000      	b.n	8002b20 <tft_print_colored+0x18c>
 8002b1e:	8b3a      	ldrh	r2, [r7, #24]
 8002b20:	4b57      	ldr	r3, [pc, #348]	; (8002c80 <tft_print_colored+0x2ec>)
 8002b22:	6819      	ldr	r1, [r3, #0]
 8002b24:	4b56      	ldr	r3, [pc, #344]	; (8002c80 <tft_print_colored+0x2ec>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	461c      	mov	r4, r3
 8002b2c:	7bbb      	ldrb	r3, [r7, #14]
 8002b2e:	4855      	ldr	r0, [pc, #340]	; (8002c84 <tft_print_colored+0x2f0>)
 8002b30:	7800      	ldrb	r0, [r0, #0]
 8002b32:	fb03 f000 	mul.w	r0, r3, r0
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	4418      	add	r0, r3
 8002b3a:	4623      	mov	r3, r4
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4423      	add	r3, r4
 8002b40:	015b      	lsls	r3, r3, #5
 8002b42:	4403      	add	r3, r0
 8002b44:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	440b      	add	r3, r1
 8002b4c:	805a      	strh	r2, [r3, #2]
                i++;
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	3301      	adds	r3, #1
 8002b52:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8002b54:	e07b      	b.n	8002c4e <tft_print_colored+0x2ba>
        case '[':
        case ']':
            is_special = (*fp == '[');
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b5b      	cmp	r3, #91	; 0x5b
 8002b5c:	bf0c      	ite	eq
 8002b5e:	2301      	moveq	r3, #1
 8002b60:	2300      	movne	r3, #0
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	737b      	strb	r3, [r7, #13]
            break;
 8002b66:	e073      	b.n	8002c50 <tft_print_colored+0x2bc>
        case '{':
        case '}':
            is_highlighted = (*fp == '{');
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b7b      	cmp	r3, #123	; 0x7b
 8002b6e:	bf0c      	ite	eq
 8002b70:	2301      	moveq	r3, #1
 8002b72:	2300      	movne	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	733b      	strb	r3, [r7, #12]
            break;
 8002b78:	e06a      	b.n	8002c50 <tft_print_colored+0x2bc>
        case '|':
            is_underlined = !is_underlined;
 8002b7a:	7afb      	ldrb	r3, [r7, #11]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	bf0c      	ite	eq
 8002b80:	2301      	moveq	r3, #1
 8002b82:	2300      	movne	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	72fb      	strb	r3, [r7, #11]
            break;
 8002b88:	e062      	b.n	8002c50 <tft_print_colored+0x2bc>
        default:
            curr_text_buf[TFT_XY(i, j)] = ((*fp) | (is_underlined ? 0x80 : 0x00));
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	b25b      	sxtb	r3, r3
 8002b90:	7afa      	ldrb	r2, [r7, #11]
 8002b92:	2a00      	cmp	r2, #0
 8002b94:	d002      	beq.n	8002b9c <tft_print_colored+0x208>
 8002b96:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002b9a:	e000      	b.n	8002b9e <tft_print_colored+0x20a>
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	b25c      	sxtb	r4, r3
 8002ba2:	4b37      	ldr	r3, [pc, #220]	; (8002c80 <tft_print_colored+0x2ec>)
 8002ba4:	6819      	ldr	r1, [r3, #0]
 8002ba6:	4b36      	ldr	r3, [pc, #216]	; (8002c80 <tft_print_colored+0x2ec>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	7bbb      	ldrb	r3, [r7, #14]
 8002bb0:	4a34      	ldr	r2, [pc, #208]	; (8002c84 <tft_print_colored+0x2f0>)
 8002bb2:	7812      	ldrb	r2, [r2, #0]
 8002bb4:	fb03 f202 	mul.w	r2, r3, r2
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	441a      	add	r2, r3
 8002bbc:	b2e4      	uxtb	r4, r4
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4403      	add	r3, r0
 8002bc4:	015b      	lsls	r3, r3, #5
 8002bc6:	440b      	add	r3, r1
 8002bc8:	4413      	add	r3, r2
 8002bca:	3301      	adds	r3, #1
 8002bcc:	4622      	mov	r2, r4
 8002bce:	701a      	strb	r2, [r3, #0]
            curr_text_color_buf[TFT_XY(i, j)] = is_special ? curr_text_color_sp : text_color;
 8002bd0:	7b7b      	ldrb	r3, [r7, #13]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <tft_print_colored+0x248>
 8002bd6:	4b2c      	ldr	r3, [pc, #176]	; (8002c88 <tft_print_colored+0x2f4>)
 8002bd8:	881a      	ldrh	r2, [r3, #0]
 8002bda:	e000      	b.n	8002bde <tft_print_colored+0x24a>
 8002bdc:	88ba      	ldrh	r2, [r7, #4]
 8002bde:	4b28      	ldr	r3, [pc, #160]	; (8002c80 <tft_print_colored+0x2ec>)
 8002be0:	6819      	ldr	r1, [r3, #0]
 8002be2:	4b27      	ldr	r3, [pc, #156]	; (8002c80 <tft_print_colored+0x2ec>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	461c      	mov	r4, r3
 8002bea:	7bbb      	ldrb	r3, [r7, #14]
 8002bec:	4825      	ldr	r0, [pc, #148]	; (8002c84 <tft_print_colored+0x2f0>)
 8002bee:	7800      	ldrb	r0, [r0, #0]
 8002bf0:	fb03 f000 	mul.w	r0, r3, r0
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
 8002bf6:	4418      	add	r0, r3
 8002bf8:	4623      	mov	r3, r4
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4423      	add	r3, r4
 8002bfe:	015b      	lsls	r3, r3, #5
 8002c00:	4403      	add	r3, r0
 8002c02:	33a0      	adds	r3, #160	; 0xa0
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	440b      	add	r3, r1
 8002c08:	805a      	strh	r2, [r3, #2]
            curr_bg_color_buf[TFT_XY(i, j)] = is_highlighted ? curr_highlight_color : bg_color;
 8002c0a:	7b3b      	ldrb	r3, [r7, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <tft_print_colored+0x282>
 8002c10:	4b1e      	ldr	r3, [pc, #120]	; (8002c8c <tft_print_colored+0x2f8>)
 8002c12:	881a      	ldrh	r2, [r3, #0]
 8002c14:	e000      	b.n	8002c18 <tft_print_colored+0x284>
 8002c16:	8b3a      	ldrh	r2, [r7, #24]
 8002c18:	4b19      	ldr	r3, [pc, #100]	; (8002c80 <tft_print_colored+0x2ec>)
 8002c1a:	6819      	ldr	r1, [r3, #0]
 8002c1c:	4b18      	ldr	r3, [pc, #96]	; (8002c80 <tft_print_colored+0x2ec>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	461c      	mov	r4, r3
 8002c24:	7bbb      	ldrb	r3, [r7, #14]
 8002c26:	4817      	ldr	r0, [pc, #92]	; (8002c84 <tft_print_colored+0x2f0>)
 8002c28:	7800      	ldrb	r0, [r0, #0]
 8002c2a:	fb03 f000 	mul.w	r0, r3, r0
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	4418      	add	r0, r3
 8002c32:	4623      	mov	r3, r4
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4423      	add	r3, r4
 8002c38:	015b      	lsls	r3, r3, #5
 8002c3a:	4403      	add	r3, r0
 8002c3c:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	440b      	add	r3, r1
 8002c44:	805a      	strh	r2, [r3, #2]
            i++;
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	73fb      	strb	r3, [r7, #15]
            break;
 8002c4c:	e000      	b.n	8002c50 <tft_print_colored+0x2bc>
            break;
 8002c4e:	bf00      	nop
        }
        fp++;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	3301      	adds	r3, #1
 8002c54:	603b      	str	r3, [r7, #0]
    while (*fp && i < char_max_x && j < char_max_y) {
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00a      	beq.n	8002c74 <tft_print_colored+0x2e0>
 8002c5e:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <tft_print_colored+0x2f0>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	7bfa      	ldrb	r2, [r7, #15]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d205      	bcs.n	8002c74 <tft_print_colored+0x2e0>
 8002c68:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <tft_print_colored+0x2fc>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	7bba      	ldrb	r2, [r7, #14]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	f4ff aea6 	bcc.w	80029c0 <tft_print_colored+0x2c>
    }
}
 8002c74:	bf00      	nop
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc90      	pop	{r4, r7}
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	20000000 	.word	0x20000000
 8002c84:	20008139 	.word	0x20008139
 8002c88:	20008136 	.word	0x20008136
 8002c8c:	20008132 	.word	0x20008132
 8002c90:	2000813a 	.word	0x2000813a

08002c94 <tft_printc>:
 *
 * @param x x-coordinate
 * @param y y-coordinate
 * @param fp pointer to character
 */
void tft_printc(uint8_t x, uint8_t y, const char *fp) {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	603a      	str	r2, [r7, #0]
 8002c9e:	71fb      	strb	r3, [r7, #7]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	71bb      	strb	r3, [r7, #6]
    tft_print_colored(x, y, fp, curr_text_color, curr_bg_color);
 8002ca4:	4b07      	ldr	r3, [pc, #28]	; (8002cc4 <tft_printc+0x30>)
 8002ca6:	881a      	ldrh	r2, [r3, #0]
 8002ca8:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <tft_printc+0x34>)
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	79b9      	ldrb	r1, [r7, #6]
 8002cae:	79f8      	ldrb	r0, [r7, #7]
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	f7ff fe6d 	bl	8002994 <tft_print_colored>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20008134 	.word	0x20008134
 8002cc8:	20008130 	.word	0x20008130

08002ccc <tft_prints>:
 * @param x starting x-coordinate
 * @param y starting y-coordinate
 * @param fmt string to be printed with format
 * @param __VA_ARGS__ variables to replace spaceholders
 */
void tft_prints(uint8_t x, uint8_t y, const char *fmt, ...) {
 8002ccc:	b40c      	push	{r2, r3}
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b08e      	sub	sp, #56	; 0x38
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	460a      	mov	r2, r1
 8002cd8:	71fb      	strb	r3, [r7, #7]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	71bb      	strb	r3, [r7, #6]
    char buf[CHAR_MAX_X * 2] = { 0 }, *fp = buf;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	f107 0314 	add.w	r3, r7, #20
 8002ce6:	2224      	movs	r2, #36	; 0x24
 8002ce8:	2100      	movs	r1, #0
 8002cea:	4618      	mov	r0, r3
 8002cec:	f006 f9c0 	bl	8009070 <memset>
 8002cf0:	f107 0310 	add.w	r3, r7, #16
 8002cf4:	60fb      	str	r3, [r7, #12]

    va_list args;
    va_start(args, fmt);
 8002cf6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002cfa:	60bb      	str	r3, [r7, #8]
    print(&fp, fmt, args);
 8002cfc:	f107 030c 	add.w	r3, r7, #12
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff fa27 	bl	8002158 <print>

    tft_printc(x, y, buf);
 8002d0a:	f107 0210 	add.w	r2, r7, #16
 8002d0e:	79b9      	ldrb	r1, [r7, #6]
 8002d10:	79fb      	ldrb	r3, [r7, #7]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff ffbe 	bl	8002c94 <tft_printc>
}
 8002d18:	bf00      	nop
 8002d1a:	3738      	adds	r7, #56	; 0x38
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d22:	b002      	add	sp, #8
 8002d24:	4770      	bx	lr
	...

08002d28 <tft_print_rectangle_dma>:
#endif
    }
}

void tft_print_rectangle_dma(uint16_t color, uint32_t x, uint32_t y, uint32_t w,
        uint32_t h) {
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08c      	sub	sp, #48	; 0x30
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	607a      	str	r2, [r7, #4]
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	4603      	mov	r3, r0
 8002d36:	81fb      	strh	r3, [r7, #14]
    uint32_t i = w * h;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d3c:	fb02 f303 	mul.w	r3, r2, r3
 8002d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t l = (i > TFT_DMA_BUF_PIXELS) ? TFT_DMA_BUF_PIXELS : i; // safety guard
 8002d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d44:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002d48:	bf28      	it	cs
 8002d4a:	f44f 53a0 	movcs.w	r3, #5120	; 0x1400
 8002d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    tft_buffer_pixels(curr_tft_dma_buf, color, l);
 8002d50:	4b31      	ldr	r3, [pc, #196]	; (8002e18 <tft_print_rectangle_dma+0xf0>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	461a      	mov	r2, r3
 8002d56:	4613      	mov	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	02db      	lsls	r3, r3, #11
 8002d5e:	4a2f      	ldr	r2, [pc, #188]	; (8002e1c <tft_print_rectangle_dma+0xf4>)
 8002d60:	441a      	add	r2, r3
 8002d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d64:	627a      	str	r2, [r7, #36]	; 0x24
 8002d66:	89fa      	ldrh	r2, [r7, #14]
 8002d68:	847a      	strh	r2, [r7, #34]	; 0x22
 8002d6a:	61fb      	str	r3, [r7, #28]
 8002d6c:	f107 0314 	add.w	r3, r7, #20
 8002d70:	61bb      	str	r3, [r7, #24]
 8002d72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002d74:	82fb      	strh	r3, [r7, #22]
    out[0] = rgb565 >> 8;
 8002d76:	8afb      	ldrh	r3, [r7, #22]
 8002d78:	0a1b      	lsrs	r3, r3, #8
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	701a      	strb	r2, [r3, #0]
    out[1] = rgb565;
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	3301      	adds	r3, #1
 8002d86:	8afa      	ldrh	r2, [r7, #22]
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	701a      	strb	r2, [r3, #0]
}
 8002d8c:	bf00      	nop
    while (len--) {
 8002d8e:	e009      	b.n	8002da4 <tft_print_rectangle_dma+0x7c>
        *out++ = buf[0];
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	627a      	str	r2, [r7, #36]	; 0x24
 8002d96:	7d3a      	ldrb	r2, [r7, #20]
 8002d98:	701a      	strb	r2, [r3, #0]
        *out++ = buf[1];
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	627a      	str	r2, [r7, #36]	; 0x24
 8002da0:	7d7a      	ldrb	r2, [r7, #21]
 8002da2:	701a      	strb	r2, [r3, #0]
    while (len--) {
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	1e5a      	subs	r2, r3, #1
 8002da8:	61fa      	str	r2, [r7, #28]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <tft_print_rectangle_dma+0x68>
}
 8002dae:	bf00      	nop
    tft_set_region(x, y, w - 1, h - 1);
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	b298      	uxth	r0, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	b299      	uxth	r1, r3
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	f7ff fc30 	bl	800262c <tft_set_region>
    write_command(0x2c);
 8002dcc:	202c      	movs	r0, #44	; 0x2c
 8002dce:	f7ff fae5 	bl	800239c <write_command>
    while (HAL_SPI_GetState(&TFT_SPI) != HAL_SPI_STATE_READY)
 8002dd2:	bf00      	nop
 8002dd4:	4812      	ldr	r0, [pc, #72]	; (8002e20 <tft_print_rectangle_dma+0xf8>)
 8002dd6:	f004 f81f 	bl	8006e18 <HAL_SPI_GetState>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d1f9      	bne.n	8002dd4 <tft_print_rectangle_dma+0xac>
        ;
    write_many_dma(0x2c, curr_tft_dma_buf, l * PIXEL_BYTES);
 8002de0:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <tft_print_rectangle_dma+0xf0>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	461a      	mov	r2, r3
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	02db      	lsls	r3, r3, #11
 8002dee:	4a0b      	ldr	r2, [pc, #44]	; (8002e1c <tft_print_rectangle_dma+0xf4>)
 8002df0:	1899      	adds	r1, r3, r2
 8002df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	202c      	movs	r0, #44	; 0x2c
 8002dfe:	f7ff fb19 	bl	8002434 <write_many_dma>
    buf_ptr ^= 0x1;
 8002e02:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <tft_print_rectangle_dma+0xf0>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	f083 0301 	eor.w	r3, r3, #1
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	4b02      	ldr	r3, [pc, #8]	; (8002e18 <tft_print_rectangle_dma+0xf0>)
 8002e0e:	701a      	strb	r2, [r3, #0]
}
 8002e10:	bf00      	nop
 8002e12:	3730      	adds	r7, #48	; 0x30
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20008780 	.word	0x20008780
 8002e1c:	20008784 	.word	0x20008784
 8002e20:	2000d7ac 	.word	0x2000d7ac

08002e24 <tft_print_rectangle>:
 * @param y starting y-coordinate
 * @param w width
 * @param h height
 */
void tft_print_rectangle(uint16_t color, uint32_t x, uint32_t y, uint32_t w,
        uint32_t h) {
 8002e24:	b590      	push	{r4, r7, lr}
 8002e26:	b08d      	sub	sp, #52	; 0x34
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
 8002e2e:	603b      	str	r3, [r7, #0]
 8002e30:	4603      	mov	r3, r0
 8002e32:	81fb      	strh	r3, [r7, #14]
    uint32_t i = w * h;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e38:	fb02 f303 	mul.w	r3, r2, r3
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
    if (i <= (64)) {
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	2b40      	cmp	r3, #64	; 0x40
 8002e42:	d82f      	bhi.n	8002ea4 <tft_print_rectangle+0x80>
 8002e44:	f107 0314 	add.w	r3, r7, #20
 8002e48:	61bb      	str	r3, [r7, #24]
 8002e4a:	89fb      	ldrh	r3, [r7, #14]
 8002e4c:	82fb      	strh	r3, [r7, #22]
    out[0] = rgb565 >> 8;
 8002e4e:	8afb      	ldrh	r3, [r7, #22]
 8002e50:	0a1b      	lsrs	r3, r3, #8
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	701a      	strb	r2, [r3, #0]
    out[1] = rgb565;
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	8afa      	ldrh	r2, [r7, #22]
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	701a      	strb	r2, [r3, #0]
}
 8002e64:	bf00      	nop
        uint8_t buf[PIXEL_BYTES];
        tft_buffer_pixel(buf, color);

        tft_set_region(x, y, w - 1, h - 1);
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	b298      	uxth	r0, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	b299      	uxth	r1, r3
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	f7ff fbd5 	bl	800262c <tft_set_region>
        write_command(0x2c);
 8002e82:	202c      	movs	r0, #44	; 0x2c
 8002e84:	f7ff fa8a 	bl	800239c <write_command>
        for (; i != 0; i--) {
 8002e88:	e008      	b.n	8002e9c <tft_print_rectangle+0x78>
            write_data(buf, PIXEL_BYTES);
 8002e8a:	f107 0314 	add.w	r3, r7, #20
 8002e8e:	2102      	movs	r1, #2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff faa7 	bl	80023e4 <write_data>
        for (; i != 0; i--) {
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f3      	bne.n	8002e8a <tft_print_rectangle+0x66>
        if (h % buf_max_h > 0) {
            tft_print_rectangle_dma(color, x, y + num_section * buf_max_h, w,
                    h % buf_max_h);
        }
    }
}
 8002ea2:	e040      	b.n	8002f26 <tft_print_rectangle+0x102>
        uint16_t buf_max_h = TFT_DMA_BUF_PIXELS / w;
 8002ea4:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eae:	83fb      	strh	r3, [r7, #30]
        uint16_t num_section = h / buf_max_h;
 8002eb0:	8bfb      	ldrh	r3, [r7, #30]
 8002eb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb8:	83bb      	strh	r3, [r7, #28]
        for (int k = 0; k < num_section; ++k) {
 8002eba:	2300      	movs	r3, #0
 8002ebc:	623b      	str	r3, [r7, #32]
 8002ebe:	e010      	b.n	8002ee2 <tft_print_rectangle+0xbe>
            tft_print_rectangle_dma(color, x, y + k * buf_max_h, w, buf_max_h);
 8002ec0:	8bfb      	ldrh	r3, [r7, #30]
 8002ec2:	6a3a      	ldr	r2, [r7, #32]
 8002ec4:	fb02 f303 	mul.w	r3, r2, r3
 8002ec8:	461a      	mov	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	441a      	add	r2, r3
 8002ece:	8bfb      	ldrh	r3, [r7, #30]
 8002ed0:	89f8      	ldrh	r0, [r7, #14]
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	68b9      	ldr	r1, [r7, #8]
 8002ed8:	f7ff ff26 	bl	8002d28 <tft_print_rectangle_dma>
        for (int k = 0; k < num_section; ++k) {
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	623b      	str	r3, [r7, #32]
 8002ee2:	8bbb      	ldrh	r3, [r7, #28]
 8002ee4:	6a3a      	ldr	r2, [r7, #32]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	dbea      	blt.n	8002ec0 <tft_print_rectangle+0x9c>
        if (h % buf_max_h > 0) {
 8002eea:	8bfa      	ldrh	r2, [r7, #30]
 8002eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eee:	fbb3 f1f2 	udiv	r1, r3, r2
 8002ef2:	fb01 f202 	mul.w	r2, r1, r2
 8002ef6:	1a9b      	subs	r3, r3, r2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d014      	beq.n	8002f26 <tft_print_rectangle+0x102>
            tft_print_rectangle_dma(color, x, y + num_section * buf_max_h, w,
 8002efc:	8bbb      	ldrh	r3, [r7, #28]
 8002efe:	8bfa      	ldrh	r2, [r7, #30]
 8002f00:	fb02 f303 	mul.w	r3, r2, r3
 8002f04:	461a      	mov	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	18d4      	adds	r4, r2, r3
 8002f0a:	8bfa      	ldrh	r2, [r7, #30]
 8002f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002f12:	fb01 f202 	mul.w	r2, r1, r2
 8002f16:	1a9b      	subs	r3, r3, r2
 8002f18:	89f8      	ldrh	r0, [r7, #14]
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	4622      	mov	r2, r4
 8002f20:	68b9      	ldr	r1, [r7, #8]
 8002f22:	f7ff ff01 	bl	8002d28 <tft_print_rectangle_dma>
}
 8002f26:	bf00      	nop
 8002f28:	372c      	adds	r7, #44	; 0x2c
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd90      	pop	{r4, r7, pc}
	...

08002f30 <tft_print_image>:
 * @param x starting x-coordinate
 * @param y starting y-coordinate
 * @param w width
 * @param h height
 */
void tft_print_image(void *buf, uint32_t x, uint32_t y, uint32_t w, uint32_t h) {
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
 8002f3c:	603b      	str	r3, [r7, #0]
    while (HAL_SPI_GetState(&TFT_SPI) != HAL_SPI_STATE_READY)
 8002f3e:	bf00      	nop
 8002f40:	4812      	ldr	r0, [pc, #72]	; (8002f8c <tft_print_image+0x5c>)
 8002f42:	f003 ff69 	bl	8006e18 <HAL_SPI_GetState>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d1f9      	bne.n	8002f40 <tft_print_image+0x10>
        ;  // wait for the SPI to be ready

    tft_set_region(x, y, w - 1, h - 1);
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	b298      	uxth	r0, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	b299      	uxth	r1, r3
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	f7ff fb62 	bl	800262c <tft_set_region>

    write_many_dma(0x2c, buf, w * h * PIXEL_BYTES);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	fb12 f303 	smulbb	r3, r2, r3
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	68f9      	ldr	r1, [r7, #12]
 8002f7e:	202c      	movs	r0, #44	; 0x2c
 8002f80:	f7ff fa58 	bl	8002434 <write_many_dma>
}
 8002f84:	bf00      	nop
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	2000d7ac 	.word	0x2000d7ac

08002f90 <tft_update>:
 * @brief Update the screen in certain period
 *
 * @param period time in ms
 * @return state
 */
uint8_t tft_update(uint32_t period) {
 8002f90:	b590      	push	{r4, r7, lr}
 8002f92:	b08d      	sub	sp, #52	; 0x34
 8002f94:	af02      	add	r7, sp, #8
 8002f96:	6078      	str	r0, [r7, #4]
    static uint32_t last_update = 0;
    if ((HAL_GetTick() - last_update) < period)
 8002f98:	f001 fb64 	bl	8004664 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4ba0      	ldr	r3, [pc, #640]	; (8003220 <tft_update+0x290>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d901      	bls.n	8002fae <tft_update+0x1e>
        return 2;
 8002faa:	2302      	movs	r3, #2
 8002fac:	e133      	b.n	8003216 <tft_update+0x286>
    last_update = HAL_GetTick();
 8002fae:	f001 fb59 	bl	8004664 <HAL_GetTick>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	4a9a      	ldr	r2, [pc, #616]	; (8003220 <tft_update+0x290>)
 8002fb6:	6013      	str	r3, [r2, #0]

    for (uint8_t j = 0; j < char_max_y; j++) {
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002fbe:	e115      	b.n	80031ec <tft_update+0x25c>
        for (uint8_t i = 0; i < char_max_x; i++) {
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002fc6:	e105      	b.n	80031d4 <tft_update+0x244>
            if (tft_char_is_changed(tft_screens, i, j)) {
 8002fc8:	4b96      	ldr	r3, [pc, #600]	; (8003224 <tft_update+0x294>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002fd0:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7fe fe01 	bl	8001bdc <tft_char_is_changed>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 80f4 	beq.w	80031ca <tft_update+0x23a>
                uint8_t adj_cnt = 1;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                while ((i + adj_cnt < char_max_x)
 8002fe8:	e004      	b.n	8002ff4 <tft_update+0x64>
                        && tft_char_is_changed(tft_screens, i + (adj_cnt), j)
                        && (adj_cnt < THREADED_TFT_BUF_LEN))
                    adj_cnt++;  // Search for diff char
 8002fea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002fee:	3301      	adds	r3, #1
 8002ff0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                while ((i + adj_cnt < char_max_x)
 8002ff4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002ff8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002ffc:	4413      	add	r3, r2
 8002ffe:	4a8a      	ldr	r2, [pc, #552]	; (8003228 <tft_update+0x298>)
 8003000:	7812      	ldrb	r2, [r2, #0]
 8003002:	4293      	cmp	r3, r2
 8003004:	da13      	bge.n	800302e <tft_update+0x9e>
                        && tft_char_is_changed(tft_screens, i + (adj_cnt), j)
 8003006:	4b87      	ldr	r3, [pc, #540]	; (8003224 <tft_update+0x294>)
 8003008:	6818      	ldr	r0, [r3, #0]
 800300a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800300e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003012:	4413      	add	r3, r2
 8003014:	b2db      	uxtb	r3, r3
 8003016:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800301a:	4619      	mov	r1, r3
 800301c:	f7fe fdde 	bl	8001bdc <tft_char_is_changed>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <tft_update+0x9e>
                        && (adj_cnt < THREADED_TFT_BUF_LEN))
 8003026:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800302a:	2b27      	cmp	r3, #39	; 0x27
 800302c:	d9dd      	bls.n	8002fea <tft_update+0x5a>

                uint16_t px = 0;
 800302e:	2300      	movs	r3, #0
 8003030:	847b      	strh	r3, [r7, #34]	; 0x22
                uint16_t y = 0;
 8003032:	2300      	movs	r3, #0
 8003034:	843b      	strh	r3, [r7, #32]
                while (y < CHAR_HEIGHT) {
 8003036:	e09a      	b.n	800316e <tft_update+0x1de>
                    uint8_t char_cnt = 0;
 8003038:	2300      	movs	r3, #0
 800303a:	77fb      	strb	r3, [r7, #31]
                    while (char_cnt != adj_cnt) {
 800303c:	e08e      	b.n	800315c <tft_update+0x1cc>
                        const uint8_t char_ptr = (CHAR_PTR(
 800303e:	4b79      	ldr	r3, [pc, #484]	; (8003224 <tft_update+0x294>)
 8003040:	6819      	ldr	r1, [r3, #0]
 8003042:	4b78      	ldr	r3, [pc, #480]	; (8003224 <tft_update+0x294>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	461c      	mov	r4, r3
 800304a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800304e:	4a76      	ldr	r2, [pc, #472]	; (8003228 <tft_update+0x298>)
 8003050:	7812      	ldrb	r2, [r2, #0]
 8003052:	fb03 f202 	mul.w	r2, r3, r2
 8003056:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800305a:	7ffb      	ldrb	r3, [r7, #31]
 800305c:	4403      	add	r3, r0
 800305e:	441a      	add	r2, r3
 8003060:	4623      	mov	r3, r4
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4423      	add	r3, r4
 8003066:	015b      	lsls	r3, r3, #5
 8003068:	440b      	add	r3, r1
 800306a:	4413      	add	r3, r2
 800306c:	3301      	adds	r3, #1
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	3b20      	subs	r3, #32
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	461a      	mov	r2, r3
                                curr_text_buf[TFT_XY(i + char_cnt, j)]))[y];
 8003076:	8c3b      	ldrh	r3, [r7, #32]
 8003078:	4413      	add	r3, r2
 800307a:	4a6c      	ldr	r2, [pc, #432]	; (800322c <tft_update+0x29c>)
 800307c:	4413      	add	r3, r2
                        const uint8_t char_ptr = (CHAR_PTR(
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	777b      	strb	r3, [r7, #29]
                        uint16_t fg = curr_text_color_buf[TFT_XY(i + char_cnt, j)];
 8003082:	4b68      	ldr	r3, [pc, #416]	; (8003224 <tft_update+0x294>)
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	4b67      	ldr	r3, [pc, #412]	; (8003224 <tft_update+0x294>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	461c      	mov	r4, r3
 800308e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003092:	4965      	ldr	r1, [pc, #404]	; (8003228 <tft_update+0x298>)
 8003094:	7809      	ldrb	r1, [r1, #0]
 8003096:	fb03 f101 	mul.w	r1, r3, r1
 800309a:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800309e:	7ffb      	ldrb	r3, [r7, #31]
 80030a0:	4403      	add	r3, r0
 80030a2:	4419      	add	r1, r3
 80030a4:	4623      	mov	r3, r4
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4423      	add	r3, r4
 80030aa:	015b      	lsls	r3, r3, #5
 80030ac:	440b      	add	r3, r1
 80030ae:	33a0      	adds	r3, #160	; 0xa0
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	4413      	add	r3, r2
 80030b4:	885b      	ldrh	r3, [r3, #2]
 80030b6:	837b      	strh	r3, [r7, #26]
                        uint16_t bg = curr_bg_color_buf[TFT_XY(i + char_cnt, j)];
 80030b8:	4b5a      	ldr	r3, [pc, #360]	; (8003224 <tft_update+0x294>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	4b59      	ldr	r3, [pc, #356]	; (8003224 <tft_update+0x294>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	461c      	mov	r4, r3
 80030c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030c8:	4957      	ldr	r1, [pc, #348]	; (8003228 <tft_update+0x298>)
 80030ca:	7809      	ldrb	r1, [r1, #0]
 80030cc:	fb03 f101 	mul.w	r1, r3, r1
 80030d0:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80030d4:	7ffb      	ldrb	r3, [r7, #31]
 80030d6:	4403      	add	r3, r0
 80030d8:	4419      	add	r1, r3
 80030da:	4623      	mov	r3, r4
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4423      	add	r3, r4
 80030e0:	015b      	lsls	r3, r3, #5
 80030e2:	440b      	add	r3, r1
 80030e4:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	4413      	add	r3, r2
 80030ec:	885b      	ldrh	r3, [r3, #2]
 80030ee:	833b      	strh	r3, [r7, #24]
                        for (uint8_t x = CHAR_WIDTH; x > 0; x--) {
 80030f0:	2308      	movs	r3, #8
 80030f2:	77bb      	strb	r3, [r7, #30]
 80030f4:	e02c      	b.n	8003150 <tft_update+0x1c0>
                            uint16_t color =
                                    ((char_ptr >> (x - 1)) & 0x01) ? fg : bg;
 80030f6:	7f7a      	ldrb	r2, [r7, #29]
 80030f8:	7fbb      	ldrb	r3, [r7, #30]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	fa42 f303 	asr.w	r3, r2, r3
 8003100:	f003 0301 	and.w	r3, r3, #1
                            uint16_t color =
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <tft_update+0x17c>
 8003108:	8b7b      	ldrh	r3, [r7, #26]
 800310a:	e000      	b.n	800310e <tft_update+0x17e>
 800310c:	8b3b      	ldrh	r3, [r7, #24]
 800310e:	82fb      	strh	r3, [r7, #22]
                            tft_buffer_pixel(&tft_dma_bufs[buf_ptr][px], color);
 8003110:	4b47      	ldr	r3, [pc, #284]	; (8003230 <tft_update+0x2a0>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	4619      	mov	r1, r3
 8003116:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003118:	460b      	mov	r3, r1
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	02db      	lsls	r3, r3, #11
 8003120:	4413      	add	r3, r2
 8003122:	4a44      	ldr	r2, [pc, #272]	; (8003234 <tft_update+0x2a4>)
 8003124:	4413      	add	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
 8003128:	8afb      	ldrh	r3, [r7, #22]
 800312a:	81fb      	strh	r3, [r7, #14]
    out[0] = rgb565 >> 8;
 800312c:	89fb      	ldrh	r3, [r7, #14]
 800312e:	0a1b      	lsrs	r3, r3, #8
 8003130:	b29b      	uxth	r3, r3
 8003132:	b2da      	uxtb	r2, r3
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	701a      	strb	r2, [r3, #0]
    out[1] = rgb565;
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	3301      	adds	r3, #1
 800313c:	89fa      	ldrh	r2, [r7, #14]
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	701a      	strb	r2, [r3, #0]
}
 8003142:	bf00      	nop
                            px += PIXEL_BYTES;
 8003144:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003146:	3302      	adds	r3, #2
 8003148:	847b      	strh	r3, [r7, #34]	; 0x22
                        for (uint8_t x = CHAR_WIDTH; x > 0; x--) {
 800314a:	7fbb      	ldrb	r3, [r7, #30]
 800314c:	3b01      	subs	r3, #1
 800314e:	77bb      	strb	r3, [r7, #30]
 8003150:	7fbb      	ldrb	r3, [r7, #30]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1cf      	bne.n	80030f6 <tft_update+0x166>
                        }
                        char_cnt++;
 8003156:	7ffb      	ldrb	r3, [r7, #31]
 8003158:	3301      	adds	r3, #1
 800315a:	77fb      	strb	r3, [r7, #31]
                    while (char_cnt != adj_cnt) {
 800315c:	7ffa      	ldrb	r2, [r7, #31]
 800315e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003162:	429a      	cmp	r2, r3
 8003164:	f47f af6b 	bne.w	800303e <tft_update+0xae>
                    }
                    y++;
 8003168:	8c3b      	ldrh	r3, [r7, #32]
 800316a:	3301      	adds	r3, #1
 800316c:	843b      	strh	r3, [r7, #32]
                while (y < CHAR_HEIGHT) {
 800316e:	8c3b      	ldrh	r3, [r7, #32]
 8003170:	2b0f      	cmp	r3, #15
 8003172:	f67f af61 	bls.w	8003038 <tft_update+0xa8>
                }

                tft_print_image(&tft_dma_bufs[buf_ptr][0], i * CHAR_WIDTH,
 8003176:	4b2e      	ldr	r3, [pc, #184]	; (8003230 <tft_update+0x2a0>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	461a      	mov	r2, r3
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	02db      	lsls	r3, r3, #11
 8003184:	4a2b      	ldr	r2, [pc, #172]	; (8003234 <tft_update+0x2a4>)
 8003186:	1898      	adds	r0, r3, r2
 8003188:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4619      	mov	r1, r3
                        j * CHAR_HEIGHT, adj_cnt * CHAR_WIDTH,
 8003190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003194:	011b      	lsls	r3, r3, #4
                tft_print_image(&tft_dma_bufs[buf_ptr][0], i * CHAR_WIDTH,
 8003196:	461a      	mov	r2, r3
                        j * CHAR_HEIGHT, adj_cnt * CHAR_WIDTH,
 8003198:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800319c:	00db      	lsls	r3, r3, #3
                tft_print_image(&tft_dma_bufs[buf_ptr][0], i * CHAR_WIDTH,
 800319e:	461c      	mov	r4, r3
 80031a0:	2310      	movs	r3, #16
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	4623      	mov	r3, r4
 80031a6:	f7ff fec3 	bl	8002f30 <tft_print_image>
                        CHAR_HEIGHT);
                buf_ptr ^= 0x1;
 80031aa:	4b21      	ldr	r3, [pc, #132]	; (8003230 <tft_update+0x2a0>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	f083 0301 	eor.w	r3, r3, #1
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	4b1e      	ldr	r3, [pc, #120]	; (8003230 <tft_update+0x2a0>)
 80031b6:	701a      	strb	r2, [r3, #0]
                i += adj_cnt - 1;
 80031b8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80031bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80031c0:	4413      	add	r3, r2
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        for (uint8_t i = 0; i < char_max_x; i++) {
 80031ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80031ce:	3301      	adds	r3, #1
 80031d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80031d4:	4b14      	ldr	r3, [pc, #80]	; (8003228 <tft_update+0x298>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80031dc:	429a      	cmp	r2, r3
 80031de:	f4ff aef3 	bcc.w	8002fc8 <tft_update+0x38>
    for (uint8_t j = 0; j < char_max_y; j++) {
 80031e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031e6:	3301      	adds	r3, #1
 80031e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80031ec:	4b12      	ldr	r3, [pc, #72]	; (8003238 <tft_update+0x2a8>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80031f4:	429a      	cmp	r2, r3
 80031f6:	f4ff aee3 	bcc.w	8002fc0 <tft_update+0x30>
            }
        }
    }

    // Swap pointers
    curr_screen = !curr_screen;
 80031fa:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <tft_update+0x294>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	bf0c      	ite	eq
 8003204:	2301      	moveq	r3, #1
 8003206:	2300      	movne	r3, #0
 8003208:	b2da      	uxtb	r2, r3
 800320a:	4b06      	ldr	r3, [pc, #24]	; (8003224 <tft_update+0x294>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	701a      	strb	r2, [r3, #0]

    tft_clear();
 8003210:	f7ff f964 	bl	80024dc <tft_clear>

    return 0;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	372c      	adds	r7, #44	; 0x2c
 800321a:	46bd      	mov	sp, r7
 800321c:	bd90      	pop	{r4, r7, pc}
 800321e:	bf00      	nop
 8003220:	2000d784 	.word	0x2000d784
 8003224:	20000000 	.word	0x20000000
 8003228:	20008139 	.word	0x20008139
 800322c:	08009374 	.word	0x08009374
 8003230:	20008780 	.word	0x20008780
 8003234:	20008784 	.word	0x20008784
 8003238:	2000813a 	.word	0x2000813a
 800323c:	00000000 	.word	0x00000000

08003240 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003240:	b5b0      	push	{r4, r5, r7, lr}
 8003242:	b0b6      	sub	sp, #216	; 0xd8
 8003244:	af02      	add	r7, sp, #8
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8003246:	f001 f9a7 	bl	8004598 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800324a:	f000 fab5 	bl	80037b8 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800324e:	f7fe fbd5 	bl	80019fc <MX_GPIO_Init>
    MX_CAN1_Init();
 8003252:	f7fd fe3f 	bl	8000ed4 <MX_CAN1_Init>
    MX_CAN2_Init();
 8003256:	f7fd fe73 	bl	8000f40 <MX_CAN2_Init>
    MX_USART1_UART_Init();
 800325a:	f000 fd6d 	bl	8003d38 <MX_USART1_UART_Init>
    MX_DMA_Init();
 800325e:	f7fe fbad 	bl	80019bc <MX_DMA_Init>
    MX_USART2_UART_Init();
 8003262:	f000 fd93 	bl	8003d8c <MX_USART2_UART_Init>
    MX_TIM5_Init();
 8003266:	f000 fc77 	bl	8003b58 <MX_TIM5_Init>
    /* USER CODE BEGIN 2 */
    volatile uint32_t last_ticks = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    volatile uint32_t last_ticks_inc = 0;
 8003270:	2300      	movs	r3, #0
 8003272:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

    // we turn off all the led first
    led_off(LED1);
 8003276:	2201      	movs	r2, #1
 8003278:	2180      	movs	r1, #128	; 0x80
 800327a:	48b4      	ldr	r0, [pc, #720]	; (800354c <main+0x30c>)
 800327c:	f002 fd42 	bl	8005d04 <HAL_GPIO_WritePin>
    led_off(LED2);
 8003280:	2201      	movs	r2, #1
 8003282:	2140      	movs	r1, #64	; 0x40
 8003284:	48b1      	ldr	r0, [pc, #708]	; (800354c <main+0x30c>)
 8003286:	f002 fd3d 	bl	8005d04 <HAL_GPIO_WritePin>
    led_off(LED3);
 800328a:	2201      	movs	r2, #1
 800328c:	2120      	movs	r1, #32
 800328e:	48af      	ldr	r0, [pc, #700]	; (800354c <main+0x30c>)
 8003290:	f002 fd38 	bl	8005d04 <HAL_GPIO_WritePin>
    led_off(LED4);
 8003294:	2201      	movs	r2, #1
 8003296:	2110      	movs	r1, #16
 8003298:	48ac      	ldr	r0, [pc, #688]	; (800354c <main+0x30c>)
 800329a:	f002 fd33 	bl	8005d04 <HAL_GPIO_WritePin>
    tft_init(PIN_ON_TOP, BLACK, WHITE, YELLOW, DARK_GREEN);
 800329e:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80032a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032ac:	2100      	movs	r1, #0
 80032ae:	2000      	movs	r0, #0
 80032b0:	f7ff fa04 	bl	80026bc <tft_init>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80032b4:	2201      	movs	r2, #1
 80032b6:	2108      	movs	r1, #8
 80032b8:	48a5      	ldr	r0, [pc, #660]	; (8003550 <main+0x310>)
 80032ba:	f002 fd23 	bl	8005d04 <HAL_GPIO_WritePin>
    pwm_init();
 80032be:	f000 fd23 	bl	8003d08 <pwm_init>

    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    tft_force_clear();
 80032c2:	f7ff fb3b 	bl	800293c <tft_force_clear>
    can_init();
 80032c6:	f7fd ff13 	bl	80010f0 <can_init>
    PID_variable_init();
 80032ca:	f7fe f9c3 	bl	8001654 <PID_variable_init>
    Reset_dat_init();
 80032ce:	f000 fe13 	bl	8003ef8 <Reset_dat_init>

	// pre-define constant
	const Motor motorchoice[] = {CAN1_MOTOR0, CAN1_MOTOR1, CAN2_MOTOR2, CAN2_MOTOR3};
 80032d2:	4ba0      	ldr	r3, [pc, #640]	; (8003554 <main+0x314>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	const char text_k[6][20] = {"kp-up", "kp-down", "ki-up", "ki-down", "kd-up", "kd-down"};
 80032da:	4a9f      	ldr	r2, [pc, #636]	; (8003558 <main+0x318>)
 80032dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80032e0:	4611      	mov	r1, r2
 80032e2:	2278      	movs	r2, #120	; 0x78
 80032e4:	4618      	mov	r0, r3
 80032e6:	f005 feb5 	bl	8009054 <memcpy>
	const char test_m[3][20] = {"Speed Increase", "Speed Decrease", "Speed Test"};
 80032ea:	4b9c      	ldr	r3, [pc, #624]	; (800355c <main+0x31c>)
 80032ec:	1d3c      	adds	r4, r7, #4
 80032ee:	461d      	mov	r5, r3
 80032f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003300:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	enum {kp_increase, kp_decrease, ki_increase, ki_decrease, kd_increase, kd_decrease} k_choice;
	static int target_vel[4] = {0,0,0,0};
	static int velocity = 1000;

	//initialize
	k_choice = kp_increase;
 8003304:	2300      	movs	r3, #0
 8003306:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
				kd = -0.5,
				ki = 0.001;


    while (1) {
    	can_ctrl_loop();
 800330a:	f7fe f81f 	bl	800134c <can_ctrl_loop>
    	if (HAL_GetTick() - last_ticks >= 100) {
 800330e:	f001 f9a9 	bl	8004664 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b63      	cmp	r3, #99	; 0x63
 800331c:	d908      	bls.n	8003330 <main+0xf0>
			led_toggle(LED1);
 800331e:	2180      	movs	r1, #128	; 0x80
 8003320:	488a      	ldr	r0, [pc, #552]	; (800354c <main+0x30c>)
 8003322:	f002 fd08 	bl	8005d36 <HAL_GPIO_TogglePin>
			last_ticks = HAL_GetTick();
 8003326:	f001 f99d 	bl	8004664 <HAL_GetTick>
 800332a:	4603      	mov	r3, r0
 800332c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		}

    	switch(Btn1_mode) {
 8003330:	4b8b      	ldr	r3, [pc, #556]	; (8003560 <main+0x320>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b03      	cmp	r3, #3
 8003336:	f200 808e 	bhi.w	8003456 <main+0x216>
 800333a:	a201      	add	r2, pc, #4	; (adr r2, 8003340 <main+0x100>)
 800333c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003340:	08003351 	.word	0x08003351
 8003344:	08003377 	.word	0x08003377
 8003348:	080033a7 	.word	0x080033a7
 800334c:	080033d3 	.word	0x080033d3
    	    // listening
    	    case (0):
    	        if (!btn_read(BTN1)) {
 8003350:	2108      	movs	r1, #8
 8003352:	487e      	ldr	r0, [pc, #504]	; (800354c <main+0x30c>)
 8003354:	f002 fcbe 	bl	8005cd4 <HAL_GPIO_ReadPin>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d176      	bne.n	800344c <main+0x20c>
    	        	Btn1_mode++;
 800335e:	4b80      	ldr	r3, [pc, #512]	; (8003560 <main+0x320>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	3301      	adds	r3, #1
 8003364:	4a7e      	ldr	r2, [pc, #504]	; (8003560 <main+0x320>)
 8003366:	6013      	str	r3, [r2, #0]
    	        	Btn1_HoldTime = HAL_GetTick();
 8003368:	f001 f97c 	bl	8004664 <HAL_GetTick>
 800336c:	4603      	mov	r3, r0
 800336e:	461a      	mov	r2, r3
 8003370:	4b7c      	ldr	r3, [pc, #496]	; (8003564 <main+0x324>)
 8003372:	601a      	str	r2, [r3, #0]
    	        }
    	    break;
 8003374:	e06a      	b.n	800344c <main+0x20c>

    	    // Holding
    	    case (1):
				if (HAL_GetTick() - Btn1_HoldTime < 500) {
 8003376:	f001 f975 	bl	8004664 <HAL_GetTick>
 800337a:	4603      	mov	r3, r0
 800337c:	4a79      	ldr	r2, [pc, #484]	; (8003564 <main+0x324>)
 800337e:	6812      	ldr	r2, [r2, #0]
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003386:	d20a      	bcs.n	800339e <main+0x15e>
					if (btn_read(BTN1)) Btn1_mode = 2;
 8003388:	2108      	movs	r1, #8
 800338a:	4870      	ldr	r0, [pc, #448]	; (800354c <main+0x30c>)
 800338c:	f002 fca2 	bl	8005cd4 <HAL_GPIO_ReadPin>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d05c      	beq.n	8003450 <main+0x210>
 8003396:	4b72      	ldr	r3, [pc, #456]	; (8003560 <main+0x320>)
 8003398:	2202      	movs	r2, #2
 800339a:	601a      	str	r2, [r3, #0]
				}
				else Btn1_mode = 3;
    	    break;
 800339c:	e058      	b.n	8003450 <main+0x210>
				else Btn1_mode = 3;
 800339e:	4b70      	ldr	r3, [pc, #448]	; (8003560 <main+0x320>)
 80033a0:	2203      	movs	r2, #3
 80033a2:	601a      	str	r2, [r3, #0]
    	    break;
 80033a4:	e054      	b.n	8003450 <main+0x210>

    	    //Clicking
    	    case (2):
				motornum++; motornum %= 3;
 80033a6:	4b70      	ldr	r3, [pc, #448]	; (8003568 <main+0x328>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	3301      	adds	r3, #1
 80033ac:	4a6e      	ldr	r2, [pc, #440]	; (8003568 <main+0x328>)
 80033ae:	6013      	str	r3, [r2, #0]
 80033b0:	4b6d      	ldr	r3, [pc, #436]	; (8003568 <main+0x328>)
 80033b2:	6819      	ldr	r1, [r3, #0]
 80033b4:	4b6d      	ldr	r3, [pc, #436]	; (800356c <main+0x32c>)
 80033b6:	fb83 3201 	smull	r3, r2, r3, r1
 80033ba:	17cb      	asrs	r3, r1, #31
 80033bc:	1ad2      	subs	r2, r2, r3
 80033be:	4613      	mov	r3, r2
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	4413      	add	r3, r2
 80033c4:	1aca      	subs	r2, r1, r3
 80033c6:	4b68      	ldr	r3, [pc, #416]	; (8003568 <main+0x328>)
 80033c8:	601a      	str	r2, [r3, #0]
    	    	Btn1_mode = 0;
 80033ca:	4b65      	ldr	r3, [pc, #404]	; (8003560 <main+0x320>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
    	    break;
 80033d0:	e041      	b.n	8003456 <main+0x216>

    	    //Holding
    	    case (3):
    	    	switch (motornum) {
 80033d2:	4b65      	ldr	r3, [pc, #404]	; (8003568 <main+0x328>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d012      	beq.n	8003400 <main+0x1c0>
 80033da:	2b02      	cmp	r3, #2
 80033dc:	dc25      	bgt.n	800342a <main+0x1ea>
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <main+0x1a8>
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d006      	beq.n	80033f4 <main+0x1b4>
 80033e6:	e020      	b.n	800342a <main+0x1ea>
    	    		case 0:
    	    			velocity += 50;
 80033e8:	4b61      	ldr	r3, [pc, #388]	; (8003570 <main+0x330>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	3332      	adds	r3, #50	; 0x32
 80033ee:	4a60      	ldr	r2, [pc, #384]	; (8003570 <main+0x330>)
 80033f0:	6013      	str	r3, [r2, #0]
    	    		break;
 80033f2:	e01a      	b.n	800342a <main+0x1ea>

    	    		case 1:
    	    			velocity -= 50;
 80033f4:	4b5e      	ldr	r3, [pc, #376]	; (8003570 <main+0x330>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3b32      	subs	r3, #50	; 0x32
 80033fa:	4a5d      	ldr	r2, [pc, #372]	; (8003570 <main+0x330>)
 80033fc:	6013      	str	r3, [r2, #0]
    	    		break;
 80033fe:	e014      	b.n	800342a <main+0x1ea>

    	    		case 2:
						for (int i = 0; i < 4; i++) {
 8003400:	2300      	movs	r3, #0
 8003402:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003406:	e00b      	b.n	8003420 <main+0x1e0>
							target_vel[i] = velocity;
 8003408:	4b59      	ldr	r3, [pc, #356]	; (8003570 <main+0x330>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	4959      	ldr	r1, [pc, #356]	; (8003574 <main+0x334>)
 800340e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						for (int i = 0; i < 4; i++) {
 8003416:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800341a:	3301      	adds	r3, #1
 800341c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003420:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003424:	2b03      	cmp	r3, #3
 8003426:	ddef      	ble.n	8003408 <main+0x1c8>
						}
    	    		break;
 8003428:	bf00      	nop
    	    	}
    	    	if (btn_read(BTN1)) {
 800342a:	2108      	movs	r1, #8
 800342c:	4847      	ldr	r0, [pc, #284]	; (800354c <main+0x30c>)
 800342e:	f002 fc51 	bl	8005cd4 <HAL_GPIO_ReadPin>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00d      	beq.n	8003454 <main+0x214>
    	    		target_vel[motornum] = 0;
 8003438:	4b4b      	ldr	r3, [pc, #300]	; (8003568 <main+0x328>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a4d      	ldr	r2, [pc, #308]	; (8003574 <main+0x334>)
 800343e:	2100      	movs	r1, #0
 8003440:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	    		Btn1_mode = 0;
 8003444:	4b46      	ldr	r3, [pc, #280]	; (8003560 <main+0x320>)
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
    	    	}
			break;
 800344a:	e003      	b.n	8003454 <main+0x214>
    	    break;
 800344c:	bf00      	nop
 800344e:	e002      	b.n	8003456 <main+0x216>
    	    break;
 8003450:	bf00      	nop
 8003452:	e000      	b.n	8003456 <main+0x216>
			break;
 8003454:	bf00      	nop
    	}

    	switch(Btn2_mode) {
 8003456:	4b48      	ldr	r3, [pc, #288]	; (8003578 <main+0x338>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b03      	cmp	r3, #3
 800345c:	f200 810f 	bhi.w	800367e <main+0x43e>
 8003460:	a201      	add	r2, pc, #4	; (adr r2, 8003468 <main+0x228>)
 8003462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003466:	bf00      	nop
 8003468:	08003479 	.word	0x08003479
 800346c:	080034a1 	.word	0x080034a1
 8003470:	080034d3 	.word	0x080034d3
 8003474:	080034ff 	.word	0x080034ff
			// listening
			case (0):
				if (!btn_read(BTN2)) {
 8003478:	2104      	movs	r1, #4
 800347a:	4840      	ldr	r0, [pc, #256]	; (800357c <main+0x33c>)
 800347c:	f002 fc2a 	bl	8005cd4 <HAL_GPIO_ReadPin>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	f040 80f8 	bne.w	8003678 <main+0x438>
					Btn2_mode++;
 8003488:	4b3b      	ldr	r3, [pc, #236]	; (8003578 <main+0x338>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	3301      	adds	r3, #1
 800348e:	4a3a      	ldr	r2, [pc, #232]	; (8003578 <main+0x338>)
 8003490:	6013      	str	r3, [r2, #0]
					Btn2_HoldTime = HAL_GetTick();
 8003492:	f001 f8e7 	bl	8004664 <HAL_GetTick>
 8003496:	4603      	mov	r3, r0
 8003498:	461a      	mov	r2, r3
 800349a:	4b39      	ldr	r3, [pc, #228]	; (8003580 <main+0x340>)
 800349c:	601a      	str	r2, [r3, #0]
				}
			break;
 800349e:	e0eb      	b.n	8003678 <main+0x438>

			// Holding
			case (1):
				if (HAL_GetTick() - Btn2_HoldTime < 500) {
 80034a0:	f001 f8e0 	bl	8004664 <HAL_GetTick>
 80034a4:	4603      	mov	r3, r0
 80034a6:	4a36      	ldr	r2, [pc, #216]	; (8003580 <main+0x340>)
 80034a8:	6812      	ldr	r2, [r2, #0]
 80034aa:	1a9b      	subs	r3, r3, r2
 80034ac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80034b0:	d20b      	bcs.n	80034ca <main+0x28a>
					if (btn_read(BTN2)) Btn2_mode = 2;
 80034b2:	2104      	movs	r1, #4
 80034b4:	4831      	ldr	r0, [pc, #196]	; (800357c <main+0x33c>)
 80034b6:	f002 fc0d 	bl	8005cd4 <HAL_GPIO_ReadPin>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 80dd 	beq.w	800367c <main+0x43c>
 80034c2:	4b2d      	ldr	r3, [pc, #180]	; (8003578 <main+0x338>)
 80034c4:	2202      	movs	r2, #2
 80034c6:	601a      	str	r2, [r3, #0]
				}
				else Btn2_mode = 3;
			break;
 80034c8:	e0d8      	b.n	800367c <main+0x43c>
				else Btn2_mode = 3;
 80034ca:	4b2b      	ldr	r3, [pc, #172]	; (8003578 <main+0x338>)
 80034cc:	2203      	movs	r2, #3
 80034ce:	601a      	str	r2, [r3, #0]
			break;
 80034d0:	e0d4      	b.n	800367c <main+0x43c>

			//Clicking
			case (2):
				k_choice++; k_choice %= 6;
 80034d2:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80034d6:	3301      	adds	r3, #1
 80034d8:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 80034dc:	f897 20cf 	ldrb.w	r2, [r7, #207]	; 0xcf
 80034e0:	4b28      	ldr	r3, [pc, #160]	; (8003584 <main+0x344>)
 80034e2:	fba3 1302 	umull	r1, r3, r3, r2
 80034e6:	0899      	lsrs	r1, r3, #2
 80034e8:	460b      	mov	r3, r1
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	440b      	add	r3, r1
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

				Btn2_mode = 0;
 80034f6:	4b20      	ldr	r3, [pc, #128]	; (8003578 <main+0x338>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]
			break;
 80034fc:	e0bf      	b.n	800367e <main+0x43e>

			//Holding
			case (3):
				if (btn_read(BTN2)) Btn2_mode = 0;
 80034fe:	2104      	movs	r1, #4
 8003500:	481e      	ldr	r0, [pc, #120]	; (800357c <main+0x33c>)
 8003502:	f002 fbe7 	bl	8005cd4 <HAL_GPIO_ReadPin>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <main+0x2d2>
 800350c:	4b1a      	ldr	r3, [pc, #104]	; (8003578 <main+0x338>)
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]

				if (HAL_GetTick() - last_ticks_inc >= 100) {
 8003512:	f001 f8a7 	bl	8004664 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b63      	cmp	r3, #99	; 0x63
 8003520:	f240 808b 	bls.w	800363a <main+0x3fa>
					switch (k_choice) {
 8003524:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8003528:	2b05      	cmp	r3, #5
 800352a:	f200 8081 	bhi.w	8003630 <main+0x3f0>
 800352e:	a201      	add	r2, pc, #4	; (adr r2, 8003534 <main+0x2f4>)
 8003530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003534:	08003589 	.word	0x08003589
 8003538:	080035a5 	.word	0x080035a5
 800353c:	080035c1 	.word	0x080035c1
 8003540:	080035dd 	.word	0x080035dd
 8003544:	080035f9 	.word	0x080035f9
 8003548:	08003615 	.word	0x08003615
 800354c:	40020400 	.word	0x40020400
 8003550:	40020800 	.word	0x40020800
 8003554:	080092a0 	.word	0x080092a0
 8003558:	080092a4 	.word	0x080092a4
 800355c:	0800931c 	.word	0x0800931c
 8003560:	2000d788 	.word	0x2000d788
 8003564:	2000d78c 	.word	0x2000d78c
 8003568:	2000d790 	.word	0x2000d790
 800356c:	55555556 	.word	0x55555556
 8003570:	20000004 	.word	0x20000004
 8003574:	2000d794 	.word	0x2000d794
 8003578:	2000d7a4 	.word	0x2000d7a4
 800357c:	40020c00 	.word	0x40020c00
 8003580:	2000d7a8 	.word	0x2000d7a8
 8003584:	aaaaaaab 	.word	0xaaaaaaab
						case (kp_increase):
							kp *= 1.1;
 8003588:	4b81      	ldr	r3, [pc, #516]	; (8003790 <main+0x550>)
 800358a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800358e:	a37c      	add	r3, pc, #496	; (adr r3, 8003780 <main+0x540>)
 8003590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003594:	f7fc ffd4 	bl	8000540 <__aeabi_dmul>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	497c      	ldr	r1, [pc, #496]	; (8003790 <main+0x550>)
 800359e:	e9c1 2300 	strd	r2, r3, [r1]
						break;
 80035a2:	e045      	b.n	8003630 <main+0x3f0>

						case (kp_decrease):
							kp *= 0.9;
 80035a4:	4b7a      	ldr	r3, [pc, #488]	; (8003790 <main+0x550>)
 80035a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035aa:	a377      	add	r3, pc, #476	; (adr r3, 8003788 <main+0x548>)
 80035ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b0:	f7fc ffc6 	bl	8000540 <__aeabi_dmul>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	4975      	ldr	r1, [pc, #468]	; (8003790 <main+0x550>)
 80035ba:	e9c1 2300 	strd	r2, r3, [r1]
						break;
 80035be:	e037      	b.n	8003630 <main+0x3f0>

						case (ki_increase):
							ki *= 1.1;
 80035c0:	4b74      	ldr	r3, [pc, #464]	; (8003794 <main+0x554>)
 80035c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035c6:	a36e      	add	r3, pc, #440	; (adr r3, 8003780 <main+0x540>)
 80035c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035cc:	f7fc ffb8 	bl	8000540 <__aeabi_dmul>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	496f      	ldr	r1, [pc, #444]	; (8003794 <main+0x554>)
 80035d6:	e9c1 2300 	strd	r2, r3, [r1]
						break;
 80035da:	e029      	b.n	8003630 <main+0x3f0>

						case (ki_decrease):
							ki *= 0.9;
 80035dc:	4b6d      	ldr	r3, [pc, #436]	; (8003794 <main+0x554>)
 80035de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035e2:	a369      	add	r3, pc, #420	; (adr r3, 8003788 <main+0x548>)
 80035e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e8:	f7fc ffaa 	bl	8000540 <__aeabi_dmul>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4968      	ldr	r1, [pc, #416]	; (8003794 <main+0x554>)
 80035f2:	e9c1 2300 	strd	r2, r3, [r1]
						break;
 80035f6:	e01b      	b.n	8003630 <main+0x3f0>

						case (kd_increase):
							kd *= 1.1;
 80035f8:	4b67      	ldr	r3, [pc, #412]	; (8003798 <main+0x558>)
 80035fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035fe:	a360      	add	r3, pc, #384	; (adr r3, 8003780 <main+0x540>)
 8003600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003604:	f7fc ff9c 	bl	8000540 <__aeabi_dmul>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	4962      	ldr	r1, [pc, #392]	; (8003798 <main+0x558>)
 800360e:	e9c1 2300 	strd	r2, r3, [r1]
						break;
 8003612:	e00d      	b.n	8003630 <main+0x3f0>

						case (kd_decrease):
							kd *= 0.9;
 8003614:	4b60      	ldr	r3, [pc, #384]	; (8003798 <main+0x558>)
 8003616:	e9d3 0100 	ldrd	r0, r1, [r3]
 800361a:	a35b      	add	r3, pc, #364	; (adr r3, 8003788 <main+0x548>)
 800361c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003620:	f7fc ff8e 	bl	8000540 <__aeabi_dmul>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	495b      	ldr	r1, [pc, #364]	; (8003798 <main+0x558>)
 800362a:	e9c1 2300 	strd	r2, r3, [r1]
						break;
 800362e:	bf00      	nop
					}
					last_ticks_inc = HAL_GetTick();
 8003630:	f001 f818 	bl	8004664 <HAL_GetTick>
 8003634:	4603      	mov	r3, r0
 8003636:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
				}
				tft_prints(0, 7, "%0.5f", kp);
 800363a:	4b55      	ldr	r3, [pc, #340]	; (8003790 <main+0x550>)
 800363c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003640:	e9cd 2300 	strd	r2, r3, [sp]
 8003644:	4a55      	ldr	r2, [pc, #340]	; (800379c <main+0x55c>)
 8003646:	2107      	movs	r1, #7
 8003648:	2000      	movs	r0, #0
 800364a:	f7ff fb3f 	bl	8002ccc <tft_prints>
				tft_prints(0, 8, "%0.5f", ki);
 800364e:	4b51      	ldr	r3, [pc, #324]	; (8003794 <main+0x554>)
 8003650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003654:	e9cd 2300 	strd	r2, r3, [sp]
 8003658:	4a50      	ldr	r2, [pc, #320]	; (800379c <main+0x55c>)
 800365a:	2108      	movs	r1, #8
 800365c:	2000      	movs	r0, #0
 800365e:	f7ff fb35 	bl	8002ccc <tft_prints>
				tft_prints(0, 9, "%0.5f", kd);
 8003662:	4b4d      	ldr	r3, [pc, #308]	; (8003798 <main+0x558>)
 8003664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003668:	e9cd 2300 	strd	r2, r3, [sp]
 800366c:	4a4b      	ldr	r2, [pc, #300]	; (800379c <main+0x55c>)
 800366e:	2109      	movs	r1, #9
 8003670:	2000      	movs	r0, #0
 8003672:	f7ff fb2b 	bl	8002ccc <tft_prints>
			break;
 8003676:	e002      	b.n	800367e <main+0x43e>
			break;
 8003678:	bf00      	nop
 800367a:	e000      	b.n	800367e <main+0x43e>
			break;
 800367c:	bf00      	nop
		}
		ReceiveData(target_vel);
 800367e:	4848      	ldr	r0, [pc, #288]	; (80037a0 <main+0x560>)
 8003680:	f000 fe2c 	bl	80042dc <ReceiveData>
    	for (int i = 0; i < 4; i++ ) {
 8003684:	2300      	movs	r3, #0
 8003686:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800368a:	e02a      	b.n	80036e2 <main+0x4a2>
    		set_motor_speed(motorchoice[i], target_vel[i], kp, ki, kd, motorchoice);
 800368c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8003690:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003694:	4413      	add	r3, r2
 8003696:	7818      	ldrb	r0, [r3, #0]
 8003698:	4a41      	ldr	r2, [pc, #260]	; (80037a0 <main+0x560>)
 800369a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800369e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a2:	b21b      	sxth	r3, r3
 80036a4:	4a3a      	ldr	r2, [pc, #232]	; (8003790 <main+0x550>)
 80036a6:	ed92 7b00 	vldr	d7, [r2]
 80036aa:	4a3a      	ldr	r2, [pc, #232]	; (8003794 <main+0x554>)
 80036ac:	ed92 6b00 	vldr	d6, [r2]
 80036b0:	4a39      	ldr	r2, [pc, #228]	; (8003798 <main+0x558>)
 80036b2:	ed92 5b00 	vldr	d5, [r2]
 80036b6:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80036ba:	eeb0 2a45 	vmov.f32	s4, s10
 80036be:	eef0 2a65 	vmov.f32	s5, s11
 80036c2:	eeb0 1a46 	vmov.f32	s2, s12
 80036c6:	eef0 1a66 	vmov.f32	s3, s13
 80036ca:	eeb0 0a47 	vmov.f32	s0, s14
 80036ce:	eef0 0a67 	vmov.f32	s1, s15
 80036d2:	4619      	mov	r1, r3
 80036d4:	f7fe f808 	bl	80016e8 <set_motor_speed>
    	for (int i = 0; i < 4; i++ ) {
 80036d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036dc:	3301      	adds	r3, #1
 80036de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80036e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036e6:	2b03      	cmp	r3, #3
 80036e8:	ddd0      	ble.n	800368c <main+0x44c>
    	}

    	testing(motorchoice);
 80036ea:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fe f8c4 	bl	800187c <testing>
    	tft_prints(0, 1, "%s time: %d", test_m[motornum], (int) HAL_GetTick());
 80036f4:	4b2b      	ldr	r3, [pc, #172]	; (80037a4 <main+0x564>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	1d39      	adds	r1, r7, #4
 80036fa:	4613      	mov	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	18cc      	adds	r4, r1, r3
 8003704:	f000 ffae 	bl	8004664 <HAL_GetTick>
 8003708:	4603      	mov	r3, r0
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	4623      	mov	r3, r4
 800370e:	4a26      	ldr	r2, [pc, #152]	; (80037a8 <main+0x568>)
 8003710:	2101      	movs	r1, #1
 8003712:	2000      	movs	r0, #0
 8003714:	f7ff fada 	bl	8002ccc <tft_prints>
    	tft_prints(0, 2, "%s vel: %d", text_k[k_choice], velocity);
 8003718:	f897 20cf 	ldrb.w	r2, [r7, #207]	; 0xcf
 800371c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	18ca      	adds	r2, r1, r3
 800372a:	4b20      	ldr	r3, [pc, #128]	; (80037ac <main+0x56c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	4613      	mov	r3, r2
 8003732:	4a1f      	ldr	r2, [pc, #124]	; (80037b0 <main+0x570>)
 8003734:	2102      	movs	r1, #2
 8003736:	2000      	movs	r0, #0
 8003738:	f7ff fac8 	bl	8002ccc <tft_prints>
    	tft_prints(0, 3, "tar: %d %d ", target_vel[0], target_vel[1]);
 800373c:	4b18      	ldr	r3, [pc, #96]	; (80037a0 <main+0x560>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	4b17      	ldr	r3, [pc, #92]	; (80037a0 <main+0x560>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	4613      	mov	r3, r2
 8003748:	4a1a      	ldr	r2, [pc, #104]	; (80037b4 <main+0x574>)
 800374a:	2103      	movs	r1, #3
 800374c:	2000      	movs	r0, #0
 800374e:	f7ff fabd 	bl	8002ccc <tft_prints>
    	tft_prints(0, 4, "tar: %d %d ", target_vel[2], target_vel[3]);
 8003752:	4b13      	ldr	r3, [pc, #76]	; (80037a0 <main+0x560>)
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	4b12      	ldr	r3, [pc, #72]	; (80037a0 <main+0x560>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	4613      	mov	r3, r2
 800375e:	4a15      	ldr	r2, [pc, #84]	; (80037b4 <main+0x574>)
 8003760:	2104      	movs	r1, #4
 8003762:	2000      	movs	r0, #0
 8003764:	f7ff fab2 	bl	8002ccc <tft_prints>
    	tft_update(100);
 8003768:	2064      	movs	r0, #100	; 0x64
 800376a:	f7ff fc11 	bl	8002f90 <tft_update>
    	SendData(motorchoice);
 800376e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003772:	4618      	mov	r0, r3
 8003774:	f000 fdc8 	bl	8004308 <SendData>
    	can_ctrl_loop();
 8003778:	e5c7      	b.n	800330a <main+0xca>
 800377a:	bf00      	nop
 800377c:	f3af 8000 	nop.w
 8003780:	9999999a 	.word	0x9999999a
 8003784:	3ff19999 	.word	0x3ff19999
 8003788:	cccccccd 	.word	0xcccccccd
 800378c:	3feccccc 	.word	0x3feccccc
 8003790:	20000008 	.word	0x20000008
 8003794:	20000010 	.word	0x20000010
 8003798:	20000018 	.word	0x20000018
 800379c:	08009274 	.word	0x08009274
 80037a0:	2000d794 	.word	0x2000d794
 80037a4:	2000d790 	.word	0x2000d790
 80037a8:	0800927c 	.word	0x0800927c
 80037ac:	20000004 	.word	0x20000004
 80037b0:	08009288 	.word	0x08009288
 80037b4:	08009294 	.word	0x08009294

080037b8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b094      	sub	sp, #80	; 0x50
 80037bc:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80037be:	f107 0320 	add.w	r3, r7, #32
 80037c2:	2230      	movs	r2, #48	; 0x30
 80037c4:	2100      	movs	r1, #0
 80037c6:	4618      	mov	r0, r3
 80037c8:	f005 fc52 	bl	8009070 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80037cc:	f107 030c 	add.w	r3, r7, #12
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	60da      	str	r2, [r3, #12]
 80037da:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 80037dc:	2300      	movs	r3, #0
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	4b28      	ldr	r3, [pc, #160]	; (8003884 <SystemClock_Config+0xcc>)
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	4a27      	ldr	r2, [pc, #156]	; (8003884 <SystemClock_Config+0xcc>)
 80037e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ea:	6413      	str	r3, [r2, #64]	; 0x40
 80037ec:	4b25      	ldr	r3, [pc, #148]	; (8003884 <SystemClock_Config+0xcc>)
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80037f8:	2300      	movs	r3, #0
 80037fa:	607b      	str	r3, [r7, #4]
 80037fc:	4b22      	ldr	r3, [pc, #136]	; (8003888 <SystemClock_Config+0xd0>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a21      	ldr	r2, [pc, #132]	; (8003888 <SystemClock_Config+0xd0>)
 8003802:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	4b1f      	ldr	r3, [pc, #124]	; (8003888 <SystemClock_Config+0xd0>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003810:	607b      	str	r3, [r7, #4]
 8003812:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003814:	2301      	movs	r3, #1
 8003816:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003818:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800381e:	2302      	movs	r3, #2
 8003820:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003822:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003826:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 4;
 8003828:	2304      	movs	r3, #4
 800382a:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 800382c:	23a8      	movs	r3, #168	; 0xa8
 800382e:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003830:	2302      	movs	r3, #2
 8003832:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8003834:	2304      	movs	r3, #4
 8003836:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003838:	f107 0320 	add.w	r3, r7, #32
 800383c:	4618      	mov	r0, r3
 800383e:	f002 fab9 	bl	8005db4 <HAL_RCC_OscConfig>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <SystemClock_Config+0x94>
        Error_Handler();
 8003848:	f000 f820 	bl	800388c <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800384c:	230f      	movs	r3, #15
 800384e:	60fb      	str	r3, [r7, #12]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003850:	2302      	movs	r3, #2
 8003852:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003854:	2300      	movs	r3, #0
 8003856:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003858:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800385c:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800385e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003862:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8003864:	f107 030c 	add.w	r3, r7, #12
 8003868:	2105      	movs	r1, #5
 800386a:	4618      	mov	r0, r3
 800386c:	f002 fd1a 	bl	80062a4 <HAL_RCC_ClockConfig>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <SystemClock_Config+0xc2>
        Error_Handler();
 8003876:	f000 f809 	bl	800388c <Error_Handler>
    }
}
 800387a:	bf00      	nop
 800387c:	3750      	adds	r7, #80	; 0x50
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40023800 	.word	0x40023800
 8003888:	40007000 	.word	0x40007000

0800388c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003890:	b672      	cpsid	i
}
 8003892:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8003894:	e7fe      	b.n	8003894 <Error_Handler+0x8>
	...

08003898 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800389c:	4b17      	ldr	r3, [pc, #92]	; (80038fc <MX_SPI1_Init+0x64>)
 800389e:	4a18      	ldr	r2, [pc, #96]	; (8003900 <MX_SPI1_Init+0x68>)
 80038a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80038a2:	4b16      	ldr	r3, [pc, #88]	; (80038fc <MX_SPI1_Init+0x64>)
 80038a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80038aa:	4b14      	ldr	r3, [pc, #80]	; (80038fc <MX_SPI1_Init+0x64>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80038b0:	4b12      	ldr	r3, [pc, #72]	; (80038fc <MX_SPI1_Init+0x64>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038b6:	4b11      	ldr	r3, [pc, #68]	; (80038fc <MX_SPI1_Init+0x64>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038bc:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <MX_SPI1_Init+0x64>)
 80038be:	2200      	movs	r2, #0
 80038c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80038c2:	4b0e      	ldr	r3, [pc, #56]	; (80038fc <MX_SPI1_Init+0x64>)
 80038c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038ca:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <MX_SPI1_Init+0x64>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038d0:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <MX_SPI1_Init+0x64>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80038d6:	4b09      	ldr	r3, [pc, #36]	; (80038fc <MX_SPI1_Init+0x64>)
 80038d8:	2200      	movs	r2, #0
 80038da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038dc:	4b07      	ldr	r3, [pc, #28]	; (80038fc <MX_SPI1_Init+0x64>)
 80038de:	2200      	movs	r2, #0
 80038e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80038e2:	4b06      	ldr	r3, [pc, #24]	; (80038fc <MX_SPI1_Init+0x64>)
 80038e4:	220a      	movs	r2, #10
 80038e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80038e8:	4804      	ldr	r0, [pc, #16]	; (80038fc <MX_SPI1_Init+0x64>)
 80038ea:	f002 fefb 	bl	80066e4 <HAL_SPI_Init>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80038f4:	f7ff ffca 	bl	800388c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80038f8:	bf00      	nop
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	2000d7ac 	.word	0x2000d7ac
 8003900:	40013000 	.word	0x40013000

08003904 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08a      	sub	sp, #40	; 0x28
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800390c:	f107 0314 	add.w	r3, r7, #20
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	60da      	str	r2, [r3, #12]
 800391a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a39      	ldr	r2, [pc, #228]	; (8003a08 <HAL_SPI_MspInit+0x104>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d16b      	bne.n	80039fe <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	4b38      	ldr	r3, [pc, #224]	; (8003a0c <HAL_SPI_MspInit+0x108>)
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	4a37      	ldr	r2, [pc, #220]	; (8003a0c <HAL_SPI_MspInit+0x108>)
 8003930:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003934:	6453      	str	r3, [r2, #68]	; 0x44
 8003936:	4b35      	ldr	r3, [pc, #212]	; (8003a0c <HAL_SPI_MspInit+0x108>)
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800393e:	613b      	str	r3, [r7, #16]
 8003940:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003942:	2300      	movs	r3, #0
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	4b31      	ldr	r3, [pc, #196]	; (8003a0c <HAL_SPI_MspInit+0x108>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	4a30      	ldr	r2, [pc, #192]	; (8003a0c <HAL_SPI_MspInit+0x108>)
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	6313      	str	r3, [r2, #48]	; 0x30
 8003952:	4b2e      	ldr	r3, [pc, #184]	; (8003a0c <HAL_SPI_MspInit+0x108>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = TFT_SCK_Pin|TFT_MOSI_Pin;
 800395e:	23a0      	movs	r3, #160	; 0xa0
 8003960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003962:	2302      	movs	r3, #2
 8003964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003966:	2300      	movs	r3, #0
 8003968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800396a:	2303      	movs	r3, #3
 800396c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800396e:	2305      	movs	r3, #5
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003972:	f107 0314 	add.w	r3, r7, #20
 8003976:	4619      	mov	r1, r3
 8003978:	4825      	ldr	r0, [pc, #148]	; (8003a10 <HAL_SPI_MspInit+0x10c>)
 800397a:	f002 f80f 	bl	800599c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800397e:	4b25      	ldr	r3, [pc, #148]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 8003980:	4a25      	ldr	r2, [pc, #148]	; (8003a18 <HAL_SPI_MspInit+0x114>)
 8003982:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8003984:	4b23      	ldr	r3, [pc, #140]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 8003986:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800398a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800398c:	4b21      	ldr	r3, [pc, #132]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 800398e:	2240      	movs	r2, #64	; 0x40
 8003990:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003992:	4b20      	ldr	r3, [pc, #128]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 8003994:	2200      	movs	r2, #0
 8003996:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003998:	4b1e      	ldr	r3, [pc, #120]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 800399a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800399e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039a0:	4b1c      	ldr	r3, [pc, #112]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039a6:	4b1b      	ldr	r3, [pc, #108]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80039ac:	4b19      	ldr	r3, [pc, #100]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80039b2:	4b18      	ldr	r3, [pc, #96]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80039b8:	4b16      	ldr	r3, [pc, #88]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 80039ba:	2204      	movs	r2, #4
 80039bc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80039be:	4b15      	ldr	r3, [pc, #84]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 80039c0:	2203      	movs	r2, #3
 80039c2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_INC16;
 80039c4:	4b13      	ldr	r3, [pc, #76]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 80039c6:	f04f 72c0 	mov.w	r2, #25165824	; 0x1800000
 80039ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80039cc:	4b11      	ldr	r3, [pc, #68]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80039d2:	4810      	ldr	r0, [pc, #64]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 80039d4:	f001 fbe0 	bl	8005198 <HAL_DMA_Init>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 80039de:	f7ff ff55 	bl	800388c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a0b      	ldr	r2, [pc, #44]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 80039e6:	649a      	str	r2, [r3, #72]	; 0x48
 80039e8:	4a0a      	ldr	r2, [pc, #40]	; (8003a14 <HAL_SPI_MspInit+0x110>)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80039ee:	2200      	movs	r2, #0
 80039f0:	2100      	movs	r1, #0
 80039f2:	2023      	movs	r0, #35	; 0x23
 80039f4:	f001 fb99 	bl	800512a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80039f8:	2023      	movs	r0, #35	; 0x23
 80039fa:	f001 fbb2 	bl	8005162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80039fe:	bf00      	nop
 8003a00:	3728      	adds	r7, #40	; 0x28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40013000 	.word	0x40013000
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	40020000 	.word	0x40020000
 8003a14:	2000d804 	.word	0x2000d804
 8003a18:	40026458 	.word	0x40026458

08003a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a22:	2300      	movs	r3, #0
 8003a24:	607b      	str	r3, [r7, #4]
 8003a26:	4b10      	ldr	r3, [pc, #64]	; (8003a68 <HAL_MspInit+0x4c>)
 8003a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2a:	4a0f      	ldr	r2, [pc, #60]	; (8003a68 <HAL_MspInit+0x4c>)
 8003a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a30:	6453      	str	r3, [r2, #68]	; 0x44
 8003a32:	4b0d      	ldr	r3, [pc, #52]	; (8003a68 <HAL_MspInit+0x4c>)
 8003a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a3a:	607b      	str	r3, [r7, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a3e:	2300      	movs	r3, #0
 8003a40:	603b      	str	r3, [r7, #0]
 8003a42:	4b09      	ldr	r3, [pc, #36]	; (8003a68 <HAL_MspInit+0x4c>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	4a08      	ldr	r2, [pc, #32]	; (8003a68 <HAL_MspInit+0x4c>)
 8003a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a4e:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <HAL_MspInit+0x4c>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a56:	603b      	str	r3, [r7, #0]
 8003a58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	40023800 	.word	0x40023800

08003a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a70:	e7fe      	b.n	8003a70 <NMI_Handler+0x4>

08003a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a72:	b480      	push	{r7}
 8003a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a76:	e7fe      	b.n	8003a76 <HardFault_Handler+0x4>

08003a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a7c:	e7fe      	b.n	8003a7c <MemManage_Handler+0x4>

08003a7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a82:	e7fe      	b.n	8003a82 <BusFault_Handler+0x4>

08003a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a88:	e7fe      	b.n	8003a88 <UsageFault_Handler+0x4>

08003a8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a8e:	bf00      	nop
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a9c:	bf00      	nop
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003aaa:	bf00      	nop
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ab8:	f000 fdc0 	bl	800463c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003abc:	bf00      	nop
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003ac4:	4802      	ldr	r0, [pc, #8]	; (8003ad0 <SPI1_IRQHandler+0x10>)
 8003ac6:	f003 f889 	bl	8006bdc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003aca:	bf00      	nop
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	2000d7ac 	.word	0x2000d7ac

08003ad4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ad8:	4802      	ldr	r0, [pc, #8]	; (8003ae4 <USART1_IRQHandler+0x10>)
 8003ada:	f004 fba1 	bl	8008220 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	2000d8d0 	.word	0x2000d8d0

08003ae8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003aec:	4802      	ldr	r0, [pc, #8]	; (8003af8 <USART2_IRQHandler+0x10>)
 8003aee:	f004 fb97 	bl	8008220 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003af2:	bf00      	nop
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	2000d914 	.word	0x2000d914

08003afc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAM_VSYNC_Pin);
 8003b00:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003b04:	f002 f932 	bl	8005d6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003b08:	bf00      	nop
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003b10:	4802      	ldr	r0, [pc, #8]	; (8003b1c <TIM5_IRQHandler+0x10>)
 8003b12:	f003 fc5f 	bl	80073d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	2000d864 	.word	0x2000d864

08003b20 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003b24:	4802      	ldr	r0, [pc, #8]	; (8003b30 <DMA2_Stream3_IRQHandler+0x10>)
 8003b26:	f001 fccf 	bl	80054c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003b2a:	bf00      	nop
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	2000d804 	.word	0x2000d804

08003b34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b38:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <SystemInit+0x20>)
 8003b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3e:	4a05      	ldr	r2, [pc, #20]	; (8003b54 <SystemInit+0x20>)
 8003b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b48:	bf00      	nop
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	e000ed00 	.word	0xe000ed00

08003b58 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b08e      	sub	sp, #56	; 0x38
 8003b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	605a      	str	r2, [r3, #4]
 8003b68:	609a      	str	r2, [r3, #8]
 8003b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b6c:	f107 0320 	add.w	r3, r7, #32
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b76:	1d3b      	adds	r3, r7, #4
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	609a      	str	r2, [r3, #8]
 8003b80:	60da      	str	r2, [r3, #12]
 8003b82:	611a      	str	r2, [r3, #16]
 8003b84:	615a      	str	r2, [r3, #20]
 8003b86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003b88:	4b2c      	ldr	r3, [pc, #176]	; (8003c3c <MX_TIM5_Init+0xe4>)
 8003b8a:	4a2d      	ldr	r2, [pc, #180]	; (8003c40 <MX_TIM5_Init+0xe8>)
 8003b8c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003b8e:	4b2b      	ldr	r3, [pc, #172]	; (8003c3c <MX_TIM5_Init+0xe4>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b94:	4b29      	ldr	r3, [pc, #164]	; (8003c3c <MX_TIM5_Init+0xe4>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8003b9a:	4b28      	ldr	r3, [pc, #160]	; (8003c3c <MX_TIM5_Init+0xe4>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ba0:	4b26      	ldr	r3, [pc, #152]	; (8003c3c <MX_TIM5_Init+0xe4>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ba6:	4b25      	ldr	r3, [pc, #148]	; (8003c3c <MX_TIM5_Init+0xe4>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003bac:	4823      	ldr	r0, [pc, #140]	; (8003c3c <MX_TIM5_Init+0xe4>)
 8003bae:	f003 faa1 	bl	80070f4 <HAL_TIM_Base_Init>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8003bb8:	f7ff fe68 	bl	800388c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003bc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	481c      	ldr	r0, [pc, #112]	; (8003c3c <MX_TIM5_Init+0xe4>)
 8003bca:	f003 fdcd 	bl	8007768 <HAL_TIM_ConfigClockSource>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8003bd4:	f7ff fe5a 	bl	800388c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003bd8:	4818      	ldr	r0, [pc, #96]	; (8003c3c <MX_TIM5_Init+0xe4>)
 8003bda:	f003 fada 	bl	8007192 <HAL_TIM_PWM_Init>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8003be4:	f7ff fe52 	bl	800388c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003be8:	2300      	movs	r3, #0
 8003bea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bec:	2300      	movs	r3, #0
 8003bee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003bf0:	f107 0320 	add.w	r3, r7, #32
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4811      	ldr	r0, [pc, #68]	; (8003c3c <MX_TIM5_Init+0xe4>)
 8003bf8:	f004 f9c0 	bl	8007f7c <HAL_TIMEx_MasterConfigSynchronization>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8003c02:	f7ff fe43 	bl	800388c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c06:	2360      	movs	r3, #96	; 0x60
 8003c08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c16:	1d3b      	adds	r3, r7, #4
 8003c18:	2200      	movs	r2, #0
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4807      	ldr	r0, [pc, #28]	; (8003c3c <MX_TIM5_Init+0xe4>)
 8003c1e:	f003 fce1 	bl	80075e4 <HAL_TIM_PWM_ConfigChannel>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8003c28:	f7ff fe30 	bl	800388c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003c2c:	4803      	ldr	r0, [pc, #12]	; (8003c3c <MX_TIM5_Init+0xe4>)
 8003c2e:	f000 f831 	bl	8003c94 <HAL_TIM_MspPostInit>

}
 8003c32:	bf00      	nop
 8003c34:	3738      	adds	r7, #56	; 0x38
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	2000d864 	.word	0x2000d864
 8003c40:	40000c00 	.word	0x40000c00

08003c44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a0e      	ldr	r2, [pc, #56]	; (8003c8c <HAL_TIM_Base_MspInit+0x48>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d115      	bne.n	8003c82 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	4b0d      	ldr	r3, [pc, #52]	; (8003c90 <HAL_TIM_Base_MspInit+0x4c>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	4a0c      	ldr	r2, [pc, #48]	; (8003c90 <HAL_TIM_Base_MspInit+0x4c>)
 8003c60:	f043 0308 	orr.w	r3, r3, #8
 8003c64:	6413      	str	r3, [r2, #64]	; 0x40
 8003c66:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <HAL_TIM_Base_MspInit+0x4c>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003c72:	2200      	movs	r2, #0
 8003c74:	2100      	movs	r1, #0
 8003c76:	2032      	movs	r0, #50	; 0x32
 8003c78:	f001 fa57 	bl	800512a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003c7c:	2032      	movs	r0, #50	; 0x32
 8003c7e:	f001 fa70 	bl	8005162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003c82:	bf00      	nop
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40000c00 	.word	0x40000c00
 8003c90:	40023800 	.word	0x40023800

08003c94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c9c:	f107 030c 	add.w	r3, r7, #12
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	605a      	str	r2, [r3, #4]
 8003ca6:	609a      	str	r2, [r3, #8]
 8003ca8:	60da      	str	r2, [r3, #12]
 8003caa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a12      	ldr	r2, [pc, #72]	; (8003cfc <HAL_TIM_MspPostInit+0x68>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d11d      	bne.n	8003cf2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	4b11      	ldr	r3, [pc, #68]	; (8003d00 <HAL_TIM_MspPostInit+0x6c>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	4a10      	ldr	r2, [pc, #64]	; (8003d00 <HAL_TIM_MspPostInit+0x6c>)
 8003cc0:	f043 0301 	orr.w	r3, r3, #1
 8003cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc6:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <HAL_TIM_MspPostInit+0x6c>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	60bb      	str	r3, [r7, #8]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = PWM1_Pin;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);
 8003ce6:	f107 030c 	add.w	r3, r7, #12
 8003cea:	4619      	mov	r1, r3
 8003cec:	4805      	ldr	r0, [pc, #20]	; (8003d04 <HAL_TIM_MspPostInit+0x70>)
 8003cee:	f001 fe55 	bl	800599c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003cf2:	bf00      	nop
 8003cf4:	3720      	adds	r7, #32
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40000c00 	.word	0x40000c00
 8003d00:	40023800 	.word	0x40023800
 8003d04:	40020000 	.word	0x40020000

08003d08 <pwm_init>:
        return ALL_OFF;
    }
}


void pwm_init(void) {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
	// init the pwm prescaler value and auto-reload value and start the pwm
	/* Your code start here */
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	4808      	ldr	r0, [pc, #32]	; (8003d30 <pwm_init+0x28>)
 8003d10:	f003 fa98 	bl	8007244 <HAL_TIM_PWM_Start>
	TIM5->ARR = 59999;
 8003d14:	4b07      	ldr	r3, [pc, #28]	; (8003d34 <pwm_init+0x2c>)
 8003d16:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003d1a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM5->PSC = 27;
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <pwm_init+0x2c>)
 8003d1e:	221b      	movs	r2, #27
 8003d20:	629a      	str	r2, [r3, #40]	; 0x28
	TIM5->CCR1 = 1499;
 8003d22:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <pwm_init+0x2c>)
 8003d24:	f240 52db 	movw	r2, #1499	; 0x5db
 8003d28:	635a      	str	r2, [r3, #52]	; 0x34
	/* Your code end here */
}
 8003d2a:	bf00      	nop
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	2000d864 	.word	0x2000d864
 8003d34:	40000c00 	.word	0x40000c00

08003d38 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d3c:	4b11      	ldr	r3, [pc, #68]	; (8003d84 <MX_USART1_UART_Init+0x4c>)
 8003d3e:	4a12      	ldr	r2, [pc, #72]	; (8003d88 <MX_USART1_UART_Init+0x50>)
 8003d40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003d42:	4b10      	ldr	r3, [pc, #64]	; (8003d84 <MX_USART1_UART_Init+0x4c>)
 8003d44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003d48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d4a:	4b0e      	ldr	r3, [pc, #56]	; (8003d84 <MX_USART1_UART_Init+0x4c>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d50:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <MX_USART1_UART_Init+0x4c>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d56:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <MX_USART1_UART_Init+0x4c>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d5c:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <MX_USART1_UART_Init+0x4c>)
 8003d5e:	220c      	movs	r2, #12
 8003d60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d62:	4b08      	ldr	r3, [pc, #32]	; (8003d84 <MX_USART1_UART_Init+0x4c>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d68:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <MX_USART1_UART_Init+0x4c>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d6e:	4805      	ldr	r0, [pc, #20]	; (8003d84 <MX_USART1_UART_Init+0x4c>)
 8003d70:	f004 f994 	bl	800809c <HAL_UART_Init>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003d7a:	f7ff fd87 	bl	800388c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d7e:	bf00      	nop
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	2000d8d0 	.word	0x2000d8d0
 8003d88:	40011000 	.word	0x40011000

08003d8c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003d90:	4b11      	ldr	r3, [pc, #68]	; (8003dd8 <MX_USART2_UART_Init+0x4c>)
 8003d92:	4a12      	ldr	r2, [pc, #72]	; (8003ddc <MX_USART2_UART_Init+0x50>)
 8003d94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003d96:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <MX_USART2_UART_Init+0x4c>)
 8003d98:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003d9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003d9e:	4b0e      	ldr	r3, [pc, #56]	; (8003dd8 <MX_USART2_UART_Init+0x4c>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003da4:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <MX_USART2_UART_Init+0x4c>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003daa:	4b0b      	ldr	r3, [pc, #44]	; (8003dd8 <MX_USART2_UART_Init+0x4c>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003db0:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <MX_USART2_UART_Init+0x4c>)
 8003db2:	220c      	movs	r2, #12
 8003db4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003db6:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <MX_USART2_UART_Init+0x4c>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dbc:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <MX_USART2_UART_Init+0x4c>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003dc2:	4805      	ldr	r0, [pc, #20]	; (8003dd8 <MX_USART2_UART_Init+0x4c>)
 8003dc4:	f004 f96a 	bl	800809c <HAL_UART_Init>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003dce:	f7ff fd5d 	bl	800388c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003dd2:	bf00      	nop
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	2000d914 	.word	0x2000d914
 8003ddc:	40004400 	.word	0x40004400

08003de0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08c      	sub	sp, #48	; 0x30
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de8:	f107 031c 	add.w	r3, r7, #28
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	609a      	str	r2, [r3, #8]
 8003df4:	60da      	str	r2, [r3, #12]
 8003df6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a3a      	ldr	r2, [pc, #232]	; (8003ee8 <HAL_UART_MspInit+0x108>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d135      	bne.n	8003e6e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e02:	2300      	movs	r3, #0
 8003e04:	61bb      	str	r3, [r7, #24]
 8003e06:	4b39      	ldr	r3, [pc, #228]	; (8003eec <HAL_UART_MspInit+0x10c>)
 8003e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0a:	4a38      	ldr	r2, [pc, #224]	; (8003eec <HAL_UART_MspInit+0x10c>)
 8003e0c:	f043 0310 	orr.w	r3, r3, #16
 8003e10:	6453      	str	r3, [r2, #68]	; 0x44
 8003e12:	4b36      	ldr	r3, [pc, #216]	; (8003eec <HAL_UART_MspInit+0x10c>)
 8003e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e16:	f003 0310 	and.w	r3, r3, #16
 8003e1a:	61bb      	str	r3, [r7, #24]
 8003e1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	4b32      	ldr	r3, [pc, #200]	; (8003eec <HAL_UART_MspInit+0x10c>)
 8003e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e26:	4a31      	ldr	r2, [pc, #196]	; (8003eec <HAL_UART_MspInit+0x10c>)
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e2e:	4b2f      	ldr	r3, [pc, #188]	; (8003eec <HAL_UART_MspInit+0x10c>)
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003e3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e40:	2302      	movs	r3, #2
 8003e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e44:	2300      	movs	r3, #0
 8003e46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e4c:	2307      	movs	r3, #7
 8003e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e50:	f107 031c 	add.w	r3, r7, #28
 8003e54:	4619      	mov	r1, r3
 8003e56:	4826      	ldr	r0, [pc, #152]	; (8003ef0 <HAL_UART_MspInit+0x110>)
 8003e58:	f001 fda0 	bl	800599c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	2100      	movs	r1, #0
 8003e60:	2025      	movs	r0, #37	; 0x25
 8003e62:	f001 f962 	bl	800512a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003e66:	2025      	movs	r0, #37	; 0x25
 8003e68:	f001 f97b 	bl	8005162 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003e6c:	e038      	b.n	8003ee0 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a20      	ldr	r2, [pc, #128]	; (8003ef4 <HAL_UART_MspInit+0x114>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d133      	bne.n	8003ee0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e78:	2300      	movs	r3, #0
 8003e7a:	613b      	str	r3, [r7, #16]
 8003e7c:	4b1b      	ldr	r3, [pc, #108]	; (8003eec <HAL_UART_MspInit+0x10c>)
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	4a1a      	ldr	r2, [pc, #104]	; (8003eec <HAL_UART_MspInit+0x10c>)
 8003e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e86:	6413      	str	r3, [r2, #64]	; 0x40
 8003e88:	4b18      	ldr	r3, [pc, #96]	; (8003eec <HAL_UART_MspInit+0x10c>)
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e90:	613b      	str	r3, [r7, #16]
 8003e92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e94:	2300      	movs	r3, #0
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	4b14      	ldr	r3, [pc, #80]	; (8003eec <HAL_UART_MspInit+0x10c>)
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9c:	4a13      	ldr	r2, [pc, #76]	; (8003eec <HAL_UART_MspInit+0x10c>)
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ea4:	4b11      	ldr	r3, [pc, #68]	; (8003eec <HAL_UART_MspInit+0x10c>)
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003eb0:	230c      	movs	r3, #12
 8003eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ec0:	2307      	movs	r3, #7
 8003ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ec4:	f107 031c 	add.w	r3, r7, #28
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4809      	ldr	r0, [pc, #36]	; (8003ef0 <HAL_UART_MspInit+0x110>)
 8003ecc:	f001 fd66 	bl	800599c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	2026      	movs	r0, #38	; 0x26
 8003ed6:	f001 f928 	bl	800512a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003eda:	2026      	movs	r0, #38	; 0x26
 8003edc:	f001 f941 	bl	8005162 <HAL_NVIC_EnableIRQ>
}
 8003ee0:	bf00      	nop
 8003ee2:	3730      	adds	r7, #48	; 0x30
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40011000 	.word	0x40011000
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	40020000 	.word	0x40020000
 8003ef4:	40004400 	.word	0x40004400

08003ef8 <Reset_dat_init>:

  /* USER CODE END USART2_MspDeInit 1 */
  }
}

void Reset_dat_init() {
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 30; i++) {
 8003efe:	2300      	movs	r3, #0
 8003f00:	607b      	str	r3, [r7, #4]
 8003f02:	e007      	b.n	8003f14 <Reset_dat_init+0x1c>
		dat[i] = '\0';
 8003f04:	4a08      	ldr	r2, [pc, #32]	; (8003f28 <Reset_dat_init+0x30>)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4413      	add	r3, r2
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 30; i++) {
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3301      	adds	r3, #1
 8003f12:	607b      	str	r3, [r7, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b1d      	cmp	r3, #29
 8003f18:	ddf4      	ble.n	8003f04 <Reset_dat_init+0xc>
	}
	return;
 8003f1a:	bf00      	nop
}
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	2000d8ac 	.word	0x2000d8ac

08003f2c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af02      	add	r7, sp, #8
 8003f32:	6078      	str	r0, [r7, #4]
	int value = 0;
 8003f34:	2300      	movs	r3, #0
 8003f36:	617b      	str	r3, [r7, #20]
	int temp = 16;
 8003f38:	2310      	movs	r3, #16
 8003f3a:	613b      	str	r3, [r7, #16]

	static int count = 0;
	count += 1;
 8003f3c:	4b99      	ldr	r3, [pc, #612]	; (80041a4 <HAL_UART_RxCpltCallback+0x278>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3301      	adds	r3, #1
 8003f42:	4a98      	ldr	r2, [pc, #608]	; (80041a4 <HAL_UART_RxCpltCallback+0x278>)
 8003f44:	6013      	str	r3, [r2, #0]

	led_toggle(LED2);
 8003f46:	2140      	movs	r1, #64	; 0x40
 8003f48:	4897      	ldr	r0, [pc, #604]	; (80041a8 <HAL_UART_RxCpltCallback+0x27c>)
 8003f4a:	f001 fef4 	bl	8005d36 <HAL_GPIO_TogglePin>
//	tft_prints(0, 5, "%s %d %d", dat, count, value);
	switch (dat[0]) {
 8003f4e:	4b97      	ldr	r3, [pc, #604]	; (80041ac <HAL_UART_RxCpltCallback+0x280>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2b31      	cmp	r3, #49	; 0x31
 8003f54:	dc02      	bgt.n	8003f5c <HAL_UART_RxCpltCallback+0x30>
 8003f56:	2b30      	cmp	r3, #48	; 0x30
 8003f58:	da16      	bge.n	8003f88 <HAL_UART_RxCpltCallback+0x5c>
		break;

	}

//	HAL_UART_Receive_IT(&huart1, (uint8_t*)&dat, sizeof(char) * 5);
	return;
 8003f5a:	e1ad      	b.n	80042b8 <HAL_UART_RxCpltCallback+0x38c>
	switch (dat[0]) {
 8003f5c:	2b73      	cmp	r3, #115	; 0x73
 8003f5e:	f040 81ab 	bne.w	80042b8 <HAL_UART_RxCpltCallback+0x38c>
			velocity = (velocity == 300)? 1000:300;
 8003f62:	4b93      	ldr	r3, [pc, #588]	; (80041b0 <HAL_UART_RxCpltCallback+0x284>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003f6a:	d102      	bne.n	8003f72 <HAL_UART_RxCpltCallback+0x46>
 8003f6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f70:	e001      	b.n	8003f76 <HAL_UART_RxCpltCallback+0x4a>
 8003f72:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003f76:	4a8e      	ldr	r2, [pc, #568]	; (80041b0 <HAL_UART_RxCpltCallback+0x284>)
 8003f78:	6013      	str	r3, [r2, #0]
			tft_prints(0, 5, "%s", "Shifting");
 8003f7a:	4b8e      	ldr	r3, [pc, #568]	; (80041b4 <HAL_UART_RxCpltCallback+0x288>)
 8003f7c:	4a8e      	ldr	r2, [pc, #568]	; (80041b8 <HAL_UART_RxCpltCallback+0x28c>)
 8003f7e:	2105      	movs	r1, #5
 8003f80:	2000      	movs	r0, #0
 8003f82:	f7fe fea3 	bl	8002ccc <tft_prints>
		break;
 8003f86:	e197      	b.n	80042b8 <HAL_UART_RxCpltCallback+0x38c>
			for (int i = 0; i < 5; i++) {
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	e021      	b.n	8003fd2 <HAL_UART_RxCpltCallback+0xa6>
				if (dat[i] != '0' && dat[i] != '1'){Reset_dat_init(); return;}
 8003f8e:	4a87      	ldr	r2, [pc, #540]	; (80041ac <HAL_UART_RxCpltCallback+0x280>)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4413      	add	r3, r2
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b30      	cmp	r3, #48	; 0x30
 8003f98:	d008      	beq.n	8003fac <HAL_UART_RxCpltCallback+0x80>
 8003f9a:	4a84      	ldr	r2, [pc, #528]	; (80041ac <HAL_UART_RxCpltCallback+0x280>)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b31      	cmp	r3, #49	; 0x31
 8003fa4:	d002      	beq.n	8003fac <HAL_UART_RxCpltCallback+0x80>
 8003fa6:	f7ff ffa7 	bl	8003ef8 <Reset_dat_init>
 8003faa:	e186      	b.n	80042ba <HAL_UART_RxCpltCallback+0x38e>
				value += (dat[i] - '0') * temp;
 8003fac:	4a7f      	ldr	r2, [pc, #508]	; (80041ac <HAL_UART_RxCpltCallback+0x280>)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	3b30      	subs	r3, #48	; 0x30
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	fb02 f303 	mul.w	r3, r2, r3
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]
				temp /= 2;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	0fda      	lsrs	r2, r3, #31
 8003fc6:	4413      	add	r3, r2
 8003fc8:	105b      	asrs	r3, r3, #1
 8003fca:	613b      	str	r3, [r7, #16]
			for (int i = 0; i < 5; i++) {
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	ddda      	ble.n	8003f8e <HAL_UART_RxCpltCallback+0x62>
			tft_prints(0, 5, "%s %d %d", dat, value, count);
 8003fd8:	4b72      	ldr	r3, [pc, #456]	; (80041a4 <HAL_UART_RxCpltCallback+0x278>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	9301      	str	r3, [sp, #4]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	4b72      	ldr	r3, [pc, #456]	; (80041ac <HAL_UART_RxCpltCallback+0x280>)
 8003fe4:	4a75      	ldr	r2, [pc, #468]	; (80041bc <HAL_UART_RxCpltCallback+0x290>)
 8003fe6:	2105      	movs	r1, #5
 8003fe8:	2000      	movs	r0, #0
 8003fea:	f7fe fe6f 	bl	8002ccc <tft_prints>
			Reset_dat_init();
 8003fee:	f7ff ff83 	bl	8003ef8 <Reset_dat_init>
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b1e      	cmp	r3, #30
 8003ff6:	f200 815d 	bhi.w	80042b4 <HAL_UART_RxCpltCallback+0x388>
 8003ffa:	a201      	add	r2, pc, #4	; (adr r2, 8004000 <HAL_UART_RxCpltCallback+0xd4>)
 8003ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004000:	0800428d 	.word	0x0800428d
 8004004:	080042b5 	.word	0x080042b5
 8004008:	080042b5 	.word	0x080042b5
 800400c:	080042b5 	.word	0x080042b5
 8004010:	0800428d 	.word	0x0800428d
 8004014:	0800428d 	.word	0x0800428d
 8004018:	0800428d 	.word	0x0800428d
 800401c:	0800428d 	.word	0x0800428d
 8004020:	0800428d 	.word	0x0800428d
 8004024:	0800428d 	.word	0x0800428d
 8004028:	0800428d 	.word	0x0800428d
 800402c:	0800428d 	.word	0x0800428d
 8004030:	0800428d 	.word	0x0800428d
 8004034:	080042b5 	.word	0x080042b5
 8004038:	0800428d 	.word	0x0800428d
 800403c:	080042b5 	.word	0x080042b5
 8004040:	080042b5 	.word	0x080042b5
 8004044:	080042b5 	.word	0x080042b5
 8004048:	080042b5 	.word	0x080042b5
 800404c:	080042b5 	.word	0x080042b5
 8004050:	0800407d 	.word	0x0800407d
 8004054:	080040e1 	.word	0x080040e1
 8004058:	080040ad 	.word	0x080040ad
 800405c:	08004115 	.word	0x08004115
 8004060:	0800414d 	.word	0x0800414d
 8004064:	080041c5 	.word	0x080041c5
 8004068:	08004179 	.word	0x08004179
 800406c:	080041f5 	.word	0x080041f5
 8004070:	08004225 	.word	0x08004225
 8004074:	080042b5 	.word	0x080042b5
 8004078:	08004259 	.word	0x08004259
					*(target) = 1*velocity;
 800407c:	4b50      	ldr	r3, [pc, #320]	; (80041c0 <HAL_UART_RxCpltCallback+0x294>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a4b      	ldr	r2, [pc, #300]	; (80041b0 <HAL_UART_RxCpltCallback+0x284>)
 8004082:	6812      	ldr	r2, [r2, #0]
 8004084:	601a      	str	r2, [r3, #0]
					*(target+1) = 1*velocity;
 8004086:	4b4e      	ldr	r3, [pc, #312]	; (80041c0 <HAL_UART_RxCpltCallback+0x294>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3304      	adds	r3, #4
 800408c:	4a48      	ldr	r2, [pc, #288]	; (80041b0 <HAL_UART_RxCpltCallback+0x284>)
 800408e:	6812      	ldr	r2, [r2, #0]
 8004090:	601a      	str	r2, [r3, #0]
					*(target+2) = 1*velocity;
 8004092:	4b4b      	ldr	r3, [pc, #300]	; (80041c0 <HAL_UART_RxCpltCallback+0x294>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3308      	adds	r3, #8
 8004098:	4a45      	ldr	r2, [pc, #276]	; (80041b0 <HAL_UART_RxCpltCallback+0x284>)
 800409a:	6812      	ldr	r2, [r2, #0]
 800409c:	601a      	str	r2, [r3, #0]
					*(target+3) = 1*velocity;
 800409e:	4b48      	ldr	r3, [pc, #288]	; (80041c0 <HAL_UART_RxCpltCallback+0x294>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	330c      	adds	r3, #12
 80040a4:	4a42      	ldr	r2, [pc, #264]	; (80041b0 <HAL_UART_RxCpltCallback+0x284>)
 80040a6:	6812      	ldr	r2, [r2, #0]
 80040a8:	601a      	str	r2, [r3, #0]
				break;
 80040aa:	e104      	b.n	80042b6 <HAL_UART_RxCpltCallback+0x38a>
					*(target) = 1*velocity;
 80040ac:	4b44      	ldr	r3, [pc, #272]	; (80041c0 <HAL_UART_RxCpltCallback+0x294>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a3f      	ldr	r2, [pc, #252]	; (80041b0 <HAL_UART_RxCpltCallback+0x284>)
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	601a      	str	r2, [r3, #0]
					*(target+1) = -1*velocity;
 80040b6:	4b3e      	ldr	r3, [pc, #248]	; (80041b0 <HAL_UART_RxCpltCallback+0x284>)
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	4b41      	ldr	r3, [pc, #260]	; (80041c0 <HAL_UART_RxCpltCallback+0x294>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3304      	adds	r3, #4
 80040c0:	4252      	negs	r2, r2
 80040c2:	601a      	str	r2, [r3, #0]
					*(target+2) = 1*velocity;
 80040c4:	4b3e      	ldr	r3, [pc, #248]	; (80041c0 <HAL_UART_RxCpltCallback+0x294>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3308      	adds	r3, #8
 80040ca:	4a39      	ldr	r2, [pc, #228]	; (80041b0 <HAL_UART_RxCpltCallback+0x284>)
 80040cc:	6812      	ldr	r2, [r2, #0]
 80040ce:	601a      	str	r2, [r3, #0]
					*(target+3) = -1*velocity;
 80040d0:	4b37      	ldr	r3, [pc, #220]	; (80041b0 <HAL_UART_RxCpltCallback+0x284>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	4b3a      	ldr	r3, [pc, #232]	; (80041c0 <HAL_UART_RxCpltCallback+0x294>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	330c      	adds	r3, #12
 80040da:	4252      	negs	r2, r2
 80040dc:	601a      	str	r2, [r3, #0]
				break;
 80040de:	e0ea      	b.n	80042b6 <HAL_UART_RxCpltCallback+0x38a>
					*(target) = -1*velocity;
 80040e0:	4b33      	ldr	r3, [pc, #204]	; (80041b0 <HAL_UART_RxCpltCallback+0x284>)
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	4b36      	ldr	r3, [pc, #216]	; (80041c0 <HAL_UART_RxCpltCallback+0x294>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4252      	negs	r2, r2
 80040ea:	601a      	str	r2, [r3, #0]
					*(target+1) = 1*velocity;
 80040ec:	4b34      	ldr	r3, [pc, #208]	; (80041c0 <HAL_UART_RxCpltCallback+0x294>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3304      	adds	r3, #4
 80040f2:	4a2f      	ldr	r2, [pc, #188]	; (80041b0 <HAL_UART_RxCpltCallback+0x284>)
 80040f4:	6812      	ldr	r2, [r2, #0]
 80040f6:	601a      	str	r2, [r3, #0]
					*(target+2) = -1*velocity;
 80040f8:	4b2d      	ldr	r3, [pc, #180]	; (80041b0 <HAL_UART_RxCpltCallback+0x284>)
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	4b30      	ldr	r3, [pc, #192]	; (80041c0 <HAL_UART_RxCpltCallback+0x294>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3308      	adds	r3, #8
 8004102:	4252      	negs	r2, r2
 8004104:	601a      	str	r2, [r3, #0]
					*(target+3) = 1*velocity;
 8004106:	4b2e      	ldr	r3, [pc, #184]	; (80041c0 <HAL_UART_RxCpltCallback+0x294>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	330c      	adds	r3, #12
 800410c:	4a28      	ldr	r2, [pc, #160]	; (80041b0 <HAL_UART_RxCpltCallback+0x284>)
 800410e:	6812      	ldr	r2, [r2, #0]
 8004110:	601a      	str	r2, [r3, #0]
				break;
 8004112:	e0d0      	b.n	80042b6 <HAL_UART_RxCpltCallback+0x38a>
					*(target) = -1*velocity;
 8004114:	4b26      	ldr	r3, [pc, #152]	; (80041b0 <HAL_UART_RxCpltCallback+0x284>)
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	4b29      	ldr	r3, [pc, #164]	; (80041c0 <HAL_UART_RxCpltCallback+0x294>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4252      	negs	r2, r2
 800411e:	601a      	str	r2, [r3, #0]
					*(target+1) = -1*velocity;
 8004120:	4b23      	ldr	r3, [pc, #140]	; (80041b0 <HAL_UART_RxCpltCallback+0x284>)
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	4b26      	ldr	r3, [pc, #152]	; (80041c0 <HAL_UART_RxCpltCallback+0x294>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3304      	adds	r3, #4
 800412a:	4252      	negs	r2, r2
 800412c:	601a      	str	r2, [r3, #0]
					*(target+2) = -1*velocity;
 800412e:	4b20      	ldr	r3, [pc, #128]	; (80041b0 <HAL_UART_RxCpltCallback+0x284>)
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	4b23      	ldr	r3, [pc, #140]	; (80041c0 <HAL_UART_RxCpltCallback+0x294>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3308      	adds	r3, #8
 8004138:	4252      	negs	r2, r2
 800413a:	601a      	str	r2, [r3, #0]
					*(target+3) = -1*velocity;
 800413c:	4b1c      	ldr	r3, [pc, #112]	; (80041b0 <HAL_UART_RxCpltCallback+0x284>)
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	4b1f      	ldr	r3, [pc, #124]	; (80041c0 <HAL_UART_RxCpltCallback+0x294>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	330c      	adds	r3, #12
 8004146:	4252      	negs	r2, r2
 8004148:	601a      	str	r2, [r3, #0]
				break;
 800414a:	e0b4      	b.n	80042b6 <HAL_UART_RxCpltCallback+0x38a>
					*(target) = 1*velocity;
 800414c:	4b1c      	ldr	r3, [pc, #112]	; (80041c0 <HAL_UART_RxCpltCallback+0x294>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a17      	ldr	r2, [pc, #92]	; (80041b0 <HAL_UART_RxCpltCallback+0x284>)
 8004152:	6812      	ldr	r2, [r2, #0]
 8004154:	601a      	str	r2, [r3, #0]
					*(target+1) = 0*velocity;
 8004156:	4b1a      	ldr	r3, [pc, #104]	; (80041c0 <HAL_UART_RxCpltCallback+0x294>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	3304      	adds	r3, #4
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
					*(target+2) = 1*velocity;
 8004160:	4b17      	ldr	r3, [pc, #92]	; (80041c0 <HAL_UART_RxCpltCallback+0x294>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3308      	adds	r3, #8
 8004166:	4a12      	ldr	r2, [pc, #72]	; (80041b0 <HAL_UART_RxCpltCallback+0x284>)
 8004168:	6812      	ldr	r2, [r2, #0]
 800416a:	601a      	str	r2, [r3, #0]
					*(target+3) = 0*velocity;
 800416c:	4b14      	ldr	r3, [pc, #80]	; (80041c0 <HAL_UART_RxCpltCallback+0x294>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	330c      	adds	r3, #12
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
				break;
 8004176:	e09e      	b.n	80042b6 <HAL_UART_RxCpltCallback+0x38a>
					*(target) = 0*velocity;
 8004178:	4b11      	ldr	r3, [pc, #68]	; (80041c0 <HAL_UART_RxCpltCallback+0x294>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]
					*(target+1) = 1*velocity;
 8004180:	4b0f      	ldr	r3, [pc, #60]	; (80041c0 <HAL_UART_RxCpltCallback+0x294>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3304      	adds	r3, #4
 8004186:	4a0a      	ldr	r2, [pc, #40]	; (80041b0 <HAL_UART_RxCpltCallback+0x284>)
 8004188:	6812      	ldr	r2, [r2, #0]
 800418a:	601a      	str	r2, [r3, #0]
					*(target+2) = 0*velocity;
 800418c:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <HAL_UART_RxCpltCallback+0x294>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3308      	adds	r3, #8
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]
					*(target+3) = 1*velocity;
 8004196:	4b0a      	ldr	r3, [pc, #40]	; (80041c0 <HAL_UART_RxCpltCallback+0x294>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	330c      	adds	r3, #12
 800419c:	4a04      	ldr	r2, [pc, #16]	; (80041b0 <HAL_UART_RxCpltCallback+0x284>)
 800419e:	6812      	ldr	r2, [r2, #0]
 80041a0:	601a      	str	r2, [r3, #0]
				break;
 80041a2:	e088      	b.n	80042b6 <HAL_UART_RxCpltCallback+0x38a>
 80041a4:	2000d958 	.word	0x2000d958
 80041a8:	40020400 	.word	0x40020400
 80041ac:	2000d8ac 	.word	0x2000d8ac
 80041b0:	20000024 	.word	0x20000024
 80041b4:	08009358 	.word	0x08009358
 80041b8:	08009364 	.word	0x08009364
 80041bc:	08009368 	.word	0x08009368
 80041c0:	2000d8cc 	.word	0x2000d8cc
					*(target) = -1*velocity;
 80041c4:	4b3e      	ldr	r3, [pc, #248]	; (80042c0 <HAL_UART_RxCpltCallback+0x394>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	4b3e      	ldr	r3, [pc, #248]	; (80042c4 <HAL_UART_RxCpltCallback+0x398>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4252      	negs	r2, r2
 80041ce:	601a      	str	r2, [r3, #0]
					*(target+1) = 0*velocity;
 80041d0:	4b3c      	ldr	r3, [pc, #240]	; (80042c4 <HAL_UART_RxCpltCallback+0x398>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3304      	adds	r3, #4
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]
					*(target+2) = -1*velocity;
 80041da:	4b39      	ldr	r3, [pc, #228]	; (80042c0 <HAL_UART_RxCpltCallback+0x394>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	4b39      	ldr	r3, [pc, #228]	; (80042c4 <HAL_UART_RxCpltCallback+0x398>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	3308      	adds	r3, #8
 80041e4:	4252      	negs	r2, r2
 80041e6:	601a      	str	r2, [r3, #0]
					*(target+3) = 0*velocity;
 80041e8:	4b36      	ldr	r3, [pc, #216]	; (80042c4 <HAL_UART_RxCpltCallback+0x398>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	330c      	adds	r3, #12
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]
				break;
 80041f2:	e060      	b.n	80042b6 <HAL_UART_RxCpltCallback+0x38a>
					*(target) = 0*velocity;
 80041f4:	4b33      	ldr	r3, [pc, #204]	; (80042c4 <HAL_UART_RxCpltCallback+0x398>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]
					*(target+1) = -1*velocity;
 80041fc:	4b30      	ldr	r3, [pc, #192]	; (80042c0 <HAL_UART_RxCpltCallback+0x394>)
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	4b30      	ldr	r3, [pc, #192]	; (80042c4 <HAL_UART_RxCpltCallback+0x398>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3304      	adds	r3, #4
 8004206:	4252      	negs	r2, r2
 8004208:	601a      	str	r2, [r3, #0]
					*(target+2) = 0*velocity;
 800420a:	4b2e      	ldr	r3, [pc, #184]	; (80042c4 <HAL_UART_RxCpltCallback+0x398>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3308      	adds	r3, #8
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]
					*(target+3) = -1*velocity;
 8004214:	4b2a      	ldr	r3, [pc, #168]	; (80042c0 <HAL_UART_RxCpltCallback+0x394>)
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	4b2a      	ldr	r3, [pc, #168]	; (80042c4 <HAL_UART_RxCpltCallback+0x398>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	330c      	adds	r3, #12
 800421e:	4252      	negs	r2, r2
 8004220:	601a      	str	r2, [r3, #0]
				break;
 8004222:	e048      	b.n	80042b6 <HAL_UART_RxCpltCallback+0x38a>
					*(target) = 1*velocity;
 8004224:	4b27      	ldr	r3, [pc, #156]	; (80042c4 <HAL_UART_RxCpltCallback+0x398>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a25      	ldr	r2, [pc, #148]	; (80042c0 <HAL_UART_RxCpltCallback+0x394>)
 800422a:	6812      	ldr	r2, [r2, #0]
 800422c:	601a      	str	r2, [r3, #0]
					*(target+1) = -1*velocity;
 800422e:	4b24      	ldr	r3, [pc, #144]	; (80042c0 <HAL_UART_RxCpltCallback+0x394>)
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	4b24      	ldr	r3, [pc, #144]	; (80042c4 <HAL_UART_RxCpltCallback+0x398>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3304      	adds	r3, #4
 8004238:	4252      	negs	r2, r2
 800423a:	601a      	str	r2, [r3, #0]
					*(target+2) = 1*velocity;
 800423c:	4b21      	ldr	r3, [pc, #132]	; (80042c4 <HAL_UART_RxCpltCallback+0x398>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	3308      	adds	r3, #8
 8004242:	4a1f      	ldr	r2, [pc, #124]	; (80042c0 <HAL_UART_RxCpltCallback+0x394>)
 8004244:	6812      	ldr	r2, [r2, #0]
 8004246:	601a      	str	r2, [r3, #0]
					*(target+3) = -1*velocity;
 8004248:	4b1d      	ldr	r3, [pc, #116]	; (80042c0 <HAL_UART_RxCpltCallback+0x394>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	4b1d      	ldr	r3, [pc, #116]	; (80042c4 <HAL_UART_RxCpltCallback+0x398>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	330c      	adds	r3, #12
 8004252:	4252      	negs	r2, r2
 8004254:	601a      	str	r2, [r3, #0]
				break;
 8004256:	e02e      	b.n	80042b6 <HAL_UART_RxCpltCallback+0x38a>
					*(target) = -1*velocity;
 8004258:	4b19      	ldr	r3, [pc, #100]	; (80042c0 <HAL_UART_RxCpltCallback+0x394>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	4b19      	ldr	r3, [pc, #100]	; (80042c4 <HAL_UART_RxCpltCallback+0x398>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4252      	negs	r2, r2
 8004262:	601a      	str	r2, [r3, #0]
					*(target+1) = 1*velocity;
 8004264:	4b17      	ldr	r3, [pc, #92]	; (80042c4 <HAL_UART_RxCpltCallback+0x398>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3304      	adds	r3, #4
 800426a:	4a15      	ldr	r2, [pc, #84]	; (80042c0 <HAL_UART_RxCpltCallback+0x394>)
 800426c:	6812      	ldr	r2, [r2, #0]
 800426e:	601a      	str	r2, [r3, #0]
					*(target+2) = -1*velocity;
 8004270:	4b13      	ldr	r3, [pc, #76]	; (80042c0 <HAL_UART_RxCpltCallback+0x394>)
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	4b13      	ldr	r3, [pc, #76]	; (80042c4 <HAL_UART_RxCpltCallback+0x398>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3308      	adds	r3, #8
 800427a:	4252      	negs	r2, r2
 800427c:	601a      	str	r2, [r3, #0]
					*(target+3) = 1*velocity;
 800427e:	4b11      	ldr	r3, [pc, #68]	; (80042c4 <HAL_UART_RxCpltCallback+0x398>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	330c      	adds	r3, #12
 8004284:	4a0e      	ldr	r2, [pc, #56]	; (80042c0 <HAL_UART_RxCpltCallback+0x394>)
 8004286:	6812      	ldr	r2, [r2, #0]
 8004288:	601a      	str	r2, [r3, #0]
				break;
 800428a:	e014      	b.n	80042b6 <HAL_UART_RxCpltCallback+0x38a>
					*(target) = 0;
 800428c:	4b0d      	ldr	r3, [pc, #52]	; (80042c4 <HAL_UART_RxCpltCallback+0x398>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]
					*(target+1) = 0;
 8004294:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <HAL_UART_RxCpltCallback+0x398>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	3304      	adds	r3, #4
 800429a:	2200      	movs	r2, #0
 800429c:	601a      	str	r2, [r3, #0]
					*(target+2) = 0;
 800429e:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <HAL_UART_RxCpltCallback+0x398>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3308      	adds	r3, #8
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]
					*(target+3) = 0;
 80042a8:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <HAL_UART_RxCpltCallback+0x398>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	330c      	adds	r3, #12
 80042ae:	2200      	movs	r2, #0
 80042b0:	601a      	str	r2, [r3, #0]
				break;
 80042b2:	e000      	b.n	80042b6 <HAL_UART_RxCpltCallback+0x38a>
				break;
 80042b4:	bf00      	nop
		break;
 80042b6:	bf00      	nop
	return;
 80042b8:	bf00      	nop
}
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20000024 	.word	0x20000024
 80042c4:	2000d8cc 	.word	0x2000d8cc

080042c8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
   // Happy void space
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <ReceiveData>:

/* USER CODE BEGIN 1 */
void ReceiveData(int tar_vel[4]) {
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
	target = tar_vel;
 80042e4:	4a05      	ldr	r2, [pc, #20]	; (80042fc <ReceiveData+0x20>)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&dat, sizeof(char) * 5);
 80042ea:	2205      	movs	r2, #5
 80042ec:	4904      	ldr	r1, [pc, #16]	; (8004300 <ReceiveData+0x24>)
 80042ee:	4805      	ldr	r0, [pc, #20]	; (8004304 <ReceiveData+0x28>)
 80042f0:	f003 ff66 	bl	80081c0 <HAL_UART_Receive_IT>
	return;
 80042f4:	bf00      	nop
}
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	2000d8cc 	.word	0x2000d8cc
 8004300:	2000d8ac 	.word	0x2000d8ac
 8004304:	2000d8d0 	.word	0x2000d8d0

08004308 <SendData>:

void SendData(const Motor motorchoice[4]) {
 8004308:	b5b0      	push	{r4, r5, r7, lr}
 800430a:	b0ac      	sub	sp, #176	; 0xb0
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
	static uint32_t last_Send_Time = 0;
	if (HAL_GetTick() - last_Send_Time > 1000) {
 8004310:	f000 f9a8 	bl	8004664 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	4b88      	ldr	r3, [pc, #544]	; (8004538 <SendData+0x230>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004320:	f240 80ff 	bls.w	8004522 <SendData+0x21a>
		double avg_M1 = averagespeed(motorchoice[0]);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f7fd fb27 	bl	800197c <averagespeed>
 800432e:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
		double avg_M2 = averagespeed(motorchoice[1]);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3301      	adds	r3, #1
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	4618      	mov	r0, r3
 800433a:	f7fd fb1f 	bl	800197c <averagespeed>
 800433e:	ed87 0b24 	vstr	d0, [r7, #144]	; 0x90
		double avg_M3 = averagespeed(motorchoice[2]);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3302      	adds	r3, #2
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f7fd fb17 	bl	800197c <averagespeed>
 800434e:	ed87 0b22 	vstr	d0, [r7, #136]	; 0x88
		double avg_M4 = averagespeed(motorchoice[3]);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	3303      	adds	r3, #3
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	4618      	mov	r0, r3
 800435a:	f7fd fb0f 	bl	800197c <averagespeed>
 800435e:	ed87 0b20 	vstr	d0, [r7, #128]	; 0x80

		double ver = (avg_M1+avg_M2+avg_M3+avg_M4) * 0.7071;
 8004362:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004366:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800436a:	f7fb ff33 	bl	80001d4 <__adddf3>
 800436e:	4602      	mov	r2, r0
 8004370:	460b      	mov	r3, r1
 8004372:	4610      	mov	r0, r2
 8004374:	4619      	mov	r1, r3
 8004376:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800437a:	f7fb ff2b 	bl	80001d4 <__adddf3>
 800437e:	4602      	mov	r2, r0
 8004380:	460b      	mov	r3, r1
 8004382:	4610      	mov	r0, r2
 8004384:	4619      	mov	r1, r3
 8004386:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800438a:	f7fb ff23 	bl	80001d4 <__adddf3>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4610      	mov	r0, r2
 8004394:	4619      	mov	r1, r3
 8004396:	a366      	add	r3, pc, #408	; (adr r3, 8004530 <SendData+0x228>)
 8004398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439c:	f7fc f8d0 	bl	8000540 <__aeabi_dmul>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		double hor = (avg_M1+avg_M3-avg_M2-avg_M4) * 0.7071;
 80043a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80043ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80043b0:	f7fb ff10 	bl	80001d4 <__adddf3>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4610      	mov	r0, r2
 80043ba:	4619      	mov	r1, r3
 80043bc:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80043c0:	f7fb ff06 	bl	80001d0 <__aeabi_dsub>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4610      	mov	r0, r2
 80043ca:	4619      	mov	r1, r3
 80043cc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80043d0:	f7fb fefe 	bl	80001d0 <__aeabi_dsub>
 80043d4:	4602      	mov	r2, r0
 80043d6:	460b      	mov	r3, r1
 80043d8:	4610      	mov	r0, r2
 80043da:	4619      	mov	r1, r3
 80043dc:	a354      	add	r3, pc, #336	; (adr r3, 8004530 <SendData+0x228>)
 80043de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e2:	f7fc f8ad 	bl	8000540 <__aeabi_dmul>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

		uint32_t value = ver*ver + hor*hor;
 80043ee:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80043f2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80043f6:	f7fc f8a3 	bl	8000540 <__aeabi_dmul>
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	4614      	mov	r4, r2
 8004400:	461d      	mov	r5, r3
 8004402:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004406:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800440a:	f7fc f899 	bl	8000540 <__aeabi_dmul>
 800440e:	4602      	mov	r2, r0
 8004410:	460b      	mov	r3, r1
 8004412:	4620      	mov	r0, r4
 8004414:	4629      	mov	r1, r5
 8004416:	f7fb fedd 	bl	80001d4 <__adddf3>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	4610      	mov	r0, r2
 8004420:	4619      	mov	r1, r3
 8004422:	f7fc fb65 	bl	8000af0 <__aeabi_d2uiz>
 8004426:	4603      	mov	r3, r0
 8004428:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		value = (uint32_t) sqrt(value);
 800442c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004430:	f7fc f80c 	bl	800044c <__aeabi_ui2d>
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	ec43 2b10 	vmov	d0, r2, r3
 800443c:	f004 fe20 	bl	8009080 <sqrt>
 8004440:	ec53 2b10 	vmov	r2, r3, d0
 8004444:	4610      	mov	r0, r2
 8004446:	4619      	mov	r1, r3
 8004448:	f7fc fb52 	bl	8000af0 <__aeabi_d2uiz>
 800444c:	4603      	mov	r3, r0
 800444e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		char tempdat[50];
		char dat_send[50];
		int i = 0;
 8004452:	2300      	movs	r3, #0
 8004454:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		for (; i < 50; i++) {
 8004458:	e025      	b.n	80044a6 <SendData+0x19e>
			tempdat[i] = value%10 + '0';
 800445a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800445e:	4b37      	ldr	r3, [pc, #220]	; (800453c <SendData+0x234>)
 8004460:	fba3 2301 	umull	r2, r3, r3, r1
 8004464:	08da      	lsrs	r2, r3, #3
 8004466:	4613      	mov	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	1aca      	subs	r2, r1, r3
 8004470:	b2d3      	uxtb	r3, r2
 8004472:	3330      	adds	r3, #48	; 0x30
 8004474:	b2d9      	uxtb	r1, r3
 8004476:	f107 0208 	add.w	r2, r7, #8
 800447a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800447e:	4413      	add	r3, r2
 8004480:	460a      	mov	r2, r1
 8004482:	701a      	strb	r2, [r3, #0]
			value /= 10;
 8004484:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004488:	4a2c      	ldr	r2, [pc, #176]	; (800453c <SendData+0x234>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	08db      	lsrs	r3, r3, #3
 8004490:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			if (value == 0) break;
 8004494:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004498:	2b00      	cmp	r3, #0
 800449a:	d009      	beq.n	80044b0 <SendData+0x1a8>
		for (; i < 50; i++) {
 800449c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044a0:	3301      	adds	r3, #1
 80044a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044aa:	2b31      	cmp	r3, #49	; 0x31
 80044ac:	ddd5      	ble.n	800445a <SendData+0x152>
 80044ae:	e000      	b.n	80044b2 <SendData+0x1aa>
			if (value == 0) break;
 80044b0:	bf00      	nop
		}

		dat_send[i+1] = '\0';
 80044b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044b6:	3301      	adds	r3, #1
 80044b8:	33b0      	adds	r3, #176	; 0xb0
 80044ba:	443b      	add	r3, r7
 80044bc:	2200      	movs	r2, #0
 80044be:	f803 2c74 	strb.w	r2, [r3, #-116]
		for (int k = 0; k <= i ; k++) {
 80044c2:	2300      	movs	r3, #0
 80044c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80044c8:	e014      	b.n	80044f4 <SendData+0x1ec>
			dat_send[k] = tempdat[i-k];
 80044ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80044ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	33b0      	adds	r3, #176	; 0xb0
 80044d6:	443b      	add	r3, r7
 80044d8:	f813 1ca8 	ldrb.w	r1, [r3, #-168]
 80044dc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80044e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80044e4:	4413      	add	r3, r2
 80044e6:	460a      	mov	r2, r1
 80044e8:	701a      	strb	r2, [r3, #0]
		for (int k = 0; k <= i ; k++) {
 80044ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80044ee:	3301      	adds	r3, #1
 80044f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80044f4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80044f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044fc:	429a      	cmp	r2, r3
 80044fe:	dde4      	ble.n	80044ca <SendData+0x1c2>
		}
//		tft_prints(0, 5, "%s  ", dat_send);
//		tft_update(100);
		last_Send_Time = HAL_GetTick();
 8004500:	f000 f8b0 	bl	8004664 <HAL_GetTick>
 8004504:	4603      	mov	r3, r0
 8004506:	4a0c      	ldr	r2, [pc, #48]	; (8004538 <SendData+0x230>)
 8004508:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)&dat_send, sizeof(char)*(i+1));
 800450a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800450e:	b29b      	uxth	r3, r3
 8004510:	3301      	adds	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004518:	4619      	mov	r1, r3
 800451a:	4809      	ldr	r0, [pc, #36]	; (8004540 <SendData+0x238>)
 800451c:	f003 fe0b 	bl	8008136 <HAL_UART_Transmit_IT>
	}
	return;
 8004520:	bf00      	nop
 8004522:	bf00      	nop
}
 8004524:	37b0      	adds	r7, #176	; 0xb0
 8004526:	46bd      	mov	sp, r7
 8004528:	bdb0      	pop	{r4, r5, r7, pc}
 800452a:	bf00      	nop
 800452c:	f3af 8000 	nop.w
 8004530:	2de00d1b 	.word	0x2de00d1b
 8004534:	3fe6a090 	.word	0x3fe6a090
 8004538:	2000d95c 	.word	0x2000d95c
 800453c:	cccccccd 	.word	0xcccccccd
 8004540:	2000d8d0 	.word	0x2000d8d0

08004544 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004544:	f8df d034 	ldr.w	sp, [pc, #52]	; 800457c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004548:	480d      	ldr	r0, [pc, #52]	; (8004580 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800454a:	490e      	ldr	r1, [pc, #56]	; (8004584 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800454c:	4a0e      	ldr	r2, [pc, #56]	; (8004588 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800454e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004550:	e002      	b.n	8004558 <LoopCopyDataInit>

08004552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004556:	3304      	adds	r3, #4

08004558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800455a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800455c:	d3f9      	bcc.n	8004552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800455e:	4a0b      	ldr	r2, [pc, #44]	; (800458c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004560:	4c0b      	ldr	r4, [pc, #44]	; (8004590 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004564:	e001      	b.n	800456a <LoopFillZerobss>

08004566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004568:	3204      	adds	r2, #4

0800456a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800456a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800456c:	d3fb      	bcc.n	8004566 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800456e:	f7ff fae1 	bl	8003b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004572:	f004 fd4b 	bl	800900c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004576:	f7fe fe63 	bl	8003240 <main>
  bx  lr    
 800457a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800457c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004584:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8004588:	0800a21c 	.word	0x0800a21c
  ldr r2, =_sbss
 800458c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8004590:	2000d964 	.word	0x2000d964

08004594 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004594:	e7fe      	b.n	8004594 <ADC_IRQHandler>
	...

08004598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800459c:	4b0e      	ldr	r3, [pc, #56]	; (80045d8 <HAL_Init+0x40>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a0d      	ldr	r2, [pc, #52]	; (80045d8 <HAL_Init+0x40>)
 80045a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80045a8:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <HAL_Init+0x40>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a0a      	ldr	r2, [pc, #40]	; (80045d8 <HAL_Init+0x40>)
 80045ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045b4:	4b08      	ldr	r3, [pc, #32]	; (80045d8 <HAL_Init+0x40>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a07      	ldr	r2, [pc, #28]	; (80045d8 <HAL_Init+0x40>)
 80045ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045c0:	2003      	movs	r0, #3
 80045c2:	f000 fda7 	bl	8005114 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045c6:	200f      	movs	r0, #15
 80045c8:	f000 f808 	bl	80045dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045cc:	f7ff fa26 	bl	8003a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	40023c00 	.word	0x40023c00

080045dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045e4:	4b12      	ldr	r3, [pc, #72]	; (8004630 <HAL_InitTick+0x54>)
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	4b12      	ldr	r3, [pc, #72]	; (8004634 <HAL_InitTick+0x58>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	4619      	mov	r1, r3
 80045ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80045f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 fdbf 	bl	800517e <HAL_SYSTICK_Config>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e00e      	b.n	8004628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b0f      	cmp	r3, #15
 800460e:	d80a      	bhi.n	8004626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004610:	2200      	movs	r2, #0
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	f04f 30ff 	mov.w	r0, #4294967295
 8004618:	f000 fd87 	bl	800512a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800461c:	4a06      	ldr	r2, [pc, #24]	; (8004638 <HAL_InitTick+0x5c>)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004622:	2300      	movs	r3, #0
 8004624:	e000      	b.n	8004628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
}
 8004628:	4618      	mov	r0, r3
 800462a:	3708      	adds	r7, #8
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	20000020 	.word	0x20000020
 8004634:	2000002c 	.word	0x2000002c
 8004638:	20000028 	.word	0x20000028

0800463c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004640:	4b06      	ldr	r3, [pc, #24]	; (800465c <HAL_IncTick+0x20>)
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	461a      	mov	r2, r3
 8004646:	4b06      	ldr	r3, [pc, #24]	; (8004660 <HAL_IncTick+0x24>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4413      	add	r3, r2
 800464c:	4a04      	ldr	r2, [pc, #16]	; (8004660 <HAL_IncTick+0x24>)
 800464e:	6013      	str	r3, [r2, #0]
}
 8004650:	bf00      	nop
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	2000002c 	.word	0x2000002c
 8004660:	2000d960 	.word	0x2000d960

08004664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  return uwTick;
 8004668:	4b03      	ldr	r3, [pc, #12]	; (8004678 <HAL_GetTick+0x14>)
 800466a:	681b      	ldr	r3, [r3, #0]
}
 800466c:	4618      	mov	r0, r3
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	2000d960 	.word	0x2000d960

0800467c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004684:	f7ff ffee 	bl	8004664 <HAL_GetTick>
 8004688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004694:	d005      	beq.n	80046a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004696:	4b0a      	ldr	r3, [pc, #40]	; (80046c0 <HAL_Delay+0x44>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4413      	add	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80046a2:	bf00      	nop
 80046a4:	f7ff ffde 	bl	8004664 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d8f7      	bhi.n	80046a4 <HAL_Delay+0x28>
  {
  }
}
 80046b4:	bf00      	nop
 80046b6:	bf00      	nop
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	2000002c 	.word	0x2000002c

080046c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e0ed      	b.n	80048b2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d102      	bne.n	80046e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7fc fc62 	bl	8000fac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0201 	orr.w	r2, r2, #1
 80046f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046f8:	f7ff ffb4 	bl	8004664 <HAL_GetTick>
 80046fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80046fe:	e012      	b.n	8004726 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004700:	f7ff ffb0 	bl	8004664 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b0a      	cmp	r3, #10
 800470c:	d90b      	bls.n	8004726 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2205      	movs	r2, #5
 800471e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e0c5      	b.n	80048b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0e5      	beq.n	8004700 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0202 	bic.w	r2, r2, #2
 8004742:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004744:	f7ff ff8e 	bl	8004664 <HAL_GetTick>
 8004748:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800474a:	e012      	b.n	8004772 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800474c:	f7ff ff8a 	bl	8004664 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b0a      	cmp	r3, #10
 8004758:	d90b      	bls.n	8004772 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2205      	movs	r2, #5
 800476a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e09f      	b.n	80048b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1e5      	bne.n	800474c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	7e1b      	ldrb	r3, [r3, #24]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d108      	bne.n	800479a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	e007      	b.n	80047aa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	7e5b      	ldrb	r3, [r3, #25]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d108      	bne.n	80047c4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	e007      	b.n	80047d4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	7e9b      	ldrb	r3, [r3, #26]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d108      	bne.n	80047ee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0220 	orr.w	r2, r2, #32
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	e007      	b.n	80047fe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0220 	bic.w	r2, r2, #32
 80047fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	7edb      	ldrb	r3, [r3, #27]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d108      	bne.n	8004818 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0210 	bic.w	r2, r2, #16
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	e007      	b.n	8004828 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0210 	orr.w	r2, r2, #16
 8004826:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	7f1b      	ldrb	r3, [r3, #28]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d108      	bne.n	8004842 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0208 	orr.w	r2, r2, #8
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	e007      	b.n	8004852 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0208 	bic.w	r2, r2, #8
 8004850:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	7f5b      	ldrb	r3, [r3, #29]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d108      	bne.n	800486c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 0204 	orr.w	r2, r2, #4
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	e007      	b.n	800487c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0204 	bic.w	r2, r2, #4
 800487a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	431a      	orrs	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	ea42 0103 	orr.w	r1, r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	1e5a      	subs	r2, r3, #1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80048bc:	b480      	push	{r7}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048d2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80048d4:	7cfb      	ldrb	r3, [r7, #19]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d003      	beq.n	80048e2 <HAL_CAN_ConfigFilter+0x26>
 80048da:	7cfb      	ldrb	r3, [r7, #19]
 80048dc:	2b02      	cmp	r3, #2
 80048de:	f040 80be 	bne.w	8004a5e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80048e2:	4b65      	ldr	r3, [pc, #404]	; (8004a78 <HAL_CAN_ConfigFilter+0x1bc>)
 80048e4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80048ec:	f043 0201 	orr.w	r2, r3, #1
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80048fc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	021b      	lsls	r3, r3, #8
 8004912:	431a      	orrs	r2, r3
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	f003 031f 	and.w	r3, r3, #31
 8004922:	2201      	movs	r2, #1
 8004924:	fa02 f303 	lsl.w	r3, r2, r3
 8004928:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	43db      	mvns	r3, r3
 8004934:	401a      	ands	r2, r3
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d123      	bne.n	800498c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	43db      	mvns	r3, r3
 800494e:	401a      	ands	r2, r3
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004966:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	3248      	adds	r2, #72	; 0x48
 800496c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004980:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004982:	6979      	ldr	r1, [r7, #20]
 8004984:	3348      	adds	r3, #72	; 0x48
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	440b      	add	r3, r1
 800498a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d122      	bne.n	80049da <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	431a      	orrs	r2, r3
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80049b4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	3248      	adds	r2, #72	; 0x48
 80049ba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80049ce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80049d0:	6979      	ldr	r1, [r7, #20]
 80049d2:	3348      	adds	r3, #72	; 0x48
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	440b      	add	r3, r1
 80049d8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d109      	bne.n	80049f6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	43db      	mvns	r3, r3
 80049ec:	401a      	ands	r2, r3
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80049f4:	e007      	b.n	8004a06 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d109      	bne.n	8004a22 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	43db      	mvns	r3, r3
 8004a18:	401a      	ands	r2, r3
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004a20:	e007      	b.n	8004a32 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d107      	bne.n	8004a4a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	431a      	orrs	r2, r3
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a50:	f023 0201 	bic.w	r2, r3, #1
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	e006      	b.n	8004a6c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
  }
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	371c      	adds	r7, #28
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	40006400 	.word	0x40006400

08004a7c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d12e      	bne.n	8004aee <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0201 	bic.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004aa8:	f7ff fddc 	bl	8004664 <HAL_GetTick>
 8004aac:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004aae:	e012      	b.n	8004ad6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004ab0:	f7ff fdd8 	bl	8004664 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b0a      	cmp	r3, #10
 8004abc:	d90b      	bls.n	8004ad6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2205      	movs	r2, #5
 8004ace:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e012      	b.n	8004afc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1e5      	bne.n	8004ab0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004aea:	2300      	movs	r3, #0
 8004aec:	e006      	b.n	8004afc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
  }
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b089      	sub	sp, #36	; 0x24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
 8004b10:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b18:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004b22:	7ffb      	ldrb	r3, [r7, #31]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d003      	beq.n	8004b30 <HAL_CAN_AddTxMessage+0x2c>
 8004b28:	7ffb      	ldrb	r3, [r7, #31]
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	f040 80b8 	bne.w	8004ca0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10a      	bne.n	8004b50 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d105      	bne.n	8004b50 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f000 80a0 	beq.w	8004c90 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	0e1b      	lsrs	r3, r3, #24
 8004b54:	f003 0303 	and.w	r3, r3, #3
 8004b58:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d907      	bls.n	8004b70 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e09e      	b.n	8004cae <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004b70:	2201      	movs	r2, #1
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	409a      	lsls	r2, r3
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10d      	bne.n	8004b9e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004b8c:	68f9      	ldr	r1, [r7, #12]
 8004b8e:	6809      	ldr	r1, [r1, #0]
 8004b90:	431a      	orrs	r2, r3
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	3318      	adds	r3, #24
 8004b96:	011b      	lsls	r3, r3, #4
 8004b98:	440b      	add	r3, r1
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	e00f      	b.n	8004bbe <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004ba8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004bae:	68f9      	ldr	r1, [r7, #12]
 8004bb0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004bb2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	3318      	adds	r3, #24
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	440b      	add	r3, r1
 8004bbc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6819      	ldr	r1, [r3, #0]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	691a      	ldr	r2, [r3, #16]
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	3318      	adds	r3, #24
 8004bca:	011b      	lsls	r3, r3, #4
 8004bcc:	440b      	add	r3, r1
 8004bce:	3304      	adds	r3, #4
 8004bd0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	7d1b      	ldrb	r3, [r3, #20]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d111      	bne.n	8004bfe <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	3318      	adds	r3, #24
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	4413      	add	r3, r2
 8004be6:	3304      	adds	r3, #4
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	6811      	ldr	r1, [r2, #0]
 8004bee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	3318      	adds	r3, #24
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	440b      	add	r3, r1
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	3307      	adds	r3, #7
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	061a      	lsls	r2, r3, #24
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	3306      	adds	r3, #6
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	041b      	lsls	r3, r3, #16
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3305      	adds	r3, #5
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	021b      	lsls	r3, r3, #8
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	3204      	adds	r2, #4
 8004c1e:	7812      	ldrb	r2, [r2, #0]
 8004c20:	4610      	mov	r0, r2
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	6811      	ldr	r1, [r2, #0]
 8004c26:	ea43 0200 	orr.w	r2, r3, r0
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	440b      	add	r3, r1
 8004c30:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004c34:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	3303      	adds	r3, #3
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	061a      	lsls	r2, r3, #24
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3302      	adds	r3, #2
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	041b      	lsls	r3, r3, #16
 8004c46:	431a      	orrs	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	021b      	lsls	r3, r3, #8
 8004c50:	4313      	orrs	r3, r2
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	7812      	ldrb	r2, [r2, #0]
 8004c56:	4610      	mov	r0, r2
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	6811      	ldr	r1, [r2, #0]
 8004c5c:	ea43 0200 	orr.w	r2, r3, r0
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	440b      	add	r3, r1
 8004c66:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004c6a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	3318      	adds	r3, #24
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	4413      	add	r3, r2
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	6811      	ldr	r1, [r2, #0]
 8004c7e:	f043 0201 	orr.w	r2, r3, #1
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	3318      	adds	r3, #24
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	440b      	add	r3, r1
 8004c8a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	e00e      	b.n	8004cae <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e006      	b.n	8004cae <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
  }
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3724      	adds	r7, #36	; 0x24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b085      	sub	sp, #20
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
 8004cc2:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cce:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8004cd0:	7afb      	ldrb	r3, [r7, #11]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d002      	beq.n	8004cdc <HAL_CAN_IsTxMessagePending+0x22>
 8004cd6:	7afb      	ldrb	r3, [r7, #11]
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d10b      	bne.n	8004cf4 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	069b      	lsls	r3, r3, #26
 8004ce6:	401a      	ands	r2, r3
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	069b      	lsls	r3, r3, #26
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d001      	beq.n	8004cf4 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004d02:	b480      	push	{r7}
 8004d04:	b087      	sub	sp, #28
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	607a      	str	r2, [r7, #4]
 8004d0e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d16:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004d18:	7dfb      	ldrb	r3, [r7, #23]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d003      	beq.n	8004d26 <HAL_CAN_GetRxMessage+0x24>
 8004d1e:	7dfb      	ldrb	r3, [r7, #23]
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	f040 80f3 	bne.w	8004f0c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10e      	bne.n	8004d4a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f003 0303 	and.w	r3, r3, #3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d116      	bne.n	8004d68 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e0e7      	b.n	8004f1a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	f003 0303 	and.w	r3, r3, #3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d107      	bne.n	8004d68 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e0d8      	b.n	8004f1a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	331b      	adds	r3, #27
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	4413      	add	r3, r2
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0204 	and.w	r2, r3, #4
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10c      	bne.n	8004da0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	331b      	adds	r3, #27
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	4413      	add	r3, r2
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	0d5b      	lsrs	r3, r3, #21
 8004d96:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	e00b      	b.n	8004db8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	331b      	adds	r3, #27
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	4413      	add	r3, r2
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	08db      	lsrs	r3, r3, #3
 8004db0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	331b      	adds	r3, #27
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	4413      	add	r3, r2
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0202 	and.w	r2, r3, #2
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	331b      	adds	r3, #27
 8004dd6:	011b      	lsls	r3, r3, #4
 8004dd8:	4413      	add	r3, r2
 8004dda:	3304      	adds	r3, #4
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 020f 	and.w	r2, r3, #15
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	331b      	adds	r3, #27
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	4413      	add	r3, r2
 8004df2:	3304      	adds	r3, #4
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	0a1b      	lsrs	r3, r3, #8
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	331b      	adds	r3, #27
 8004e06:	011b      	lsls	r3, r3, #4
 8004e08:	4413      	add	r3, r2
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	0c1b      	lsrs	r3, r3, #16
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	011b      	lsls	r3, r3, #4
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	4413      	add	r3, r2
 8004e36:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	0a1a      	lsrs	r2, r3, #8
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	3301      	adds	r3, #1
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	011b      	lsls	r3, r3, #4
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	0c1a      	lsrs	r2, r3, #16
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	3302      	adds	r3, #2
 8004e5c:	b2d2      	uxtb	r2, r2
 8004e5e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	0e1a      	lsrs	r2, r3, #24
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	3303      	adds	r3, #3
 8004e76:	b2d2      	uxtb	r2, r2
 8004e78:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	011b      	lsls	r3, r3, #4
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	011b      	lsls	r3, r3, #4
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	0a1a      	lsrs	r2, r3, #8
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	3305      	adds	r3, #5
 8004ea8:	b2d2      	uxtb	r2, r2
 8004eaa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	011b      	lsls	r3, r3, #4
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	0c1a      	lsrs	r2, r3, #16
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	3306      	adds	r3, #6
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	011b      	lsls	r3, r3, #4
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	0e1a      	lsrs	r2, r3, #24
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	3307      	adds	r3, #7
 8004edc:	b2d2      	uxtb	r2, r2
 8004ede:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d108      	bne.n	8004ef8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f042 0220 	orr.w	r2, r2, #32
 8004ef4:	60da      	str	r2, [r3, #12]
 8004ef6:	e007      	b.n	8004f08 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f042 0220 	orr.w	r2, r2, #32
 8004f06:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	e006      	b.n	8004f1a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
  }
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	371c      	adds	r7, #28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b085      	sub	sp, #20
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f36:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d002      	beq.n	8004f44 <HAL_CAN_ActivateNotification+0x1e>
 8004f3e:	7bfb      	ldrb	r3, [r7, #15]
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d109      	bne.n	8004f58 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6959      	ldr	r1, [r3, #20]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	e006      	b.n	8004f66 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
  }
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
	...

08004f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f84:	4b0c      	ldr	r3, [pc, #48]	; (8004fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f90:	4013      	ands	r3, r2
 8004f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fa6:	4a04      	ldr	r2, [pc, #16]	; (8004fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	60d3      	str	r3, [r2, #12]
}
 8004fac:	bf00      	nop
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	e000ed00 	.word	0xe000ed00

08004fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fc0:	4b04      	ldr	r3, [pc, #16]	; (8004fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	0a1b      	lsrs	r3, r3, #8
 8004fc6:	f003 0307 	and.w	r3, r3, #7
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr
 8004fd4:	e000ed00 	.word	0xe000ed00

08004fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4603      	mov	r3, r0
 8004fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	db0b      	blt.n	8005002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fea:	79fb      	ldrb	r3, [r7, #7]
 8004fec:	f003 021f 	and.w	r2, r3, #31
 8004ff0:	4907      	ldr	r1, [pc, #28]	; (8005010 <__NVIC_EnableIRQ+0x38>)
 8004ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	2001      	movs	r0, #1
 8004ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8004ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005002:	bf00      	nop
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	e000e100 	.word	0xe000e100

08005014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	4603      	mov	r3, r0
 800501c:	6039      	str	r1, [r7, #0]
 800501e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005024:	2b00      	cmp	r3, #0
 8005026:	db0a      	blt.n	800503e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	b2da      	uxtb	r2, r3
 800502c:	490c      	ldr	r1, [pc, #48]	; (8005060 <__NVIC_SetPriority+0x4c>)
 800502e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005032:	0112      	lsls	r2, r2, #4
 8005034:	b2d2      	uxtb	r2, r2
 8005036:	440b      	add	r3, r1
 8005038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800503c:	e00a      	b.n	8005054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	b2da      	uxtb	r2, r3
 8005042:	4908      	ldr	r1, [pc, #32]	; (8005064 <__NVIC_SetPriority+0x50>)
 8005044:	79fb      	ldrb	r3, [r7, #7]
 8005046:	f003 030f 	and.w	r3, r3, #15
 800504a:	3b04      	subs	r3, #4
 800504c:	0112      	lsls	r2, r2, #4
 800504e:	b2d2      	uxtb	r2, r2
 8005050:	440b      	add	r3, r1
 8005052:	761a      	strb	r2, [r3, #24]
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	e000e100 	.word	0xe000e100
 8005064:	e000ed00 	.word	0xe000ed00

08005068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005068:	b480      	push	{r7}
 800506a:	b089      	sub	sp, #36	; 0x24
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	f1c3 0307 	rsb	r3, r3, #7
 8005082:	2b04      	cmp	r3, #4
 8005084:	bf28      	it	cs
 8005086:	2304      	movcs	r3, #4
 8005088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	3304      	adds	r3, #4
 800508e:	2b06      	cmp	r3, #6
 8005090:	d902      	bls.n	8005098 <NVIC_EncodePriority+0x30>
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	3b03      	subs	r3, #3
 8005096:	e000      	b.n	800509a <NVIC_EncodePriority+0x32>
 8005098:	2300      	movs	r3, #0
 800509a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800509c:	f04f 32ff 	mov.w	r2, #4294967295
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	fa02 f303 	lsl.w	r3, r2, r3
 80050a6:	43da      	mvns	r2, r3
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	401a      	ands	r2, r3
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050b0:	f04f 31ff 	mov.w	r1, #4294967295
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	fa01 f303 	lsl.w	r3, r1, r3
 80050ba:	43d9      	mvns	r1, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050c0:	4313      	orrs	r3, r2
         );
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3724      	adds	r7, #36	; 0x24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
	...

080050d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3b01      	subs	r3, #1
 80050dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050e0:	d301      	bcc.n	80050e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050e2:	2301      	movs	r3, #1
 80050e4:	e00f      	b.n	8005106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050e6:	4a0a      	ldr	r2, [pc, #40]	; (8005110 <SysTick_Config+0x40>)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050ee:	210f      	movs	r1, #15
 80050f0:	f04f 30ff 	mov.w	r0, #4294967295
 80050f4:	f7ff ff8e 	bl	8005014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050f8:	4b05      	ldr	r3, [pc, #20]	; (8005110 <SysTick_Config+0x40>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050fe:	4b04      	ldr	r3, [pc, #16]	; (8005110 <SysTick_Config+0x40>)
 8005100:	2207      	movs	r2, #7
 8005102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	e000e010 	.word	0xe000e010

08005114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7ff ff29 	bl	8004f74 <__NVIC_SetPriorityGrouping>
}
 8005122:	bf00      	nop
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800512a:	b580      	push	{r7, lr}
 800512c:	b086      	sub	sp, #24
 800512e:	af00      	add	r7, sp, #0
 8005130:	4603      	mov	r3, r0
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	607a      	str	r2, [r7, #4]
 8005136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005138:	2300      	movs	r3, #0
 800513a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800513c:	f7ff ff3e 	bl	8004fbc <__NVIC_GetPriorityGrouping>
 8005140:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	68b9      	ldr	r1, [r7, #8]
 8005146:	6978      	ldr	r0, [r7, #20]
 8005148:	f7ff ff8e 	bl	8005068 <NVIC_EncodePriority>
 800514c:	4602      	mov	r2, r0
 800514e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005152:	4611      	mov	r1, r2
 8005154:	4618      	mov	r0, r3
 8005156:	f7ff ff5d 	bl	8005014 <__NVIC_SetPriority>
}
 800515a:	bf00      	nop
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b082      	sub	sp, #8
 8005166:	af00      	add	r7, sp, #0
 8005168:	4603      	mov	r3, r0
 800516a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800516c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005170:	4618      	mov	r0, r3
 8005172:	f7ff ff31 	bl	8004fd8 <__NVIC_EnableIRQ>
}
 8005176:	bf00      	nop
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b082      	sub	sp, #8
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7ff ffa2 	bl	80050d0 <SysTick_Config>
 800518c:	4603      	mov	r3, r0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
	...

08005198 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80051a4:	f7ff fa5e 	bl	8004664 <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e099      	b.n	80052e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0201 	bic.w	r2, r2, #1
 80051d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051d4:	e00f      	b.n	80051f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051d6:	f7ff fa45 	bl	8004664 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b05      	cmp	r3, #5
 80051e2:	d908      	bls.n	80051f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2220      	movs	r2, #32
 80051e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2203      	movs	r2, #3
 80051ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e078      	b.n	80052e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1e8      	bne.n	80051d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	4b38      	ldr	r3, [pc, #224]	; (80052f0 <HAL_DMA_Init+0x158>)
 8005210:	4013      	ands	r3, r2
 8005212:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005222:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800522e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800523a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4313      	orrs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	2b04      	cmp	r3, #4
 800524e:	d107      	bne.n	8005260 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005258:	4313      	orrs	r3, r2
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	4313      	orrs	r3, r2
 800525e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f023 0307 	bic.w	r3, r3, #7
 8005276:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	4313      	orrs	r3, r2
 8005280:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	2b04      	cmp	r3, #4
 8005288:	d117      	bne.n	80052ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	4313      	orrs	r3, r2
 8005292:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00e      	beq.n	80052ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 fb01 	bl	80058a4 <DMA_CheckFifoParam>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d008      	beq.n	80052ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2240      	movs	r2, #64	; 0x40
 80052ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80052b6:	2301      	movs	r3, #1
 80052b8:	e016      	b.n	80052e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fab8 	bl	8005838 <DMA_CalcBaseAndBitshift>
 80052c8:	4603      	mov	r3, r0
 80052ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d0:	223f      	movs	r2, #63	; 0x3f
 80052d2:	409a      	lsls	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3718      	adds	r7, #24
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	f010803f 	.word	0xf010803f

080052f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
 8005300:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005302:	2300      	movs	r3, #0
 8005304:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005312:	2b01      	cmp	r3, #1
 8005314:	d101      	bne.n	800531a <HAL_DMA_Start_IT+0x26>
 8005316:	2302      	movs	r3, #2
 8005318:	e040      	b.n	800539c <HAL_DMA_Start_IT+0xa8>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b01      	cmp	r3, #1
 800532c:	d12f      	bne.n	800538e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2202      	movs	r2, #2
 8005332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	68b9      	ldr	r1, [r7, #8]
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 fa4a 	bl	80057dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800534c:	223f      	movs	r2, #63	; 0x3f
 800534e:	409a      	lsls	r2, r3
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0216 	orr.w	r2, r2, #22
 8005362:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005368:	2b00      	cmp	r3, #0
 800536a:	d007      	beq.n	800537c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f042 0208 	orr.w	r2, r2, #8
 800537a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0201 	orr.w	r2, r2, #1
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	e005      	b.n	800539a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005396:	2302      	movs	r3, #2
 8005398:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800539a:	7dfb      	ldrb	r3, [r7, #23]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80053b2:	f7ff f957 	bl	8004664 <HAL_GetTick>
 80053b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d008      	beq.n	80053d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2280      	movs	r2, #128	; 0x80
 80053c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e052      	b.n	800547c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0216 	bic.w	r2, r2, #22
 80053e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695a      	ldr	r2, [r3, #20]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d103      	bne.n	8005406 <HAL_DMA_Abort+0x62>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005402:	2b00      	cmp	r3, #0
 8005404:	d007      	beq.n	8005416 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0208 	bic.w	r2, r2, #8
 8005414:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0201 	bic.w	r2, r2, #1
 8005424:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005426:	e013      	b.n	8005450 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005428:	f7ff f91c 	bl	8004664 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b05      	cmp	r3, #5
 8005434:	d90c      	bls.n	8005450 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2220      	movs	r2, #32
 800543a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2203      	movs	r2, #3
 8005440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e015      	b.n	800547c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1e4      	bne.n	8005428 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005462:	223f      	movs	r2, #63	; 0x3f
 8005464:	409a      	lsls	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d004      	beq.n	80054a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2280      	movs	r2, #128	; 0x80
 800549c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e00c      	b.n	80054bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2205      	movs	r2, #5
 80054a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 0201 	bic.w	r2, r2, #1
 80054b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80054d0:	2300      	movs	r3, #0
 80054d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80054d4:	4b8e      	ldr	r3, [pc, #568]	; (8005710 <HAL_DMA_IRQHandler+0x248>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a8e      	ldr	r2, [pc, #568]	; (8005714 <HAL_DMA_IRQHandler+0x24c>)
 80054da:	fba2 2303 	umull	r2, r3, r2, r3
 80054de:	0a9b      	lsrs	r3, r3, #10
 80054e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f2:	2208      	movs	r2, #8
 80054f4:	409a      	lsls	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4013      	ands	r3, r2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d01a      	beq.n	8005534 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0304 	and.w	r3, r3, #4
 8005508:	2b00      	cmp	r3, #0
 800550a:	d013      	beq.n	8005534 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0204 	bic.w	r2, r2, #4
 800551a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005520:	2208      	movs	r2, #8
 8005522:	409a      	lsls	r2, r3
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552c:	f043 0201 	orr.w	r2, r3, #1
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005538:	2201      	movs	r2, #1
 800553a:	409a      	lsls	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4013      	ands	r3, r2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d012      	beq.n	800556a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00b      	beq.n	800556a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005556:	2201      	movs	r2, #1
 8005558:	409a      	lsls	r2, r3
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005562:	f043 0202 	orr.w	r2, r3, #2
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800556e:	2204      	movs	r2, #4
 8005570:	409a      	lsls	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4013      	ands	r3, r2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d012      	beq.n	80055a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00b      	beq.n	80055a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800558c:	2204      	movs	r2, #4
 800558e:	409a      	lsls	r2, r3
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005598:	f043 0204 	orr.w	r2, r3, #4
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a4:	2210      	movs	r2, #16
 80055a6:	409a      	lsls	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4013      	ands	r3, r2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d043      	beq.n	8005638 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0308 	and.w	r3, r3, #8
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d03c      	beq.n	8005638 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055c2:	2210      	movs	r2, #16
 80055c4:	409a      	lsls	r2, r3
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d018      	beq.n	800560a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d108      	bne.n	80055f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d024      	beq.n	8005638 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	4798      	blx	r3
 80055f6:	e01f      	b.n	8005638 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d01b      	beq.n	8005638 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	4798      	blx	r3
 8005608:	e016      	b.n	8005638 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005614:	2b00      	cmp	r3, #0
 8005616:	d107      	bne.n	8005628 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 0208 	bic.w	r2, r2, #8
 8005626:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562c:	2b00      	cmp	r3, #0
 800562e:	d003      	beq.n	8005638 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800563c:	2220      	movs	r2, #32
 800563e:	409a      	lsls	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4013      	ands	r3, r2
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 808f 	beq.w	8005768 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0310 	and.w	r3, r3, #16
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 8087 	beq.w	8005768 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800565e:	2220      	movs	r2, #32
 8005660:	409a      	lsls	r2, r3
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b05      	cmp	r3, #5
 8005670:	d136      	bne.n	80056e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 0216 	bic.w	r2, r2, #22
 8005680:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	695a      	ldr	r2, [r3, #20]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005690:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	2b00      	cmp	r3, #0
 8005698:	d103      	bne.n	80056a2 <HAL_DMA_IRQHandler+0x1da>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d007      	beq.n	80056b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 0208 	bic.w	r2, r2, #8
 80056b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b6:	223f      	movs	r2, #63	; 0x3f
 80056b8:	409a      	lsls	r2, r3
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d07e      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	4798      	blx	r3
        }
        return;
 80056de:	e079      	b.n	80057d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d01d      	beq.n	800572a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10d      	bne.n	8005718 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005700:	2b00      	cmp	r3, #0
 8005702:	d031      	beq.n	8005768 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	4798      	blx	r3
 800570c:	e02c      	b.n	8005768 <HAL_DMA_IRQHandler+0x2a0>
 800570e:	bf00      	nop
 8005710:	20000020 	.word	0x20000020
 8005714:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571c:	2b00      	cmp	r3, #0
 800571e:	d023      	beq.n	8005768 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	4798      	blx	r3
 8005728:	e01e      	b.n	8005768 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10f      	bne.n	8005758 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0210 	bic.w	r2, r2, #16
 8005746:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576c:	2b00      	cmp	r3, #0
 800576e:	d032      	beq.n	80057d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b00      	cmp	r3, #0
 800577a:	d022      	beq.n	80057c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2205      	movs	r2, #5
 8005780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 0201 	bic.w	r2, r2, #1
 8005792:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	3301      	adds	r3, #1
 8005798:	60bb      	str	r3, [r7, #8]
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	429a      	cmp	r2, r3
 800579e:	d307      	bcc.n	80057b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1f2      	bne.n	8005794 <HAL_DMA_IRQHandler+0x2cc>
 80057ae:	e000      	b.n	80057b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80057b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d005      	beq.n	80057d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	4798      	blx	r3
 80057d2:	e000      	b.n	80057d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80057d4:	bf00      	nop
    }
  }
}
 80057d6:	3718      	adds	r7, #24
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	2b40      	cmp	r3, #64	; 0x40
 8005808:	d108      	bne.n	800581c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800581a:	e007      	b.n	800582c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	60da      	str	r2, [r3, #12]
}
 800582c:	bf00      	nop
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	b2db      	uxtb	r3, r3
 8005846:	3b10      	subs	r3, #16
 8005848:	4a14      	ldr	r2, [pc, #80]	; (800589c <DMA_CalcBaseAndBitshift+0x64>)
 800584a:	fba2 2303 	umull	r2, r3, r2, r3
 800584e:	091b      	lsrs	r3, r3, #4
 8005850:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005852:	4a13      	ldr	r2, [pc, #76]	; (80058a0 <DMA_CalcBaseAndBitshift+0x68>)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b03      	cmp	r3, #3
 8005864:	d909      	bls.n	800587a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800586e:	f023 0303 	bic.w	r3, r3, #3
 8005872:	1d1a      	adds	r2, r3, #4
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	659a      	str	r2, [r3, #88]	; 0x58
 8005878:	e007      	b.n	800588a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005882:	f023 0303 	bic.w	r3, r3, #3
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800588e:	4618      	mov	r0, r3
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	aaaaaaab 	.word	0xaaaaaaab
 80058a0:	0800a204 	.word	0x0800a204

080058a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058ac:	2300      	movs	r3, #0
 80058ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d11f      	bne.n	80058fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	2b03      	cmp	r3, #3
 80058c2:	d856      	bhi.n	8005972 <DMA_CheckFifoParam+0xce>
 80058c4:	a201      	add	r2, pc, #4	; (adr r2, 80058cc <DMA_CheckFifoParam+0x28>)
 80058c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ca:	bf00      	nop
 80058cc:	080058dd 	.word	0x080058dd
 80058d0:	080058ef 	.word	0x080058ef
 80058d4:	080058dd 	.word	0x080058dd
 80058d8:	08005973 	.word	0x08005973
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d046      	beq.n	8005976 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058ec:	e043      	b.n	8005976 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058f6:	d140      	bne.n	800597a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058fc:	e03d      	b.n	800597a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005906:	d121      	bne.n	800594c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2b03      	cmp	r3, #3
 800590c:	d837      	bhi.n	800597e <DMA_CheckFifoParam+0xda>
 800590e:	a201      	add	r2, pc, #4	; (adr r2, 8005914 <DMA_CheckFifoParam+0x70>)
 8005910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005914:	08005925 	.word	0x08005925
 8005918:	0800592b 	.word	0x0800592b
 800591c:	08005925 	.word	0x08005925
 8005920:	0800593d 	.word	0x0800593d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	73fb      	strb	r3, [r7, #15]
      break;
 8005928:	e030      	b.n	800598c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d025      	beq.n	8005982 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800593a:	e022      	b.n	8005982 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005944:	d11f      	bne.n	8005986 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800594a:	e01c      	b.n	8005986 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2b02      	cmp	r3, #2
 8005950:	d903      	bls.n	800595a <DMA_CheckFifoParam+0xb6>
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2b03      	cmp	r3, #3
 8005956:	d003      	beq.n	8005960 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005958:	e018      	b.n	800598c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	73fb      	strb	r3, [r7, #15]
      break;
 800595e:	e015      	b.n	800598c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00e      	beq.n	800598a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	73fb      	strb	r3, [r7, #15]
      break;
 8005970:	e00b      	b.n	800598a <DMA_CheckFifoParam+0xe6>
      break;
 8005972:	bf00      	nop
 8005974:	e00a      	b.n	800598c <DMA_CheckFifoParam+0xe8>
      break;
 8005976:	bf00      	nop
 8005978:	e008      	b.n	800598c <DMA_CheckFifoParam+0xe8>
      break;
 800597a:	bf00      	nop
 800597c:	e006      	b.n	800598c <DMA_CheckFifoParam+0xe8>
      break;
 800597e:	bf00      	nop
 8005980:	e004      	b.n	800598c <DMA_CheckFifoParam+0xe8>
      break;
 8005982:	bf00      	nop
 8005984:	e002      	b.n	800598c <DMA_CheckFifoParam+0xe8>
      break;   
 8005986:	bf00      	nop
 8005988:	e000      	b.n	800598c <DMA_CheckFifoParam+0xe8>
      break;
 800598a:	bf00      	nop
    }
  } 
  
  return status; 
 800598c:	7bfb      	ldrb	r3, [r7, #15]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop

0800599c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800599c:	b480      	push	{r7}
 800599e:	b089      	sub	sp, #36	; 0x24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059b2:	2300      	movs	r3, #0
 80059b4:	61fb      	str	r3, [r7, #28]
 80059b6:	e16b      	b.n	8005c90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80059b8:	2201      	movs	r2, #1
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	fa02 f303 	lsl.w	r3, r2, r3
 80059c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	4013      	ands	r3, r2
 80059ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	f040 815a 	bne.w	8005c8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d005      	beq.n	80059ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d130      	bne.n	8005a50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	005b      	lsls	r3, r3, #1
 80059f8:	2203      	movs	r2, #3
 80059fa:	fa02 f303 	lsl.w	r3, r2, r3
 80059fe:	43db      	mvns	r3, r3
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	4013      	ands	r3, r2
 8005a04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	68da      	ldr	r2, [r3, #12]
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a24:	2201      	movs	r2, #1
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2c:	43db      	mvns	r3, r3
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	4013      	ands	r3, r2
 8005a32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	091b      	lsrs	r3, r3, #4
 8005a3a:	f003 0201 	and.w	r2, r3, #1
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	fa02 f303 	lsl.w	r3, r2, r3
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f003 0303 	and.w	r3, r3, #3
 8005a58:	2b03      	cmp	r3, #3
 8005a5a:	d017      	beq.n	8005a8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	2203      	movs	r2, #3
 8005a68:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6c:	43db      	mvns	r3, r3
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	4013      	ands	r3, r2
 8005a72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	005b      	lsls	r3, r3, #1
 8005a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f003 0303 	and.w	r3, r3, #3
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d123      	bne.n	8005ae0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	08da      	lsrs	r2, r3, #3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	3208      	adds	r2, #8
 8005aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	f003 0307 	and.w	r3, r3, #7
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	220f      	movs	r2, #15
 8005ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab4:	43db      	mvns	r3, r3
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	691a      	ldr	r2, [r3, #16]
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	f003 0307 	and.w	r3, r3, #7
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	08da      	lsrs	r2, r3, #3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	3208      	adds	r2, #8
 8005ada:	69b9      	ldr	r1, [r7, #24]
 8005adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	005b      	lsls	r3, r3, #1
 8005aea:	2203      	movs	r2, #3
 8005aec:	fa02 f303 	lsl.w	r3, r2, r3
 8005af0:	43db      	mvns	r3, r3
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	4013      	ands	r3, r2
 8005af6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f003 0203 	and.w	r2, r3, #3
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	fa02 f303 	lsl.w	r3, r2, r3
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 80b4 	beq.w	8005c8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b22:	2300      	movs	r3, #0
 8005b24:	60fb      	str	r3, [r7, #12]
 8005b26:	4b60      	ldr	r3, [pc, #384]	; (8005ca8 <HAL_GPIO_Init+0x30c>)
 8005b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b2a:	4a5f      	ldr	r2, [pc, #380]	; (8005ca8 <HAL_GPIO_Init+0x30c>)
 8005b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b30:	6453      	str	r3, [r2, #68]	; 0x44
 8005b32:	4b5d      	ldr	r3, [pc, #372]	; (8005ca8 <HAL_GPIO_Init+0x30c>)
 8005b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b3a:	60fb      	str	r3, [r7, #12]
 8005b3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b3e:	4a5b      	ldr	r2, [pc, #364]	; (8005cac <HAL_GPIO_Init+0x310>)
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	089b      	lsrs	r3, r3, #2
 8005b44:	3302      	adds	r3, #2
 8005b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	f003 0303 	and.w	r3, r3, #3
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	220f      	movs	r2, #15
 8005b56:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5a:	43db      	mvns	r3, r3
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	4013      	ands	r3, r2
 8005b60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a52      	ldr	r2, [pc, #328]	; (8005cb0 <HAL_GPIO_Init+0x314>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d02b      	beq.n	8005bc2 <HAL_GPIO_Init+0x226>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a51      	ldr	r2, [pc, #324]	; (8005cb4 <HAL_GPIO_Init+0x318>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d025      	beq.n	8005bbe <HAL_GPIO_Init+0x222>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a50      	ldr	r2, [pc, #320]	; (8005cb8 <HAL_GPIO_Init+0x31c>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d01f      	beq.n	8005bba <HAL_GPIO_Init+0x21e>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a4f      	ldr	r2, [pc, #316]	; (8005cbc <HAL_GPIO_Init+0x320>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d019      	beq.n	8005bb6 <HAL_GPIO_Init+0x21a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a4e      	ldr	r2, [pc, #312]	; (8005cc0 <HAL_GPIO_Init+0x324>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d013      	beq.n	8005bb2 <HAL_GPIO_Init+0x216>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a4d      	ldr	r2, [pc, #308]	; (8005cc4 <HAL_GPIO_Init+0x328>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d00d      	beq.n	8005bae <HAL_GPIO_Init+0x212>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a4c      	ldr	r2, [pc, #304]	; (8005cc8 <HAL_GPIO_Init+0x32c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d007      	beq.n	8005baa <HAL_GPIO_Init+0x20e>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a4b      	ldr	r2, [pc, #300]	; (8005ccc <HAL_GPIO_Init+0x330>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d101      	bne.n	8005ba6 <HAL_GPIO_Init+0x20a>
 8005ba2:	2307      	movs	r3, #7
 8005ba4:	e00e      	b.n	8005bc4 <HAL_GPIO_Init+0x228>
 8005ba6:	2308      	movs	r3, #8
 8005ba8:	e00c      	b.n	8005bc4 <HAL_GPIO_Init+0x228>
 8005baa:	2306      	movs	r3, #6
 8005bac:	e00a      	b.n	8005bc4 <HAL_GPIO_Init+0x228>
 8005bae:	2305      	movs	r3, #5
 8005bb0:	e008      	b.n	8005bc4 <HAL_GPIO_Init+0x228>
 8005bb2:	2304      	movs	r3, #4
 8005bb4:	e006      	b.n	8005bc4 <HAL_GPIO_Init+0x228>
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e004      	b.n	8005bc4 <HAL_GPIO_Init+0x228>
 8005bba:	2302      	movs	r3, #2
 8005bbc:	e002      	b.n	8005bc4 <HAL_GPIO_Init+0x228>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e000      	b.n	8005bc4 <HAL_GPIO_Init+0x228>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	69fa      	ldr	r2, [r7, #28]
 8005bc6:	f002 0203 	and.w	r2, r2, #3
 8005bca:	0092      	lsls	r2, r2, #2
 8005bcc:	4093      	lsls	r3, r2
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bd4:	4935      	ldr	r1, [pc, #212]	; (8005cac <HAL_GPIO_Init+0x310>)
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	089b      	lsrs	r3, r3, #2
 8005bda:	3302      	adds	r3, #2
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005be2:	4b3b      	ldr	r3, [pc, #236]	; (8005cd0 <HAL_GPIO_Init+0x334>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	43db      	mvns	r3, r3
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	4013      	ands	r3, r2
 8005bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d003      	beq.n	8005c06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005bfe:	69ba      	ldr	r2, [r7, #24]
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c06:	4a32      	ldr	r2, [pc, #200]	; (8005cd0 <HAL_GPIO_Init+0x334>)
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c0c:	4b30      	ldr	r3, [pc, #192]	; (8005cd0 <HAL_GPIO_Init+0x334>)
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	43db      	mvns	r3, r3
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	4013      	ands	r3, r2
 8005c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c30:	4a27      	ldr	r2, [pc, #156]	; (8005cd0 <HAL_GPIO_Init+0x334>)
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005c36:	4b26      	ldr	r3, [pc, #152]	; (8005cd0 <HAL_GPIO_Init+0x334>)
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	43db      	mvns	r3, r3
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	4013      	ands	r3, r2
 8005c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c5a:	4a1d      	ldr	r2, [pc, #116]	; (8005cd0 <HAL_GPIO_Init+0x334>)
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c60:	4b1b      	ldr	r3, [pc, #108]	; (8005cd0 <HAL_GPIO_Init+0x334>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	43db      	mvns	r3, r3
 8005c6a:	69ba      	ldr	r2, [r7, #24]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c84:	4a12      	ldr	r2, [pc, #72]	; (8005cd0 <HAL_GPIO_Init+0x334>)
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	61fb      	str	r3, [r7, #28]
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	2b0f      	cmp	r3, #15
 8005c94:	f67f ae90 	bls.w	80059b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005c98:	bf00      	nop
 8005c9a:	bf00      	nop
 8005c9c:	3724      	adds	r7, #36	; 0x24
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40023800 	.word	0x40023800
 8005cac:	40013800 	.word	0x40013800
 8005cb0:	40020000 	.word	0x40020000
 8005cb4:	40020400 	.word	0x40020400
 8005cb8:	40020800 	.word	0x40020800
 8005cbc:	40020c00 	.word	0x40020c00
 8005cc0:	40021000 	.word	0x40021000
 8005cc4:	40021400 	.word	0x40021400
 8005cc8:	40021800 	.word	0x40021800
 8005ccc:	40021c00 	.word	0x40021c00
 8005cd0:	40013c00 	.word	0x40013c00

08005cd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	691a      	ldr	r2, [r3, #16]
 8005ce4:	887b      	ldrh	r3, [r7, #2]
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d002      	beq.n	8005cf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005cec:	2301      	movs	r3, #1
 8005cee:	73fb      	strb	r3, [r7, #15]
 8005cf0:	e001      	b.n	8005cf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3714      	adds	r7, #20
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	807b      	strh	r3, [r7, #2]
 8005d10:	4613      	mov	r3, r2
 8005d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d14:	787b      	ldrb	r3, [r7, #1]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d1a:	887a      	ldrh	r2, [r7, #2]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005d20:	e003      	b.n	8005d2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d22:	887b      	ldrh	r3, [r7, #2]
 8005d24:	041a      	lsls	r2, r3, #16
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	619a      	str	r2, [r3, #24]
}
 8005d2a:	bf00      	nop
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b085      	sub	sp, #20
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
 8005d3e:	460b      	mov	r3, r1
 8005d40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d48:	887a      	ldrh	r2, [r7, #2]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	041a      	lsls	r2, r3, #16
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	43d9      	mvns	r1, r3
 8005d54:	887b      	ldrh	r3, [r7, #2]
 8005d56:	400b      	ands	r3, r1
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	619a      	str	r2, [r3, #24]
}
 8005d5e:	bf00      	nop
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
	...

08005d6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	4603      	mov	r3, r0
 8005d74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005d76:	4b08      	ldr	r3, [pc, #32]	; (8005d98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d78:	695a      	ldr	r2, [r3, #20]
 8005d7a:	88fb      	ldrh	r3, [r7, #6]
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d006      	beq.n	8005d90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d82:	4a05      	ldr	r2, [pc, #20]	; (8005d98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d84:	88fb      	ldrh	r3, [r7, #6]
 8005d86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d88:	88fb      	ldrh	r3, [r7, #6]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 f806 	bl	8005d9c <HAL_GPIO_EXTI_Callback>
  }
}
 8005d90:	bf00      	nop
 8005d92:	3708      	adds	r7, #8
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	40013c00 	.word	0x40013c00

08005d9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	4603      	mov	r3, r0
 8005da4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
	...

08005db4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e267      	b.n	8006296 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d075      	beq.n	8005ebe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dd2:	4b88      	ldr	r3, [pc, #544]	; (8005ff4 <HAL_RCC_OscConfig+0x240>)
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f003 030c 	and.w	r3, r3, #12
 8005dda:	2b04      	cmp	r3, #4
 8005ddc:	d00c      	beq.n	8005df8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dde:	4b85      	ldr	r3, [pc, #532]	; (8005ff4 <HAL_RCC_OscConfig+0x240>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005de6:	2b08      	cmp	r3, #8
 8005de8:	d112      	bne.n	8005e10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dea:	4b82      	ldr	r3, [pc, #520]	; (8005ff4 <HAL_RCC_OscConfig+0x240>)
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005df2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005df6:	d10b      	bne.n	8005e10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005df8:	4b7e      	ldr	r3, [pc, #504]	; (8005ff4 <HAL_RCC_OscConfig+0x240>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d05b      	beq.n	8005ebc <HAL_RCC_OscConfig+0x108>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d157      	bne.n	8005ebc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e242      	b.n	8006296 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e18:	d106      	bne.n	8005e28 <HAL_RCC_OscConfig+0x74>
 8005e1a:	4b76      	ldr	r3, [pc, #472]	; (8005ff4 <HAL_RCC_OscConfig+0x240>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a75      	ldr	r2, [pc, #468]	; (8005ff4 <HAL_RCC_OscConfig+0x240>)
 8005e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	e01d      	b.n	8005e64 <HAL_RCC_OscConfig+0xb0>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e30:	d10c      	bne.n	8005e4c <HAL_RCC_OscConfig+0x98>
 8005e32:	4b70      	ldr	r3, [pc, #448]	; (8005ff4 <HAL_RCC_OscConfig+0x240>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a6f      	ldr	r2, [pc, #444]	; (8005ff4 <HAL_RCC_OscConfig+0x240>)
 8005e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	4b6d      	ldr	r3, [pc, #436]	; (8005ff4 <HAL_RCC_OscConfig+0x240>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a6c      	ldr	r2, [pc, #432]	; (8005ff4 <HAL_RCC_OscConfig+0x240>)
 8005e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e48:	6013      	str	r3, [r2, #0]
 8005e4a:	e00b      	b.n	8005e64 <HAL_RCC_OscConfig+0xb0>
 8005e4c:	4b69      	ldr	r3, [pc, #420]	; (8005ff4 <HAL_RCC_OscConfig+0x240>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a68      	ldr	r2, [pc, #416]	; (8005ff4 <HAL_RCC_OscConfig+0x240>)
 8005e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	4b66      	ldr	r3, [pc, #408]	; (8005ff4 <HAL_RCC_OscConfig+0x240>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a65      	ldr	r2, [pc, #404]	; (8005ff4 <HAL_RCC_OscConfig+0x240>)
 8005e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d013      	beq.n	8005e94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e6c:	f7fe fbfa 	bl	8004664 <HAL_GetTick>
 8005e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e72:	e008      	b.n	8005e86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e74:	f7fe fbf6 	bl	8004664 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b64      	cmp	r3, #100	; 0x64
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e207      	b.n	8006296 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e86:	4b5b      	ldr	r3, [pc, #364]	; (8005ff4 <HAL_RCC_OscConfig+0x240>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d0f0      	beq.n	8005e74 <HAL_RCC_OscConfig+0xc0>
 8005e92:	e014      	b.n	8005ebe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e94:	f7fe fbe6 	bl	8004664 <HAL_GetTick>
 8005e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e9a:	e008      	b.n	8005eae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e9c:	f7fe fbe2 	bl	8004664 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	2b64      	cmp	r3, #100	; 0x64
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e1f3      	b.n	8006296 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eae:	4b51      	ldr	r3, [pc, #324]	; (8005ff4 <HAL_RCC_OscConfig+0x240>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1f0      	bne.n	8005e9c <HAL_RCC_OscConfig+0xe8>
 8005eba:	e000      	b.n	8005ebe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d063      	beq.n	8005f92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005eca:	4b4a      	ldr	r3, [pc, #296]	; (8005ff4 <HAL_RCC_OscConfig+0x240>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f003 030c 	and.w	r3, r3, #12
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00b      	beq.n	8005eee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ed6:	4b47      	ldr	r3, [pc, #284]	; (8005ff4 <HAL_RCC_OscConfig+0x240>)
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ede:	2b08      	cmp	r3, #8
 8005ee0:	d11c      	bne.n	8005f1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ee2:	4b44      	ldr	r3, [pc, #272]	; (8005ff4 <HAL_RCC_OscConfig+0x240>)
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d116      	bne.n	8005f1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eee:	4b41      	ldr	r3, [pc, #260]	; (8005ff4 <HAL_RCC_OscConfig+0x240>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d005      	beq.n	8005f06 <HAL_RCC_OscConfig+0x152>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d001      	beq.n	8005f06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e1c7      	b.n	8006296 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f06:	4b3b      	ldr	r3, [pc, #236]	; (8005ff4 <HAL_RCC_OscConfig+0x240>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	00db      	lsls	r3, r3, #3
 8005f14:	4937      	ldr	r1, [pc, #220]	; (8005ff4 <HAL_RCC_OscConfig+0x240>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f1a:	e03a      	b.n	8005f92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d020      	beq.n	8005f66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f24:	4b34      	ldr	r3, [pc, #208]	; (8005ff8 <HAL_RCC_OscConfig+0x244>)
 8005f26:	2201      	movs	r2, #1
 8005f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f2a:	f7fe fb9b 	bl	8004664 <HAL_GetTick>
 8005f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f30:	e008      	b.n	8005f44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f32:	f7fe fb97 	bl	8004664 <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d901      	bls.n	8005f44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e1a8      	b.n	8006296 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f44:	4b2b      	ldr	r3, [pc, #172]	; (8005ff4 <HAL_RCC_OscConfig+0x240>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d0f0      	beq.n	8005f32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f50:	4b28      	ldr	r3, [pc, #160]	; (8005ff4 <HAL_RCC_OscConfig+0x240>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	00db      	lsls	r3, r3, #3
 8005f5e:	4925      	ldr	r1, [pc, #148]	; (8005ff4 <HAL_RCC_OscConfig+0x240>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	600b      	str	r3, [r1, #0]
 8005f64:	e015      	b.n	8005f92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f66:	4b24      	ldr	r3, [pc, #144]	; (8005ff8 <HAL_RCC_OscConfig+0x244>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f6c:	f7fe fb7a 	bl	8004664 <HAL_GetTick>
 8005f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f72:	e008      	b.n	8005f86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f74:	f7fe fb76 	bl	8004664 <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d901      	bls.n	8005f86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e187      	b.n	8006296 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f86:	4b1b      	ldr	r3, [pc, #108]	; (8005ff4 <HAL_RCC_OscConfig+0x240>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1f0      	bne.n	8005f74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0308 	and.w	r3, r3, #8
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d036      	beq.n	800600c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d016      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fa6:	4b15      	ldr	r3, [pc, #84]	; (8005ffc <HAL_RCC_OscConfig+0x248>)
 8005fa8:	2201      	movs	r2, #1
 8005faa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fac:	f7fe fb5a 	bl	8004664 <HAL_GetTick>
 8005fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fb2:	e008      	b.n	8005fc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fb4:	f7fe fb56 	bl	8004664 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e167      	b.n	8006296 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fc6:	4b0b      	ldr	r3, [pc, #44]	; (8005ff4 <HAL_RCC_OscConfig+0x240>)
 8005fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d0f0      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x200>
 8005fd2:	e01b      	b.n	800600c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fd4:	4b09      	ldr	r3, [pc, #36]	; (8005ffc <HAL_RCC_OscConfig+0x248>)
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fda:	f7fe fb43 	bl	8004664 <HAL_GetTick>
 8005fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fe0:	e00e      	b.n	8006000 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fe2:	f7fe fb3f 	bl	8004664 <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d907      	bls.n	8006000 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e150      	b.n	8006296 <HAL_RCC_OscConfig+0x4e2>
 8005ff4:	40023800 	.word	0x40023800
 8005ff8:	42470000 	.word	0x42470000
 8005ffc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006000:	4b88      	ldr	r3, [pc, #544]	; (8006224 <HAL_RCC_OscConfig+0x470>)
 8006002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006004:	f003 0302 	and.w	r3, r3, #2
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1ea      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0304 	and.w	r3, r3, #4
 8006014:	2b00      	cmp	r3, #0
 8006016:	f000 8097 	beq.w	8006148 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800601a:	2300      	movs	r3, #0
 800601c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800601e:	4b81      	ldr	r3, [pc, #516]	; (8006224 <HAL_RCC_OscConfig+0x470>)
 8006020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10f      	bne.n	800604a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800602a:	2300      	movs	r3, #0
 800602c:	60bb      	str	r3, [r7, #8]
 800602e:	4b7d      	ldr	r3, [pc, #500]	; (8006224 <HAL_RCC_OscConfig+0x470>)
 8006030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006032:	4a7c      	ldr	r2, [pc, #496]	; (8006224 <HAL_RCC_OscConfig+0x470>)
 8006034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006038:	6413      	str	r3, [r2, #64]	; 0x40
 800603a:	4b7a      	ldr	r3, [pc, #488]	; (8006224 <HAL_RCC_OscConfig+0x470>)
 800603c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006042:	60bb      	str	r3, [r7, #8]
 8006044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006046:	2301      	movs	r3, #1
 8006048:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800604a:	4b77      	ldr	r3, [pc, #476]	; (8006228 <HAL_RCC_OscConfig+0x474>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006052:	2b00      	cmp	r3, #0
 8006054:	d118      	bne.n	8006088 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006056:	4b74      	ldr	r3, [pc, #464]	; (8006228 <HAL_RCC_OscConfig+0x474>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a73      	ldr	r2, [pc, #460]	; (8006228 <HAL_RCC_OscConfig+0x474>)
 800605c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006062:	f7fe faff 	bl	8004664 <HAL_GetTick>
 8006066:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006068:	e008      	b.n	800607c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800606a:	f7fe fafb 	bl	8004664 <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	2b02      	cmp	r3, #2
 8006076:	d901      	bls.n	800607c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e10c      	b.n	8006296 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800607c:	4b6a      	ldr	r3, [pc, #424]	; (8006228 <HAL_RCC_OscConfig+0x474>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006084:	2b00      	cmp	r3, #0
 8006086:	d0f0      	beq.n	800606a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d106      	bne.n	800609e <HAL_RCC_OscConfig+0x2ea>
 8006090:	4b64      	ldr	r3, [pc, #400]	; (8006224 <HAL_RCC_OscConfig+0x470>)
 8006092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006094:	4a63      	ldr	r2, [pc, #396]	; (8006224 <HAL_RCC_OscConfig+0x470>)
 8006096:	f043 0301 	orr.w	r3, r3, #1
 800609a:	6713      	str	r3, [r2, #112]	; 0x70
 800609c:	e01c      	b.n	80060d8 <HAL_RCC_OscConfig+0x324>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	2b05      	cmp	r3, #5
 80060a4:	d10c      	bne.n	80060c0 <HAL_RCC_OscConfig+0x30c>
 80060a6:	4b5f      	ldr	r3, [pc, #380]	; (8006224 <HAL_RCC_OscConfig+0x470>)
 80060a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060aa:	4a5e      	ldr	r2, [pc, #376]	; (8006224 <HAL_RCC_OscConfig+0x470>)
 80060ac:	f043 0304 	orr.w	r3, r3, #4
 80060b0:	6713      	str	r3, [r2, #112]	; 0x70
 80060b2:	4b5c      	ldr	r3, [pc, #368]	; (8006224 <HAL_RCC_OscConfig+0x470>)
 80060b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b6:	4a5b      	ldr	r2, [pc, #364]	; (8006224 <HAL_RCC_OscConfig+0x470>)
 80060b8:	f043 0301 	orr.w	r3, r3, #1
 80060bc:	6713      	str	r3, [r2, #112]	; 0x70
 80060be:	e00b      	b.n	80060d8 <HAL_RCC_OscConfig+0x324>
 80060c0:	4b58      	ldr	r3, [pc, #352]	; (8006224 <HAL_RCC_OscConfig+0x470>)
 80060c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c4:	4a57      	ldr	r2, [pc, #348]	; (8006224 <HAL_RCC_OscConfig+0x470>)
 80060c6:	f023 0301 	bic.w	r3, r3, #1
 80060ca:	6713      	str	r3, [r2, #112]	; 0x70
 80060cc:	4b55      	ldr	r3, [pc, #340]	; (8006224 <HAL_RCC_OscConfig+0x470>)
 80060ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d0:	4a54      	ldr	r2, [pc, #336]	; (8006224 <HAL_RCC_OscConfig+0x470>)
 80060d2:	f023 0304 	bic.w	r3, r3, #4
 80060d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d015      	beq.n	800610c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060e0:	f7fe fac0 	bl	8004664 <HAL_GetTick>
 80060e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060e6:	e00a      	b.n	80060fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060e8:	f7fe fabc 	bl	8004664 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d901      	bls.n	80060fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e0cb      	b.n	8006296 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060fe:	4b49      	ldr	r3, [pc, #292]	; (8006224 <HAL_RCC_OscConfig+0x470>)
 8006100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006102:	f003 0302 	and.w	r3, r3, #2
 8006106:	2b00      	cmp	r3, #0
 8006108:	d0ee      	beq.n	80060e8 <HAL_RCC_OscConfig+0x334>
 800610a:	e014      	b.n	8006136 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800610c:	f7fe faaa 	bl	8004664 <HAL_GetTick>
 8006110:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006112:	e00a      	b.n	800612a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006114:	f7fe faa6 	bl	8004664 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006122:	4293      	cmp	r3, r2
 8006124:	d901      	bls.n	800612a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e0b5      	b.n	8006296 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800612a:	4b3e      	ldr	r3, [pc, #248]	; (8006224 <HAL_RCC_OscConfig+0x470>)
 800612c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1ee      	bne.n	8006114 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006136:	7dfb      	ldrb	r3, [r7, #23]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d105      	bne.n	8006148 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800613c:	4b39      	ldr	r3, [pc, #228]	; (8006224 <HAL_RCC_OscConfig+0x470>)
 800613e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006140:	4a38      	ldr	r2, [pc, #224]	; (8006224 <HAL_RCC_OscConfig+0x470>)
 8006142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006146:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 80a1 	beq.w	8006294 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006152:	4b34      	ldr	r3, [pc, #208]	; (8006224 <HAL_RCC_OscConfig+0x470>)
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f003 030c 	and.w	r3, r3, #12
 800615a:	2b08      	cmp	r3, #8
 800615c:	d05c      	beq.n	8006218 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	2b02      	cmp	r3, #2
 8006164:	d141      	bne.n	80061ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006166:	4b31      	ldr	r3, [pc, #196]	; (800622c <HAL_RCC_OscConfig+0x478>)
 8006168:	2200      	movs	r2, #0
 800616a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800616c:	f7fe fa7a 	bl	8004664 <HAL_GetTick>
 8006170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006172:	e008      	b.n	8006186 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006174:	f7fe fa76 	bl	8004664 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	2b02      	cmp	r3, #2
 8006180:	d901      	bls.n	8006186 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e087      	b.n	8006296 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006186:	4b27      	ldr	r3, [pc, #156]	; (8006224 <HAL_RCC_OscConfig+0x470>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1f0      	bne.n	8006174 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	69da      	ldr	r2, [r3, #28]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	431a      	orrs	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	019b      	lsls	r3, r3, #6
 80061a2:	431a      	orrs	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a8:	085b      	lsrs	r3, r3, #1
 80061aa:	3b01      	subs	r3, #1
 80061ac:	041b      	lsls	r3, r3, #16
 80061ae:	431a      	orrs	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b4:	061b      	lsls	r3, r3, #24
 80061b6:	491b      	ldr	r1, [pc, #108]	; (8006224 <HAL_RCC_OscConfig+0x470>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061bc:	4b1b      	ldr	r3, [pc, #108]	; (800622c <HAL_RCC_OscConfig+0x478>)
 80061be:	2201      	movs	r2, #1
 80061c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061c2:	f7fe fa4f 	bl	8004664 <HAL_GetTick>
 80061c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061c8:	e008      	b.n	80061dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ca:	f7fe fa4b 	bl	8004664 <HAL_GetTick>
 80061ce:	4602      	mov	r2, r0
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d901      	bls.n	80061dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e05c      	b.n	8006296 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061dc:	4b11      	ldr	r3, [pc, #68]	; (8006224 <HAL_RCC_OscConfig+0x470>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d0f0      	beq.n	80061ca <HAL_RCC_OscConfig+0x416>
 80061e8:	e054      	b.n	8006294 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061ea:	4b10      	ldr	r3, [pc, #64]	; (800622c <HAL_RCC_OscConfig+0x478>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f0:	f7fe fa38 	bl	8004664 <HAL_GetTick>
 80061f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061f6:	e008      	b.n	800620a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061f8:	f7fe fa34 	bl	8004664 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	2b02      	cmp	r3, #2
 8006204:	d901      	bls.n	800620a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e045      	b.n	8006296 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800620a:	4b06      	ldr	r3, [pc, #24]	; (8006224 <HAL_RCC_OscConfig+0x470>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1f0      	bne.n	80061f8 <HAL_RCC_OscConfig+0x444>
 8006216:	e03d      	b.n	8006294 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d107      	bne.n	8006230 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e038      	b.n	8006296 <HAL_RCC_OscConfig+0x4e2>
 8006224:	40023800 	.word	0x40023800
 8006228:	40007000 	.word	0x40007000
 800622c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006230:	4b1b      	ldr	r3, [pc, #108]	; (80062a0 <HAL_RCC_OscConfig+0x4ec>)
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d028      	beq.n	8006290 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006248:	429a      	cmp	r2, r3
 800624a:	d121      	bne.n	8006290 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006256:	429a      	cmp	r2, r3
 8006258:	d11a      	bne.n	8006290 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006260:	4013      	ands	r3, r2
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006266:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006268:	4293      	cmp	r3, r2
 800626a:	d111      	bne.n	8006290 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006276:	085b      	lsrs	r3, r3, #1
 8006278:	3b01      	subs	r3, #1
 800627a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800627c:	429a      	cmp	r2, r3
 800627e:	d107      	bne.n	8006290 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800628c:	429a      	cmp	r2, r3
 800628e:	d001      	beq.n	8006294 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e000      	b.n	8006296 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3718      	adds	r7, #24
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	40023800 	.word	0x40023800

080062a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e0cc      	b.n	8006452 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062b8:	4b68      	ldr	r3, [pc, #416]	; (800645c <HAL_RCC_ClockConfig+0x1b8>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0307 	and.w	r3, r3, #7
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d90c      	bls.n	80062e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062c6:	4b65      	ldr	r3, [pc, #404]	; (800645c <HAL_RCC_ClockConfig+0x1b8>)
 80062c8:	683a      	ldr	r2, [r7, #0]
 80062ca:	b2d2      	uxtb	r2, r2
 80062cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ce:	4b63      	ldr	r3, [pc, #396]	; (800645c <HAL_RCC_ClockConfig+0x1b8>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0307 	and.w	r3, r3, #7
 80062d6:	683a      	ldr	r2, [r7, #0]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d001      	beq.n	80062e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e0b8      	b.n	8006452 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0302 	and.w	r3, r3, #2
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d020      	beq.n	800632e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0304 	and.w	r3, r3, #4
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d005      	beq.n	8006304 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062f8:	4b59      	ldr	r3, [pc, #356]	; (8006460 <HAL_RCC_ClockConfig+0x1bc>)
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	4a58      	ldr	r2, [pc, #352]	; (8006460 <HAL_RCC_ClockConfig+0x1bc>)
 80062fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006302:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0308 	and.w	r3, r3, #8
 800630c:	2b00      	cmp	r3, #0
 800630e:	d005      	beq.n	800631c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006310:	4b53      	ldr	r3, [pc, #332]	; (8006460 <HAL_RCC_ClockConfig+0x1bc>)
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	4a52      	ldr	r2, [pc, #328]	; (8006460 <HAL_RCC_ClockConfig+0x1bc>)
 8006316:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800631a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800631c:	4b50      	ldr	r3, [pc, #320]	; (8006460 <HAL_RCC_ClockConfig+0x1bc>)
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	494d      	ldr	r1, [pc, #308]	; (8006460 <HAL_RCC_ClockConfig+0x1bc>)
 800632a:	4313      	orrs	r3, r2
 800632c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d044      	beq.n	80063c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d107      	bne.n	8006352 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006342:	4b47      	ldr	r3, [pc, #284]	; (8006460 <HAL_RCC_ClockConfig+0x1bc>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d119      	bne.n	8006382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e07f      	b.n	8006452 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	2b02      	cmp	r3, #2
 8006358:	d003      	beq.n	8006362 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800635e:	2b03      	cmp	r3, #3
 8006360:	d107      	bne.n	8006372 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006362:	4b3f      	ldr	r3, [pc, #252]	; (8006460 <HAL_RCC_ClockConfig+0x1bc>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d109      	bne.n	8006382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e06f      	b.n	8006452 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006372:	4b3b      	ldr	r3, [pc, #236]	; (8006460 <HAL_RCC_ClockConfig+0x1bc>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e067      	b.n	8006452 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006382:	4b37      	ldr	r3, [pc, #220]	; (8006460 <HAL_RCC_ClockConfig+0x1bc>)
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f023 0203 	bic.w	r2, r3, #3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	4934      	ldr	r1, [pc, #208]	; (8006460 <HAL_RCC_ClockConfig+0x1bc>)
 8006390:	4313      	orrs	r3, r2
 8006392:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006394:	f7fe f966 	bl	8004664 <HAL_GetTick>
 8006398:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800639a:	e00a      	b.n	80063b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800639c:	f7fe f962 	bl	8004664 <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d901      	bls.n	80063b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e04f      	b.n	8006452 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063b2:	4b2b      	ldr	r3, [pc, #172]	; (8006460 <HAL_RCC_ClockConfig+0x1bc>)
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f003 020c 	and.w	r2, r3, #12
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d1eb      	bne.n	800639c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063c4:	4b25      	ldr	r3, [pc, #148]	; (800645c <HAL_RCC_ClockConfig+0x1b8>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0307 	and.w	r3, r3, #7
 80063cc:	683a      	ldr	r2, [r7, #0]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d20c      	bcs.n	80063ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063d2:	4b22      	ldr	r3, [pc, #136]	; (800645c <HAL_RCC_ClockConfig+0x1b8>)
 80063d4:	683a      	ldr	r2, [r7, #0]
 80063d6:	b2d2      	uxtb	r2, r2
 80063d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063da:	4b20      	ldr	r3, [pc, #128]	; (800645c <HAL_RCC_ClockConfig+0x1b8>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0307 	and.w	r3, r3, #7
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d001      	beq.n	80063ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e032      	b.n	8006452 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0304 	and.w	r3, r3, #4
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d008      	beq.n	800640a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063f8:	4b19      	ldr	r3, [pc, #100]	; (8006460 <HAL_RCC_ClockConfig+0x1bc>)
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	4916      	ldr	r1, [pc, #88]	; (8006460 <HAL_RCC_ClockConfig+0x1bc>)
 8006406:	4313      	orrs	r3, r2
 8006408:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0308 	and.w	r3, r3, #8
 8006412:	2b00      	cmp	r3, #0
 8006414:	d009      	beq.n	800642a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006416:	4b12      	ldr	r3, [pc, #72]	; (8006460 <HAL_RCC_ClockConfig+0x1bc>)
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	00db      	lsls	r3, r3, #3
 8006424:	490e      	ldr	r1, [pc, #56]	; (8006460 <HAL_RCC_ClockConfig+0x1bc>)
 8006426:	4313      	orrs	r3, r2
 8006428:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800642a:	f000 f821 	bl	8006470 <HAL_RCC_GetSysClockFreq>
 800642e:	4602      	mov	r2, r0
 8006430:	4b0b      	ldr	r3, [pc, #44]	; (8006460 <HAL_RCC_ClockConfig+0x1bc>)
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	091b      	lsrs	r3, r3, #4
 8006436:	f003 030f 	and.w	r3, r3, #15
 800643a:	490a      	ldr	r1, [pc, #40]	; (8006464 <HAL_RCC_ClockConfig+0x1c0>)
 800643c:	5ccb      	ldrb	r3, [r1, r3]
 800643e:	fa22 f303 	lsr.w	r3, r2, r3
 8006442:	4a09      	ldr	r2, [pc, #36]	; (8006468 <HAL_RCC_ClockConfig+0x1c4>)
 8006444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006446:	4b09      	ldr	r3, [pc, #36]	; (800646c <HAL_RCC_ClockConfig+0x1c8>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4618      	mov	r0, r3
 800644c:	f7fe f8c6 	bl	80045dc <HAL_InitTick>

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	40023c00 	.word	0x40023c00
 8006460:	40023800 	.word	0x40023800
 8006464:	0800a1ec 	.word	0x0800a1ec
 8006468:	20000020 	.word	0x20000020
 800646c:	20000028 	.word	0x20000028

08006470 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006474:	b094      	sub	sp, #80	; 0x50
 8006476:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006478:	2300      	movs	r3, #0
 800647a:	647b      	str	r3, [r7, #68]	; 0x44
 800647c:	2300      	movs	r3, #0
 800647e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006480:	2300      	movs	r3, #0
 8006482:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006484:	2300      	movs	r3, #0
 8006486:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006488:	4b79      	ldr	r3, [pc, #484]	; (8006670 <HAL_RCC_GetSysClockFreq+0x200>)
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f003 030c 	and.w	r3, r3, #12
 8006490:	2b08      	cmp	r3, #8
 8006492:	d00d      	beq.n	80064b0 <HAL_RCC_GetSysClockFreq+0x40>
 8006494:	2b08      	cmp	r3, #8
 8006496:	f200 80e1 	bhi.w	800665c <HAL_RCC_GetSysClockFreq+0x1ec>
 800649a:	2b00      	cmp	r3, #0
 800649c:	d002      	beq.n	80064a4 <HAL_RCC_GetSysClockFreq+0x34>
 800649e:	2b04      	cmp	r3, #4
 80064a0:	d003      	beq.n	80064aa <HAL_RCC_GetSysClockFreq+0x3a>
 80064a2:	e0db      	b.n	800665c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064a4:	4b73      	ldr	r3, [pc, #460]	; (8006674 <HAL_RCC_GetSysClockFreq+0x204>)
 80064a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80064a8:	e0db      	b.n	8006662 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064aa:	4b73      	ldr	r3, [pc, #460]	; (8006678 <HAL_RCC_GetSysClockFreq+0x208>)
 80064ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80064ae:	e0d8      	b.n	8006662 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064b0:	4b6f      	ldr	r3, [pc, #444]	; (8006670 <HAL_RCC_GetSysClockFreq+0x200>)
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064ba:	4b6d      	ldr	r3, [pc, #436]	; (8006670 <HAL_RCC_GetSysClockFreq+0x200>)
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d063      	beq.n	800658e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064c6:	4b6a      	ldr	r3, [pc, #424]	; (8006670 <HAL_RCC_GetSysClockFreq+0x200>)
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	099b      	lsrs	r3, r3, #6
 80064cc:	2200      	movs	r2, #0
 80064ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80064d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80064d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064d8:	633b      	str	r3, [r7, #48]	; 0x30
 80064da:	2300      	movs	r3, #0
 80064dc:	637b      	str	r3, [r7, #52]	; 0x34
 80064de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80064e2:	4622      	mov	r2, r4
 80064e4:	462b      	mov	r3, r5
 80064e6:	f04f 0000 	mov.w	r0, #0
 80064ea:	f04f 0100 	mov.w	r1, #0
 80064ee:	0159      	lsls	r1, r3, #5
 80064f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064f4:	0150      	lsls	r0, r2, #5
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	4621      	mov	r1, r4
 80064fc:	1a51      	subs	r1, r2, r1
 80064fe:	6139      	str	r1, [r7, #16]
 8006500:	4629      	mov	r1, r5
 8006502:	eb63 0301 	sbc.w	r3, r3, r1
 8006506:	617b      	str	r3, [r7, #20]
 8006508:	f04f 0200 	mov.w	r2, #0
 800650c:	f04f 0300 	mov.w	r3, #0
 8006510:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006514:	4659      	mov	r1, fp
 8006516:	018b      	lsls	r3, r1, #6
 8006518:	4651      	mov	r1, sl
 800651a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800651e:	4651      	mov	r1, sl
 8006520:	018a      	lsls	r2, r1, #6
 8006522:	4651      	mov	r1, sl
 8006524:	ebb2 0801 	subs.w	r8, r2, r1
 8006528:	4659      	mov	r1, fp
 800652a:	eb63 0901 	sbc.w	r9, r3, r1
 800652e:	f04f 0200 	mov.w	r2, #0
 8006532:	f04f 0300 	mov.w	r3, #0
 8006536:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800653a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800653e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006542:	4690      	mov	r8, r2
 8006544:	4699      	mov	r9, r3
 8006546:	4623      	mov	r3, r4
 8006548:	eb18 0303 	adds.w	r3, r8, r3
 800654c:	60bb      	str	r3, [r7, #8]
 800654e:	462b      	mov	r3, r5
 8006550:	eb49 0303 	adc.w	r3, r9, r3
 8006554:	60fb      	str	r3, [r7, #12]
 8006556:	f04f 0200 	mov.w	r2, #0
 800655a:	f04f 0300 	mov.w	r3, #0
 800655e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006562:	4629      	mov	r1, r5
 8006564:	024b      	lsls	r3, r1, #9
 8006566:	4621      	mov	r1, r4
 8006568:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800656c:	4621      	mov	r1, r4
 800656e:	024a      	lsls	r2, r1, #9
 8006570:	4610      	mov	r0, r2
 8006572:	4619      	mov	r1, r3
 8006574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006576:	2200      	movs	r2, #0
 8006578:	62bb      	str	r3, [r7, #40]	; 0x28
 800657a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800657c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006580:	f7fa fb26 	bl	8000bd0 <__aeabi_uldivmod>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	4613      	mov	r3, r2
 800658a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800658c:	e058      	b.n	8006640 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800658e:	4b38      	ldr	r3, [pc, #224]	; (8006670 <HAL_RCC_GetSysClockFreq+0x200>)
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	099b      	lsrs	r3, r3, #6
 8006594:	2200      	movs	r2, #0
 8006596:	4618      	mov	r0, r3
 8006598:	4611      	mov	r1, r2
 800659a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800659e:	623b      	str	r3, [r7, #32]
 80065a0:	2300      	movs	r3, #0
 80065a2:	627b      	str	r3, [r7, #36]	; 0x24
 80065a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80065a8:	4642      	mov	r2, r8
 80065aa:	464b      	mov	r3, r9
 80065ac:	f04f 0000 	mov.w	r0, #0
 80065b0:	f04f 0100 	mov.w	r1, #0
 80065b4:	0159      	lsls	r1, r3, #5
 80065b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065ba:	0150      	lsls	r0, r2, #5
 80065bc:	4602      	mov	r2, r0
 80065be:	460b      	mov	r3, r1
 80065c0:	4641      	mov	r1, r8
 80065c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80065c6:	4649      	mov	r1, r9
 80065c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80065cc:	f04f 0200 	mov.w	r2, #0
 80065d0:	f04f 0300 	mov.w	r3, #0
 80065d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80065d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80065dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80065e0:	ebb2 040a 	subs.w	r4, r2, sl
 80065e4:	eb63 050b 	sbc.w	r5, r3, fp
 80065e8:	f04f 0200 	mov.w	r2, #0
 80065ec:	f04f 0300 	mov.w	r3, #0
 80065f0:	00eb      	lsls	r3, r5, #3
 80065f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065f6:	00e2      	lsls	r2, r4, #3
 80065f8:	4614      	mov	r4, r2
 80065fa:	461d      	mov	r5, r3
 80065fc:	4643      	mov	r3, r8
 80065fe:	18e3      	adds	r3, r4, r3
 8006600:	603b      	str	r3, [r7, #0]
 8006602:	464b      	mov	r3, r9
 8006604:	eb45 0303 	adc.w	r3, r5, r3
 8006608:	607b      	str	r3, [r7, #4]
 800660a:	f04f 0200 	mov.w	r2, #0
 800660e:	f04f 0300 	mov.w	r3, #0
 8006612:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006616:	4629      	mov	r1, r5
 8006618:	028b      	lsls	r3, r1, #10
 800661a:	4621      	mov	r1, r4
 800661c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006620:	4621      	mov	r1, r4
 8006622:	028a      	lsls	r2, r1, #10
 8006624:	4610      	mov	r0, r2
 8006626:	4619      	mov	r1, r3
 8006628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800662a:	2200      	movs	r2, #0
 800662c:	61bb      	str	r3, [r7, #24]
 800662e:	61fa      	str	r2, [r7, #28]
 8006630:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006634:	f7fa facc 	bl	8000bd0 <__aeabi_uldivmod>
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	4613      	mov	r3, r2
 800663e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006640:	4b0b      	ldr	r3, [pc, #44]	; (8006670 <HAL_RCC_GetSysClockFreq+0x200>)
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	0c1b      	lsrs	r3, r3, #16
 8006646:	f003 0303 	and.w	r3, r3, #3
 800664a:	3301      	adds	r3, #1
 800664c:	005b      	lsls	r3, r3, #1
 800664e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006650:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006654:	fbb2 f3f3 	udiv	r3, r2, r3
 8006658:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800665a:	e002      	b.n	8006662 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800665c:	4b05      	ldr	r3, [pc, #20]	; (8006674 <HAL_RCC_GetSysClockFreq+0x204>)
 800665e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006660:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006664:	4618      	mov	r0, r3
 8006666:	3750      	adds	r7, #80	; 0x50
 8006668:	46bd      	mov	sp, r7
 800666a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800666e:	bf00      	nop
 8006670:	40023800 	.word	0x40023800
 8006674:	00f42400 	.word	0x00f42400
 8006678:	007a1200 	.word	0x007a1200

0800667c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800667c:	b480      	push	{r7}
 800667e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006680:	4b03      	ldr	r3, [pc, #12]	; (8006690 <HAL_RCC_GetHCLKFreq+0x14>)
 8006682:	681b      	ldr	r3, [r3, #0]
}
 8006684:	4618      	mov	r0, r3
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	20000020 	.word	0x20000020

08006694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006698:	f7ff fff0 	bl	800667c <HAL_RCC_GetHCLKFreq>
 800669c:	4602      	mov	r2, r0
 800669e:	4b05      	ldr	r3, [pc, #20]	; (80066b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	0a9b      	lsrs	r3, r3, #10
 80066a4:	f003 0307 	and.w	r3, r3, #7
 80066a8:	4903      	ldr	r1, [pc, #12]	; (80066b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066aa:	5ccb      	ldrb	r3, [r1, r3]
 80066ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	40023800 	.word	0x40023800
 80066b8:	0800a1fc 	.word	0x0800a1fc

080066bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80066c0:	f7ff ffdc 	bl	800667c <HAL_RCC_GetHCLKFreq>
 80066c4:	4602      	mov	r2, r0
 80066c6:	4b05      	ldr	r3, [pc, #20]	; (80066dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	0b5b      	lsrs	r3, r3, #13
 80066cc:	f003 0307 	and.w	r3, r3, #7
 80066d0:	4903      	ldr	r1, [pc, #12]	; (80066e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066d2:	5ccb      	ldrb	r3, [r1, r3]
 80066d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066d8:	4618      	mov	r0, r3
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	40023800 	.word	0x40023800
 80066e0:	0800a1fc 	.word	0x0800a1fc

080066e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e07b      	b.n	80067ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d108      	bne.n	8006710 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006706:	d009      	beq.n	800671c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	61da      	str	r2, [r3, #28]
 800670e:	e005      	b.n	800671c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d106      	bne.n	800673c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7fd f8e4 	bl	8003904 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2202      	movs	r2, #2
 8006740:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006752:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006764:	431a      	orrs	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800676e:	431a      	orrs	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	f003 0302 	and.w	r3, r3, #2
 8006778:	431a      	orrs	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	431a      	orrs	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	699b      	ldr	r3, [r3, #24]
 8006788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800678c:	431a      	orrs	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006796:	431a      	orrs	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a0:	ea42 0103 	orr.w	r1, r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	0c1b      	lsrs	r3, r3, #16
 80067ba:	f003 0104 	and.w	r1, r3, #4
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c2:	f003 0210 	and.w	r2, r3, #16
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	69da      	ldr	r2, [r3, #28]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b088      	sub	sp, #32
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	60f8      	str	r0, [r7, #12]
 80067fe:	60b9      	str	r1, [r7, #8]
 8006800:	603b      	str	r3, [r7, #0]
 8006802:	4613      	mov	r3, r2
 8006804:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006810:	2b01      	cmp	r3, #1
 8006812:	d101      	bne.n	8006818 <HAL_SPI_Transmit+0x22>
 8006814:	2302      	movs	r3, #2
 8006816:	e126      	b.n	8006a66 <HAL_SPI_Transmit+0x270>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006820:	f7fd ff20 	bl	8004664 <HAL_GetTick>
 8006824:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006826:	88fb      	ldrh	r3, [r7, #6]
 8006828:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b01      	cmp	r3, #1
 8006834:	d002      	beq.n	800683c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006836:	2302      	movs	r3, #2
 8006838:	77fb      	strb	r3, [r7, #31]
    goto error;
 800683a:	e10b      	b.n	8006a54 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d002      	beq.n	8006848 <HAL_SPI_Transmit+0x52>
 8006842:	88fb      	ldrh	r3, [r7, #6]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d102      	bne.n	800684e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800684c:	e102      	b.n	8006a54 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2203      	movs	r2, #3
 8006852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	88fa      	ldrh	r2, [r7, #6]
 8006866:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	88fa      	ldrh	r2, [r7, #6]
 800686c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006894:	d10f      	bne.n	80068b6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c0:	2b40      	cmp	r3, #64	; 0x40
 80068c2:	d007      	beq.n	80068d4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068dc:	d14b      	bne.n	8006976 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d002      	beq.n	80068ec <HAL_SPI_Transmit+0xf6>
 80068e6:	8afb      	ldrh	r3, [r7, #22]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d13e      	bne.n	800696a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f0:	881a      	ldrh	r2, [r3, #0]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fc:	1c9a      	adds	r2, r3, #2
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006906:	b29b      	uxth	r3, r3
 8006908:	3b01      	subs	r3, #1
 800690a:	b29a      	uxth	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006910:	e02b      	b.n	800696a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f003 0302 	and.w	r3, r3, #2
 800691c:	2b02      	cmp	r3, #2
 800691e:	d112      	bne.n	8006946 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006924:	881a      	ldrh	r2, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006930:	1c9a      	adds	r2, r3, #2
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800693a:	b29b      	uxth	r3, r3
 800693c:	3b01      	subs	r3, #1
 800693e:	b29a      	uxth	r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	86da      	strh	r2, [r3, #54]	; 0x36
 8006944:	e011      	b.n	800696a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006946:	f7fd fe8d 	bl	8004664 <HAL_GetTick>
 800694a:	4602      	mov	r2, r0
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	429a      	cmp	r2, r3
 8006954:	d803      	bhi.n	800695e <HAL_SPI_Transmit+0x168>
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695c:	d102      	bne.n	8006964 <HAL_SPI_Transmit+0x16e>
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d102      	bne.n	800696a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006968:	e074      	b.n	8006a54 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800696e:	b29b      	uxth	r3, r3
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1ce      	bne.n	8006912 <HAL_SPI_Transmit+0x11c>
 8006974:	e04c      	b.n	8006a10 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d002      	beq.n	8006984 <HAL_SPI_Transmit+0x18e>
 800697e:	8afb      	ldrh	r3, [r7, #22]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d140      	bne.n	8006a06 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	330c      	adds	r3, #12
 800698e:	7812      	ldrb	r2, [r2, #0]
 8006990:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006996:	1c5a      	adds	r2, r3, #1
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	3b01      	subs	r3, #1
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80069aa:	e02c      	b.n	8006a06 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d113      	bne.n	80069e2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	330c      	adds	r3, #12
 80069c4:	7812      	ldrb	r2, [r2, #0]
 80069c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069cc:	1c5a      	adds	r2, r3, #1
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	3b01      	subs	r3, #1
 80069da:	b29a      	uxth	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	86da      	strh	r2, [r3, #54]	; 0x36
 80069e0:	e011      	b.n	8006a06 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069e2:	f7fd fe3f 	bl	8004664 <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	683a      	ldr	r2, [r7, #0]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d803      	bhi.n	80069fa <HAL_SPI_Transmit+0x204>
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f8:	d102      	bne.n	8006a00 <HAL_SPI_Transmit+0x20a>
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d102      	bne.n	8006a06 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006a04:	e026      	b.n	8006a54 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1cd      	bne.n	80069ac <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a10:	69ba      	ldr	r2, [r7, #24]
 8006a12:	6839      	ldr	r1, [r7, #0]
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f000 fb2b 	bl	8007070 <SPI_EndRxTxTransaction>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d002      	beq.n	8006a26 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2220      	movs	r2, #32
 8006a24:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10a      	bne.n	8006a44 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a2e:	2300      	movs	r3, #0
 8006a30:	613b      	str	r3, [r7, #16]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	613b      	str	r3, [r7, #16]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	613b      	str	r3, [r7, #16]
 8006a42:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d002      	beq.n	8006a52 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	77fb      	strb	r3, [r7, #31]
 8006a50:	e000      	b.n	8006a54 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006a52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a64:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3720      	adds	r7, #32
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
	...

08006a70 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d101      	bne.n	8006a90 <HAL_SPI_Transmit_DMA+0x20>
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	e09b      	b.n	8006bc8 <HAL_SPI_Transmit_DMA+0x158>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d002      	beq.n	8006aaa <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006aa8:	e089      	b.n	8006bbe <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d002      	beq.n	8006ab6 <HAL_SPI_Transmit_DMA+0x46>
 8006ab0:	88fb      	ldrh	r3, [r7, #6]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d102      	bne.n	8006abc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006aba:	e080      	b.n	8006bbe <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2203      	movs	r2, #3
 8006ac0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	88fa      	ldrh	r2, [r7, #6]
 8006ad4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	88fa      	ldrh	r2, [r7, #6]
 8006ada:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b02:	d10f      	bne.n	8006b24 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b12:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b22:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b28:	4a29      	ldr	r2, [pc, #164]	; (8006bd0 <HAL_SPI_Transmit_DMA+0x160>)
 8006b2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b30:	4a28      	ldr	r2, [pc, #160]	; (8006bd4 <HAL_SPI_Transmit_DMA+0x164>)
 8006b32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b38:	4a27      	ldr	r2, [pc, #156]	; (8006bd8 <HAL_SPI_Transmit_DMA+0x168>)
 8006b3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b40:	2200      	movs	r2, #0
 8006b42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	330c      	adds	r3, #12
 8006b54:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b5a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006b5c:	f7fe fbca 	bl	80052f4 <HAL_DMA_Start_IT>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00c      	beq.n	8006b80 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b6a:	f043 0210 	orr.w	r2, r3, #16
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006b7e:	e01e      	b.n	8006bbe <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8a:	2b40      	cmp	r3, #64	; 0x40
 8006b8c:	d007      	beq.n	8006b9e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b9c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f042 0220 	orr.w	r2, r2, #32
 8006bac:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	685a      	ldr	r2, [r3, #4]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f042 0202 	orr.w	r2, r2, #2
 8006bbc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3718      	adds	r7, #24
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	08006edd 	.word	0x08006edd
 8006bd4:	08006e35 	.word	0x08006e35
 8006bd8:	08006ef9 	.word	0x08006ef9

08006bdc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b088      	sub	sp, #32
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	099b      	lsrs	r3, r3, #6
 8006bf8:	f003 0301 	and.w	r3, r3, #1
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10f      	bne.n	8006c20 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00a      	beq.n	8006c20 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	099b      	lsrs	r3, r3, #6
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d004      	beq.n	8006c20 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	4798      	blx	r3
    return;
 8006c1e:	e0d7      	b.n	8006dd0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	085b      	lsrs	r3, r3, #1
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00a      	beq.n	8006c42 <HAL_SPI_IRQHandler+0x66>
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	09db      	lsrs	r3, r3, #7
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d004      	beq.n	8006c42 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	4798      	blx	r3
    return;
 8006c40:	e0c6      	b.n	8006dd0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	095b      	lsrs	r3, r3, #5
 8006c46:	f003 0301 	and.w	r3, r3, #1
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10c      	bne.n	8006c68 <HAL_SPI_IRQHandler+0x8c>
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	099b      	lsrs	r3, r3, #6
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d106      	bne.n	8006c68 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	0a1b      	lsrs	r3, r3, #8
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f000 80b4 	beq.w	8006dd0 <HAL_SPI_IRQHandler+0x1f4>
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	095b      	lsrs	r3, r3, #5
 8006c6c:	f003 0301 	and.w	r3, r3, #1
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 80ad 	beq.w	8006dd0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	099b      	lsrs	r3, r3, #6
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d023      	beq.n	8006cca <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b03      	cmp	r3, #3
 8006c8c:	d011      	beq.n	8006cb2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c92:	f043 0204 	orr.w	r2, r3, #4
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	617b      	str	r3, [r7, #20]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	617b      	str	r3, [r7, #20]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	617b      	str	r3, [r7, #20]
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	e00b      	b.n	8006cca <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	613b      	str	r3, [r7, #16]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	613b      	str	r3, [r7, #16]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	613b      	str	r3, [r7, #16]
 8006cc6:	693b      	ldr	r3, [r7, #16]
        return;
 8006cc8:	e082      	b.n	8006dd0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	095b      	lsrs	r3, r3, #5
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d014      	beq.n	8006d00 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cda:	f043 0201 	orr.w	r2, r3, #1
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60fb      	str	r3, [r7, #12]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	60fb      	str	r3, [r7, #12]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	0a1b      	lsrs	r3, r3, #8
 8006d04:	f003 0301 	and.w	r3, r3, #1
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00c      	beq.n	8006d26 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d10:	f043 0208 	orr.w	r2, r3, #8
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006d18:	2300      	movs	r3, #0
 8006d1a:	60bb      	str	r3, [r7, #8]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	60bb      	str	r3, [r7, #8]
 8006d24:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d04f      	beq.n	8006dce <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	685a      	ldr	r2, [r3, #4]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d3c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	f003 0302 	and.w	r3, r3, #2
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d104      	bne.n	8006d5a <HAL_SPI_IRQHandler+0x17e>
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	f003 0301 	and.w	r3, r3, #1
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d034      	beq.n	8006dc4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f022 0203 	bic.w	r2, r2, #3
 8006d68:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d011      	beq.n	8006d96 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d76:	4a18      	ldr	r2, [pc, #96]	; (8006dd8 <HAL_SPI_IRQHandler+0x1fc>)
 8006d78:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fe fb80 	bl	8005484 <HAL_DMA_Abort_IT>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d005      	beq.n	8006d96 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d016      	beq.n	8006dcc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006da2:	4a0d      	ldr	r2, [pc, #52]	; (8006dd8 <HAL_SPI_IRQHandler+0x1fc>)
 8006da4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fe fb6a 	bl	8005484 <HAL_DMA_Abort_IT>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00a      	beq.n	8006dcc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006dc2:	e003      	b.n	8006dcc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f81d 	bl	8006e04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006dca:	e000      	b.n	8006dce <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006dcc:	bf00      	nop
    return;
 8006dce:	bf00      	nop
  }
}
 8006dd0:	3720      	adds	r7, #32
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	08006f39 	.word	0x08006f39

08006ddc <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e26:	b2db      	uxtb	r3, r3
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e40:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e42:	f7fd fc0f 	bl	8004664 <HAL_GetTick>
 8006e46:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e56:	d03b      	beq.n	8006ed0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f022 0220 	bic.w	r2, r2, #32
 8006e66:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f022 0202 	bic.w	r2, r2, #2
 8006e76:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	2164      	movs	r1, #100	; 0x64
 8006e7c:	6978      	ldr	r0, [r7, #20]
 8006e7e:	f000 f8f7 	bl	8007070 <SPI_EndRxTxTransaction>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d005      	beq.n	8006e94 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e8c:	f043 0220 	orr.w	r2, r3, #32
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10a      	bne.n	8006eb2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	60fb      	str	r3, [r7, #12]
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	60fb      	str	r3, [r7, #12]
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	60fb      	str	r3, [r7, #12]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d003      	beq.n	8006ed0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006ec8:	6978      	ldr	r0, [r7, #20]
 8006eca:	f7ff ff9b 	bl	8006e04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006ece:	e002      	b.n	8006ed6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006ed0:	6978      	ldr	r0, [r7, #20]
 8006ed2:	f7ff ff83 	bl	8006ddc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ed6:	3718      	adds	r7, #24
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f7ff ff80 	bl	8006df0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ef0:	bf00      	nop
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f04:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	685a      	ldr	r2, [r3, #4]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f022 0203 	bic.w	r2, r2, #3
 8006f14:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f1a:	f043 0210 	orr.w	r2, r3, #16
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f7ff ff6a 	bl	8006e04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f30:	bf00      	nop
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f44:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f7ff ff56 	bl	8006e04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f58:	bf00      	nop
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b088      	sub	sp, #32
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	603b      	str	r3, [r7, #0]
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f70:	f7fd fb78 	bl	8004664 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f78:	1a9b      	subs	r3, r3, r2
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f80:	f7fd fb70 	bl	8004664 <HAL_GetTick>
 8006f84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f86:	4b39      	ldr	r3, [pc, #228]	; (800706c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	015b      	lsls	r3, r3, #5
 8006f8c:	0d1b      	lsrs	r3, r3, #20
 8006f8e:	69fa      	ldr	r2, [r7, #28]
 8006f90:	fb02 f303 	mul.w	r3, r2, r3
 8006f94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f96:	e054      	b.n	8007042 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9e:	d050      	beq.n	8007042 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006fa0:	f7fd fb60 	bl	8004664 <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	69fa      	ldr	r2, [r7, #28]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d902      	bls.n	8006fb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d13d      	bne.n	8007032 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006fc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fce:	d111      	bne.n	8006ff4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fd8:	d004      	beq.n	8006fe4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fe2:	d107      	bne.n	8006ff4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ff2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ffc:	d10f      	bne.n	800701e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800701c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e017      	b.n	8007062 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d101      	bne.n	800703c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007038:	2300      	movs	r3, #0
 800703a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	3b01      	subs	r3, #1
 8007040:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	689a      	ldr	r2, [r3, #8]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	4013      	ands	r3, r2
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	429a      	cmp	r2, r3
 8007050:	bf0c      	ite	eq
 8007052:	2301      	moveq	r3, #1
 8007054:	2300      	movne	r3, #0
 8007056:	b2db      	uxtb	r3, r3
 8007058:	461a      	mov	r2, r3
 800705a:	79fb      	ldrb	r3, [r7, #7]
 800705c:	429a      	cmp	r2, r3
 800705e:	d19b      	bne.n	8006f98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3720      	adds	r7, #32
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	20000020 	.word	0x20000020

08007070 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b088      	sub	sp, #32
 8007074:	af02      	add	r7, sp, #8
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800707c:	4b1b      	ldr	r3, [pc, #108]	; (80070ec <SPI_EndRxTxTransaction+0x7c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a1b      	ldr	r2, [pc, #108]	; (80070f0 <SPI_EndRxTxTransaction+0x80>)
 8007082:	fba2 2303 	umull	r2, r3, r2, r3
 8007086:	0d5b      	lsrs	r3, r3, #21
 8007088:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800708c:	fb02 f303 	mul.w	r3, r2, r3
 8007090:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800709a:	d112      	bne.n	80070c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	9300      	str	r3, [sp, #0]
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	2200      	movs	r2, #0
 80070a4:	2180      	movs	r1, #128	; 0x80
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f7ff ff5a 	bl	8006f60 <SPI_WaitFlagStateUntilTimeout>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d016      	beq.n	80070e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b6:	f043 0220 	orr.w	r2, r3, #32
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e00f      	b.n	80070e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00a      	beq.n	80070de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	3b01      	subs	r3, #1
 80070cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070d8:	2b80      	cmp	r3, #128	; 0x80
 80070da:	d0f2      	beq.n	80070c2 <SPI_EndRxTxTransaction+0x52>
 80070dc:	e000      	b.n	80070e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80070de:	bf00      	nop
  }

  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3718      	adds	r7, #24
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	20000020 	.word	0x20000020
 80070f0:	165e9f81 	.word	0x165e9f81

080070f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e041      	b.n	800718a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b00      	cmp	r3, #0
 8007110:	d106      	bne.n	8007120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7fc fd92 	bl	8003c44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	3304      	adds	r3, #4
 8007130:	4619      	mov	r1, r3
 8007132:	4610      	mov	r0, r2
 8007134:	f000 fc12 	bl	800795c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b082      	sub	sp, #8
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d101      	bne.n	80071a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	e041      	b.n	8007228 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d106      	bne.n	80071be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f839 	bl	8007230 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2202      	movs	r2, #2
 80071c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	3304      	adds	r3, #4
 80071ce:	4619      	mov	r1, r3
 80071d0:	4610      	mov	r0, r2
 80071d2:	f000 fbc3 	bl	800795c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2201      	movs	r2, #1
 800721a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d109      	bne.n	8007268 <HAL_TIM_PWM_Start+0x24>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800725a:	b2db      	uxtb	r3, r3
 800725c:	2b01      	cmp	r3, #1
 800725e:	bf14      	ite	ne
 8007260:	2301      	movne	r3, #1
 8007262:	2300      	moveq	r3, #0
 8007264:	b2db      	uxtb	r3, r3
 8007266:	e022      	b.n	80072ae <HAL_TIM_PWM_Start+0x6a>
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	2b04      	cmp	r3, #4
 800726c:	d109      	bne.n	8007282 <HAL_TIM_PWM_Start+0x3e>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b01      	cmp	r3, #1
 8007278:	bf14      	ite	ne
 800727a:	2301      	movne	r3, #1
 800727c:	2300      	moveq	r3, #0
 800727e:	b2db      	uxtb	r3, r3
 8007280:	e015      	b.n	80072ae <HAL_TIM_PWM_Start+0x6a>
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	2b08      	cmp	r3, #8
 8007286:	d109      	bne.n	800729c <HAL_TIM_PWM_Start+0x58>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b01      	cmp	r3, #1
 8007292:	bf14      	ite	ne
 8007294:	2301      	movne	r3, #1
 8007296:	2300      	moveq	r3, #0
 8007298:	b2db      	uxtb	r3, r3
 800729a:	e008      	b.n	80072ae <HAL_TIM_PWM_Start+0x6a>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	bf14      	ite	ne
 80072a8:	2301      	movne	r3, #1
 80072aa:	2300      	moveq	r3, #0
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d001      	beq.n	80072b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e07c      	b.n	80073b0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d104      	bne.n	80072c6 <HAL_TIM_PWM_Start+0x82>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2202      	movs	r2, #2
 80072c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072c4:	e013      	b.n	80072ee <HAL_TIM_PWM_Start+0xaa>
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	2b04      	cmp	r3, #4
 80072ca:	d104      	bne.n	80072d6 <HAL_TIM_PWM_Start+0x92>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2202      	movs	r2, #2
 80072d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072d4:	e00b      	b.n	80072ee <HAL_TIM_PWM_Start+0xaa>
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	2b08      	cmp	r3, #8
 80072da:	d104      	bne.n	80072e6 <HAL_TIM_PWM_Start+0xa2>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2202      	movs	r2, #2
 80072e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072e4:	e003      	b.n	80072ee <HAL_TIM_PWM_Start+0xaa>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2202      	movs	r2, #2
 80072ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2201      	movs	r2, #1
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 fe1a 	bl	8007f30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a2d      	ldr	r2, [pc, #180]	; (80073b8 <HAL_TIM_PWM_Start+0x174>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d004      	beq.n	8007310 <HAL_TIM_PWM_Start+0xcc>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a2c      	ldr	r2, [pc, #176]	; (80073bc <HAL_TIM_PWM_Start+0x178>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d101      	bne.n	8007314 <HAL_TIM_PWM_Start+0xd0>
 8007310:	2301      	movs	r3, #1
 8007312:	e000      	b.n	8007316 <HAL_TIM_PWM_Start+0xd2>
 8007314:	2300      	movs	r3, #0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d007      	beq.n	800732a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007328:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a22      	ldr	r2, [pc, #136]	; (80073b8 <HAL_TIM_PWM_Start+0x174>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d022      	beq.n	800737a <HAL_TIM_PWM_Start+0x136>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800733c:	d01d      	beq.n	800737a <HAL_TIM_PWM_Start+0x136>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a1f      	ldr	r2, [pc, #124]	; (80073c0 <HAL_TIM_PWM_Start+0x17c>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d018      	beq.n	800737a <HAL_TIM_PWM_Start+0x136>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a1d      	ldr	r2, [pc, #116]	; (80073c4 <HAL_TIM_PWM_Start+0x180>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d013      	beq.n	800737a <HAL_TIM_PWM_Start+0x136>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a1c      	ldr	r2, [pc, #112]	; (80073c8 <HAL_TIM_PWM_Start+0x184>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d00e      	beq.n	800737a <HAL_TIM_PWM_Start+0x136>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a16      	ldr	r2, [pc, #88]	; (80073bc <HAL_TIM_PWM_Start+0x178>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d009      	beq.n	800737a <HAL_TIM_PWM_Start+0x136>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a18      	ldr	r2, [pc, #96]	; (80073cc <HAL_TIM_PWM_Start+0x188>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d004      	beq.n	800737a <HAL_TIM_PWM_Start+0x136>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a16      	ldr	r2, [pc, #88]	; (80073d0 <HAL_TIM_PWM_Start+0x18c>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d111      	bne.n	800739e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	f003 0307 	and.w	r3, r3, #7
 8007384:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2b06      	cmp	r3, #6
 800738a:	d010      	beq.n	80073ae <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f042 0201 	orr.w	r2, r2, #1
 800739a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800739c:	e007      	b.n	80073ae <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f042 0201 	orr.w	r2, r2, #1
 80073ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	40010000 	.word	0x40010000
 80073bc:	40010400 	.word	0x40010400
 80073c0:	40000400 	.word	0x40000400
 80073c4:	40000800 	.word	0x40000800
 80073c8:	40000c00 	.word	0x40000c00
 80073cc:	40014000 	.word	0x40014000
 80073d0:	40001800 	.word	0x40001800

080073d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	f003 0302 	and.w	r3, r3, #2
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	d122      	bne.n	8007430 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	f003 0302 	and.w	r3, r3, #2
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d11b      	bne.n	8007430 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f06f 0202 	mvn.w	r2, #2
 8007400:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	f003 0303 	and.w	r3, r3, #3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fa81 	bl	800791e <HAL_TIM_IC_CaptureCallback>
 800741c:	e005      	b.n	800742a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fa73 	bl	800790a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fa84 	bl	8007932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	f003 0304 	and.w	r3, r3, #4
 800743a:	2b04      	cmp	r3, #4
 800743c:	d122      	bne.n	8007484 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	f003 0304 	and.w	r3, r3, #4
 8007448:	2b04      	cmp	r3, #4
 800744a:	d11b      	bne.n	8007484 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f06f 0204 	mvn.w	r2, #4
 8007454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2202      	movs	r2, #2
 800745a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007466:	2b00      	cmp	r3, #0
 8007468:	d003      	beq.n	8007472 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fa57 	bl	800791e <HAL_TIM_IC_CaptureCallback>
 8007470:	e005      	b.n	800747e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fa49 	bl	800790a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fa5a 	bl	8007932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	f003 0308 	and.w	r3, r3, #8
 800748e:	2b08      	cmp	r3, #8
 8007490:	d122      	bne.n	80074d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	f003 0308 	and.w	r3, r3, #8
 800749c:	2b08      	cmp	r3, #8
 800749e:	d11b      	bne.n	80074d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f06f 0208 	mvn.w	r2, #8
 80074a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2204      	movs	r2, #4
 80074ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	f003 0303 	and.w	r3, r3, #3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d003      	beq.n	80074c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fa2d 	bl	800791e <HAL_TIM_IC_CaptureCallback>
 80074c4:	e005      	b.n	80074d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fa1f 	bl	800790a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fa30 	bl	8007932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	f003 0310 	and.w	r3, r3, #16
 80074e2:	2b10      	cmp	r3, #16
 80074e4:	d122      	bne.n	800752c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	f003 0310 	and.w	r3, r3, #16
 80074f0:	2b10      	cmp	r3, #16
 80074f2:	d11b      	bne.n	800752c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f06f 0210 	mvn.w	r2, #16
 80074fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2208      	movs	r2, #8
 8007502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	69db      	ldr	r3, [r3, #28]
 800750a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800750e:	2b00      	cmp	r3, #0
 8007510:	d003      	beq.n	800751a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fa03 	bl	800791e <HAL_TIM_IC_CaptureCallback>
 8007518:	e005      	b.n	8007526 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f9f5 	bl	800790a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fa06 	bl	8007932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	2b01      	cmp	r3, #1
 8007538:	d10e      	bne.n	8007558 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	f003 0301 	and.w	r3, r3, #1
 8007544:	2b01      	cmp	r3, #1
 8007546:	d107      	bne.n	8007558 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f06f 0201 	mvn.w	r2, #1
 8007550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f9cf 	bl	80078f6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007562:	2b80      	cmp	r3, #128	; 0x80
 8007564:	d10e      	bne.n	8007584 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007570:	2b80      	cmp	r3, #128	; 0x80
 8007572:	d107      	bne.n	8007584 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800757c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 fd82 	bl	8008088 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800758e:	2b40      	cmp	r3, #64	; 0x40
 8007590:	d10e      	bne.n	80075b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800759c:	2b40      	cmp	r3, #64	; 0x40
 800759e:	d107      	bne.n	80075b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f9cb 	bl	8007946 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	f003 0320 	and.w	r3, r3, #32
 80075ba:	2b20      	cmp	r3, #32
 80075bc:	d10e      	bne.n	80075dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	f003 0320 	and.w	r3, r3, #32
 80075c8:	2b20      	cmp	r3, #32
 80075ca:	d107      	bne.n	80075dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f06f 0220 	mvn.w	r2, #32
 80075d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fd4c 	bl	8008074 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075dc:	bf00      	nop
 80075de:	3708      	adds	r7, #8
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075f0:	2300      	movs	r3, #0
 80075f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d101      	bne.n	8007602 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80075fe:	2302      	movs	r3, #2
 8007600:	e0ae      	b.n	8007760 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2b0c      	cmp	r3, #12
 800760e:	f200 809f 	bhi.w	8007750 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007612:	a201      	add	r2, pc, #4	; (adr r2, 8007618 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007618:	0800764d 	.word	0x0800764d
 800761c:	08007751 	.word	0x08007751
 8007620:	08007751 	.word	0x08007751
 8007624:	08007751 	.word	0x08007751
 8007628:	0800768d 	.word	0x0800768d
 800762c:	08007751 	.word	0x08007751
 8007630:	08007751 	.word	0x08007751
 8007634:	08007751 	.word	0x08007751
 8007638:	080076cf 	.word	0x080076cf
 800763c:	08007751 	.word	0x08007751
 8007640:	08007751 	.word	0x08007751
 8007644:	08007751 	.word	0x08007751
 8007648:	0800770f 	.word	0x0800770f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68b9      	ldr	r1, [r7, #8]
 8007652:	4618      	mov	r0, r3
 8007654:	f000 fa22 	bl	8007a9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	699a      	ldr	r2, [r3, #24]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f042 0208 	orr.w	r2, r2, #8
 8007666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	699a      	ldr	r2, [r3, #24]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f022 0204 	bic.w	r2, r2, #4
 8007676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6999      	ldr	r1, [r3, #24]
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	691a      	ldr	r2, [r3, #16]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	430a      	orrs	r2, r1
 8007688:	619a      	str	r2, [r3, #24]
      break;
 800768a:	e064      	b.n	8007756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68b9      	ldr	r1, [r7, #8]
 8007692:	4618      	mov	r0, r3
 8007694:	f000 fa72 	bl	8007b7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	699a      	ldr	r2, [r3, #24]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	699a      	ldr	r2, [r3, #24]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6999      	ldr	r1, [r3, #24]
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	021a      	lsls	r2, r3, #8
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	430a      	orrs	r2, r1
 80076ca:	619a      	str	r2, [r3, #24]
      break;
 80076cc:	e043      	b.n	8007756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68b9      	ldr	r1, [r7, #8]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 fac7 	bl	8007c68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	69da      	ldr	r2, [r3, #28]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f042 0208 	orr.w	r2, r2, #8
 80076e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	69da      	ldr	r2, [r3, #28]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f022 0204 	bic.w	r2, r2, #4
 80076f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	69d9      	ldr	r1, [r3, #28]
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	691a      	ldr	r2, [r3, #16]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	430a      	orrs	r2, r1
 800770a:	61da      	str	r2, [r3, #28]
      break;
 800770c:	e023      	b.n	8007756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68b9      	ldr	r1, [r7, #8]
 8007714:	4618      	mov	r0, r3
 8007716:	f000 fb1b 	bl	8007d50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	69da      	ldr	r2, [r3, #28]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	69da      	ldr	r2, [r3, #28]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	69d9      	ldr	r1, [r3, #28]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	021a      	lsls	r2, r3, #8
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	430a      	orrs	r2, r1
 800774c:	61da      	str	r2, [r3, #28]
      break;
 800774e:	e002      	b.n	8007756 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	75fb      	strb	r3, [r7, #23]
      break;
 8007754:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800775e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007760:	4618      	mov	r0, r3
 8007762:	3718      	adds	r7, #24
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007772:	2300      	movs	r3, #0
 8007774:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800777c:	2b01      	cmp	r3, #1
 800777e:	d101      	bne.n	8007784 <HAL_TIM_ConfigClockSource+0x1c>
 8007780:	2302      	movs	r3, #2
 8007782:	e0b4      	b.n	80078ee <HAL_TIM_ConfigClockSource+0x186>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2202      	movs	r2, #2
 8007790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80077a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077bc:	d03e      	beq.n	800783c <HAL_TIM_ConfigClockSource+0xd4>
 80077be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077c2:	f200 8087 	bhi.w	80078d4 <HAL_TIM_ConfigClockSource+0x16c>
 80077c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ca:	f000 8086 	beq.w	80078da <HAL_TIM_ConfigClockSource+0x172>
 80077ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077d2:	d87f      	bhi.n	80078d4 <HAL_TIM_ConfigClockSource+0x16c>
 80077d4:	2b70      	cmp	r3, #112	; 0x70
 80077d6:	d01a      	beq.n	800780e <HAL_TIM_ConfigClockSource+0xa6>
 80077d8:	2b70      	cmp	r3, #112	; 0x70
 80077da:	d87b      	bhi.n	80078d4 <HAL_TIM_ConfigClockSource+0x16c>
 80077dc:	2b60      	cmp	r3, #96	; 0x60
 80077de:	d050      	beq.n	8007882 <HAL_TIM_ConfigClockSource+0x11a>
 80077e0:	2b60      	cmp	r3, #96	; 0x60
 80077e2:	d877      	bhi.n	80078d4 <HAL_TIM_ConfigClockSource+0x16c>
 80077e4:	2b50      	cmp	r3, #80	; 0x50
 80077e6:	d03c      	beq.n	8007862 <HAL_TIM_ConfigClockSource+0xfa>
 80077e8:	2b50      	cmp	r3, #80	; 0x50
 80077ea:	d873      	bhi.n	80078d4 <HAL_TIM_ConfigClockSource+0x16c>
 80077ec:	2b40      	cmp	r3, #64	; 0x40
 80077ee:	d058      	beq.n	80078a2 <HAL_TIM_ConfigClockSource+0x13a>
 80077f0:	2b40      	cmp	r3, #64	; 0x40
 80077f2:	d86f      	bhi.n	80078d4 <HAL_TIM_ConfigClockSource+0x16c>
 80077f4:	2b30      	cmp	r3, #48	; 0x30
 80077f6:	d064      	beq.n	80078c2 <HAL_TIM_ConfigClockSource+0x15a>
 80077f8:	2b30      	cmp	r3, #48	; 0x30
 80077fa:	d86b      	bhi.n	80078d4 <HAL_TIM_ConfigClockSource+0x16c>
 80077fc:	2b20      	cmp	r3, #32
 80077fe:	d060      	beq.n	80078c2 <HAL_TIM_ConfigClockSource+0x15a>
 8007800:	2b20      	cmp	r3, #32
 8007802:	d867      	bhi.n	80078d4 <HAL_TIM_ConfigClockSource+0x16c>
 8007804:	2b00      	cmp	r3, #0
 8007806:	d05c      	beq.n	80078c2 <HAL_TIM_ConfigClockSource+0x15a>
 8007808:	2b10      	cmp	r3, #16
 800780a:	d05a      	beq.n	80078c2 <HAL_TIM_ConfigClockSource+0x15a>
 800780c:	e062      	b.n	80078d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6818      	ldr	r0, [r3, #0]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	6899      	ldr	r1, [r3, #8]
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	f000 fb67 	bl	8007ef0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007830:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	609a      	str	r2, [r3, #8]
      break;
 800783a:	e04f      	b.n	80078dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6818      	ldr	r0, [r3, #0]
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	6899      	ldr	r1, [r3, #8]
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	685a      	ldr	r2, [r3, #4]
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	f000 fb50 	bl	8007ef0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	689a      	ldr	r2, [r3, #8]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800785e:	609a      	str	r2, [r3, #8]
      break;
 8007860:	e03c      	b.n	80078dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6818      	ldr	r0, [r3, #0]
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	6859      	ldr	r1, [r3, #4]
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	461a      	mov	r2, r3
 8007870:	f000 fac4 	bl	8007dfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2150      	movs	r1, #80	; 0x50
 800787a:	4618      	mov	r0, r3
 800787c:	f000 fb1d 	bl	8007eba <TIM_ITRx_SetConfig>
      break;
 8007880:	e02c      	b.n	80078dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6818      	ldr	r0, [r3, #0]
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	6859      	ldr	r1, [r3, #4]
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	461a      	mov	r2, r3
 8007890:	f000 fae3 	bl	8007e5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2160      	movs	r1, #96	; 0x60
 800789a:	4618      	mov	r0, r3
 800789c:	f000 fb0d 	bl	8007eba <TIM_ITRx_SetConfig>
      break;
 80078a0:	e01c      	b.n	80078dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6818      	ldr	r0, [r3, #0]
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	6859      	ldr	r1, [r3, #4]
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	461a      	mov	r2, r3
 80078b0:	f000 faa4 	bl	8007dfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2140      	movs	r1, #64	; 0x40
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 fafd 	bl	8007eba <TIM_ITRx_SetConfig>
      break;
 80078c0:	e00c      	b.n	80078dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4619      	mov	r1, r3
 80078cc:	4610      	mov	r0, r2
 80078ce:	f000 faf4 	bl	8007eba <TIM_ITRx_SetConfig>
      break;
 80078d2:	e003      	b.n	80078dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	73fb      	strb	r3, [r7, #15]
      break;
 80078d8:	e000      	b.n	80078dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80078da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b083      	sub	sp, #12
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80078fe:	bf00      	nop
 8007900:	370c      	adds	r7, #12
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr

0800790a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800790a:	b480      	push	{r7}
 800790c:	b083      	sub	sp, #12
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007912:	bf00      	nop
 8007914:	370c      	adds	r7, #12
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr

0800791e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800791e:	b480      	push	{r7}
 8007920:	b083      	sub	sp, #12
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007926:	bf00      	nop
 8007928:	370c      	adds	r7, #12
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007932:	b480      	push	{r7}
 8007934:	b083      	sub	sp, #12
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800793a:	bf00      	nop
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007946:	b480      	push	{r7}
 8007948:	b083      	sub	sp, #12
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800794e:	bf00      	nop
 8007950:	370c      	adds	r7, #12
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
	...

0800795c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a40      	ldr	r2, [pc, #256]	; (8007a70 <TIM_Base_SetConfig+0x114>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d013      	beq.n	800799c <TIM_Base_SetConfig+0x40>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800797a:	d00f      	beq.n	800799c <TIM_Base_SetConfig+0x40>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a3d      	ldr	r2, [pc, #244]	; (8007a74 <TIM_Base_SetConfig+0x118>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d00b      	beq.n	800799c <TIM_Base_SetConfig+0x40>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a3c      	ldr	r2, [pc, #240]	; (8007a78 <TIM_Base_SetConfig+0x11c>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d007      	beq.n	800799c <TIM_Base_SetConfig+0x40>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a3b      	ldr	r2, [pc, #236]	; (8007a7c <TIM_Base_SetConfig+0x120>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d003      	beq.n	800799c <TIM_Base_SetConfig+0x40>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a3a      	ldr	r2, [pc, #232]	; (8007a80 <TIM_Base_SetConfig+0x124>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d108      	bne.n	80079ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a2f      	ldr	r2, [pc, #188]	; (8007a70 <TIM_Base_SetConfig+0x114>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d02b      	beq.n	8007a0e <TIM_Base_SetConfig+0xb2>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079bc:	d027      	beq.n	8007a0e <TIM_Base_SetConfig+0xb2>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a2c      	ldr	r2, [pc, #176]	; (8007a74 <TIM_Base_SetConfig+0x118>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d023      	beq.n	8007a0e <TIM_Base_SetConfig+0xb2>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a2b      	ldr	r2, [pc, #172]	; (8007a78 <TIM_Base_SetConfig+0x11c>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d01f      	beq.n	8007a0e <TIM_Base_SetConfig+0xb2>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a2a      	ldr	r2, [pc, #168]	; (8007a7c <TIM_Base_SetConfig+0x120>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d01b      	beq.n	8007a0e <TIM_Base_SetConfig+0xb2>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a29      	ldr	r2, [pc, #164]	; (8007a80 <TIM_Base_SetConfig+0x124>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d017      	beq.n	8007a0e <TIM_Base_SetConfig+0xb2>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a28      	ldr	r2, [pc, #160]	; (8007a84 <TIM_Base_SetConfig+0x128>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d013      	beq.n	8007a0e <TIM_Base_SetConfig+0xb2>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a27      	ldr	r2, [pc, #156]	; (8007a88 <TIM_Base_SetConfig+0x12c>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d00f      	beq.n	8007a0e <TIM_Base_SetConfig+0xb2>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a26      	ldr	r2, [pc, #152]	; (8007a8c <TIM_Base_SetConfig+0x130>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d00b      	beq.n	8007a0e <TIM_Base_SetConfig+0xb2>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a25      	ldr	r2, [pc, #148]	; (8007a90 <TIM_Base_SetConfig+0x134>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d007      	beq.n	8007a0e <TIM_Base_SetConfig+0xb2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a24      	ldr	r2, [pc, #144]	; (8007a94 <TIM_Base_SetConfig+0x138>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d003      	beq.n	8007a0e <TIM_Base_SetConfig+0xb2>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a23      	ldr	r2, [pc, #140]	; (8007a98 <TIM_Base_SetConfig+0x13c>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d108      	bne.n	8007a20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	695b      	ldr	r3, [r3, #20]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	689a      	ldr	r2, [r3, #8]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a0a      	ldr	r2, [pc, #40]	; (8007a70 <TIM_Base_SetConfig+0x114>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d003      	beq.n	8007a54 <TIM_Base_SetConfig+0xf8>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a0c      	ldr	r2, [pc, #48]	; (8007a80 <TIM_Base_SetConfig+0x124>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d103      	bne.n	8007a5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	691a      	ldr	r2, [r3, #16]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	615a      	str	r2, [r3, #20]
}
 8007a62:	bf00      	nop
 8007a64:	3714      	adds	r7, #20
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	40010000 	.word	0x40010000
 8007a74:	40000400 	.word	0x40000400
 8007a78:	40000800 	.word	0x40000800
 8007a7c:	40000c00 	.word	0x40000c00
 8007a80:	40010400 	.word	0x40010400
 8007a84:	40014000 	.word	0x40014000
 8007a88:	40014400 	.word	0x40014400
 8007a8c:	40014800 	.word	0x40014800
 8007a90:	40001800 	.word	0x40001800
 8007a94:	40001c00 	.word	0x40001c00
 8007a98:	40002000 	.word	0x40002000

08007a9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b087      	sub	sp, #28
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	f023 0201 	bic.w	r2, r3, #1
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f023 0303 	bic.w	r3, r3, #3
 8007ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	f023 0302 	bic.w	r3, r3, #2
 8007ae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	697a      	ldr	r2, [r7, #20]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a20      	ldr	r2, [pc, #128]	; (8007b74 <TIM_OC1_SetConfig+0xd8>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d003      	beq.n	8007b00 <TIM_OC1_SetConfig+0x64>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a1f      	ldr	r2, [pc, #124]	; (8007b78 <TIM_OC1_SetConfig+0xdc>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d10c      	bne.n	8007b1a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	f023 0308 	bic.w	r3, r3, #8
 8007b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	f023 0304 	bic.w	r3, r3, #4
 8007b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a15      	ldr	r2, [pc, #84]	; (8007b74 <TIM_OC1_SetConfig+0xd8>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d003      	beq.n	8007b2a <TIM_OC1_SetConfig+0x8e>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a14      	ldr	r2, [pc, #80]	; (8007b78 <TIM_OC1_SetConfig+0xdc>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d111      	bne.n	8007b4e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	685a      	ldr	r2, [r3, #4]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	621a      	str	r2, [r3, #32]
}
 8007b68:	bf00      	nop
 8007b6a:	371c      	adds	r7, #28
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	40010000 	.word	0x40010000
 8007b78:	40010400 	.word	0x40010400

08007b7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b087      	sub	sp, #28
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	f023 0210 	bic.w	r2, r3, #16
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a1b      	ldr	r3, [r3, #32]
 8007b96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	021b      	lsls	r3, r3, #8
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	f023 0320 	bic.w	r3, r3, #32
 8007bc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	011b      	lsls	r3, r3, #4
 8007bce:	697a      	ldr	r2, [r7, #20]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a22      	ldr	r2, [pc, #136]	; (8007c60 <TIM_OC2_SetConfig+0xe4>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d003      	beq.n	8007be4 <TIM_OC2_SetConfig+0x68>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a21      	ldr	r2, [pc, #132]	; (8007c64 <TIM_OC2_SetConfig+0xe8>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d10d      	bne.n	8007c00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	011b      	lsls	r3, r3, #4
 8007bf2:	697a      	ldr	r2, [r7, #20]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a17      	ldr	r2, [pc, #92]	; (8007c60 <TIM_OC2_SetConfig+0xe4>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d003      	beq.n	8007c10 <TIM_OC2_SetConfig+0x94>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a16      	ldr	r2, [pc, #88]	; (8007c64 <TIM_OC2_SetConfig+0xe8>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d113      	bne.n	8007c38 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	693a      	ldr	r2, [r7, #16]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	693a      	ldr	r2, [r7, #16]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	685a      	ldr	r2, [r3, #4]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	621a      	str	r2, [r3, #32]
}
 8007c52:	bf00      	nop
 8007c54:	371c      	adds	r7, #28
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	40010000 	.word	0x40010000
 8007c64:	40010400 	.word	0x40010400

08007c68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b087      	sub	sp, #28
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	69db      	ldr	r3, [r3, #28]
 8007c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f023 0303 	bic.w	r3, r3, #3
 8007c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	021b      	lsls	r3, r3, #8
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a21      	ldr	r2, [pc, #132]	; (8007d48 <TIM_OC3_SetConfig+0xe0>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d003      	beq.n	8007cce <TIM_OC3_SetConfig+0x66>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a20      	ldr	r2, [pc, #128]	; (8007d4c <TIM_OC3_SetConfig+0xe4>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d10d      	bne.n	8007cea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	021b      	lsls	r3, r3, #8
 8007cdc:	697a      	ldr	r2, [r7, #20]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a16      	ldr	r2, [pc, #88]	; (8007d48 <TIM_OC3_SetConfig+0xe0>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d003      	beq.n	8007cfa <TIM_OC3_SetConfig+0x92>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a15      	ldr	r2, [pc, #84]	; (8007d4c <TIM_OC3_SetConfig+0xe4>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d113      	bne.n	8007d22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	011b      	lsls	r3, r3, #4
 8007d10:	693a      	ldr	r2, [r7, #16]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	011b      	lsls	r3, r3, #4
 8007d1c:	693a      	ldr	r2, [r7, #16]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	685a      	ldr	r2, [r3, #4]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	697a      	ldr	r2, [r7, #20]
 8007d3a:	621a      	str	r2, [r3, #32]
}
 8007d3c:	bf00      	nop
 8007d3e:	371c      	adds	r7, #28
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr
 8007d48:	40010000 	.word	0x40010000
 8007d4c:	40010400 	.word	0x40010400

08007d50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b087      	sub	sp, #28
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	69db      	ldr	r3, [r3, #28]
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	021b      	lsls	r3, r3, #8
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	031b      	lsls	r3, r3, #12
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a12      	ldr	r2, [pc, #72]	; (8007df4 <TIM_OC4_SetConfig+0xa4>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d003      	beq.n	8007db8 <TIM_OC4_SetConfig+0x68>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a11      	ldr	r2, [pc, #68]	; (8007df8 <TIM_OC4_SetConfig+0xa8>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d109      	bne.n	8007dcc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	695b      	ldr	r3, [r3, #20]
 8007dc4:	019b      	lsls	r3, r3, #6
 8007dc6:	697a      	ldr	r2, [r7, #20]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	685a      	ldr	r2, [r3, #4]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	693a      	ldr	r2, [r7, #16]
 8007de4:	621a      	str	r2, [r3, #32]
}
 8007de6:	bf00      	nop
 8007de8:	371c      	adds	r7, #28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	40010000 	.word	0x40010000
 8007df8:	40010400 	.word	0x40010400

08007dfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b087      	sub	sp, #28
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6a1b      	ldr	r3, [r3, #32]
 8007e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	f023 0201 	bic.w	r2, r3, #1
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	699b      	ldr	r3, [r3, #24]
 8007e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	011b      	lsls	r3, r3, #4
 8007e2c:	693a      	ldr	r2, [r7, #16]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f023 030a 	bic.w	r3, r3, #10
 8007e38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	697a      	ldr	r2, [r7, #20]
 8007e4c:	621a      	str	r2, [r3, #32]
}
 8007e4e:	bf00      	nop
 8007e50:	371c      	adds	r7, #28
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b087      	sub	sp, #28
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	60f8      	str	r0, [r7, #12]
 8007e62:	60b9      	str	r1, [r7, #8]
 8007e64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6a1b      	ldr	r3, [r3, #32]
 8007e6a:	f023 0210 	bic.w	r2, r3, #16
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6a1b      	ldr	r3, [r3, #32]
 8007e7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	031b      	lsls	r3, r3, #12
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	011b      	lsls	r3, r3, #4
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	697a      	ldr	r2, [r7, #20]
 8007ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	621a      	str	r2, [r3, #32]
}
 8007eae:	bf00      	nop
 8007eb0:	371c      	adds	r7, #28
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007eba:	b480      	push	{r7}
 8007ebc:	b085      	sub	sp, #20
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ed0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	f043 0307 	orr.w	r3, r3, #7
 8007edc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	609a      	str	r2, [r3, #8]
}
 8007ee4:	bf00      	nop
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b087      	sub	sp, #28
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
 8007efc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	021a      	lsls	r2, r3, #8
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	431a      	orrs	r2, r3
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	697a      	ldr	r2, [r7, #20]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	697a      	ldr	r2, [r7, #20]
 8007f22:	609a      	str	r2, [r3, #8]
}
 8007f24:	bf00      	nop
 8007f26:	371c      	adds	r7, #28
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b087      	sub	sp, #28
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	f003 031f 	and.w	r3, r3, #31
 8007f42:	2201      	movs	r2, #1
 8007f44:	fa02 f303 	lsl.w	r3, r2, r3
 8007f48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6a1a      	ldr	r2, [r3, #32]
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	43db      	mvns	r3, r3
 8007f52:	401a      	ands	r2, r3
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6a1a      	ldr	r2, [r3, #32]
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f003 031f 	and.w	r3, r3, #31
 8007f62:	6879      	ldr	r1, [r7, #4]
 8007f64:	fa01 f303 	lsl.w	r3, r1, r3
 8007f68:	431a      	orrs	r2, r3
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	621a      	str	r2, [r3, #32]
}
 8007f6e:	bf00      	nop
 8007f70:	371c      	adds	r7, #28
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
	...

08007f7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d101      	bne.n	8007f94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f90:	2302      	movs	r3, #2
 8007f92:	e05a      	b.n	800804a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2202      	movs	r2, #2
 8007fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a21      	ldr	r2, [pc, #132]	; (8008058 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d022      	beq.n	800801e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fe0:	d01d      	beq.n	800801e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a1d      	ldr	r2, [pc, #116]	; (800805c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d018      	beq.n	800801e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a1b      	ldr	r2, [pc, #108]	; (8008060 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d013      	beq.n	800801e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a1a      	ldr	r2, [pc, #104]	; (8008064 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d00e      	beq.n	800801e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a18      	ldr	r2, [pc, #96]	; (8008068 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d009      	beq.n	800801e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a17      	ldr	r2, [pc, #92]	; (800806c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d004      	beq.n	800801e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a15      	ldr	r2, [pc, #84]	; (8008070 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d10c      	bne.n	8008038 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008024:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	4313      	orrs	r3, r2
 800802e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3714      	adds	r7, #20
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	40010000 	.word	0x40010000
 800805c:	40000400 	.word	0x40000400
 8008060:	40000800 	.word	0x40000800
 8008064:	40000c00 	.word	0x40000c00
 8008068:	40010400 	.word	0x40010400
 800806c:	40014000 	.word	0x40014000
 8008070:	40001800 	.word	0x40001800

08008074 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800807c:	bf00      	nop
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d101      	bne.n	80080ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	e03f      	b.n	800812e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d106      	bne.n	80080c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f7fb fe8c 	bl	8003de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2224      	movs	r2, #36	; 0x24
 80080cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68da      	ldr	r2, [r3, #12]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fd19 	bl	8008b18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	691a      	ldr	r2, [r3, #16]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	695a      	ldr	r2, [r3, #20]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008104:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68da      	ldr	r2, [r3, #12]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008114:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2220      	movs	r2, #32
 8008120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2220      	movs	r2, #32
 8008128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008136:	b480      	push	{r7}
 8008138:	b085      	sub	sp, #20
 800813a:	af00      	add	r7, sp, #0
 800813c:	60f8      	str	r0, [r7, #12]
 800813e:	60b9      	str	r1, [r7, #8]
 8008140:	4613      	mov	r3, r2
 8008142:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800814a:	b2db      	uxtb	r3, r3
 800814c:	2b20      	cmp	r3, #32
 800814e:	d130      	bne.n	80081b2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d002      	beq.n	800815c <HAL_UART_Transmit_IT+0x26>
 8008156:	88fb      	ldrh	r3, [r7, #6]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d101      	bne.n	8008160 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e029      	b.n	80081b4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008166:	2b01      	cmp	r3, #1
 8008168:	d101      	bne.n	800816e <HAL_UART_Transmit_IT+0x38>
 800816a:	2302      	movs	r3, #2
 800816c:	e022      	b.n	80081b4 <HAL_UART_Transmit_IT+0x7e>
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	68ba      	ldr	r2, [r7, #8]
 800817a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	88fa      	ldrh	r2, [r7, #6]
 8008180:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	88fa      	ldrh	r2, [r7, #6]
 8008186:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2200      	movs	r2, #0
 800818c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2221      	movs	r2, #33	; 0x21
 8008192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68da      	ldr	r2, [r3, #12]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80081ac:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80081ae:	2300      	movs	r3, #0
 80081b0:	e000      	b.n	80081b4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80081b2:	2302      	movs	r3, #2
  }
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	4613      	mov	r3, r2
 80081cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b20      	cmp	r3, #32
 80081d8:	d11d      	bne.n	8008216 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d002      	beq.n	80081e6 <HAL_UART_Receive_IT+0x26>
 80081e0:	88fb      	ldrh	r3, [r7, #6]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d101      	bne.n	80081ea <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e016      	b.n	8008218 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d101      	bne.n	80081f8 <HAL_UART_Receive_IT+0x38>
 80081f4:	2302      	movs	r3, #2
 80081f6:	e00f      	b.n	8008218 <HAL_UART_Receive_IT+0x58>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2200      	movs	r2, #0
 8008204:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008206:	88fb      	ldrh	r3, [r7, #6]
 8008208:	461a      	mov	r2, r3
 800820a:	68b9      	ldr	r1, [r7, #8]
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f000 faab 	bl	8008768 <UART_Start_Receive_IT>
 8008212:	4603      	mov	r3, r0
 8008214:	e000      	b.n	8008218 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008216:	2302      	movs	r3, #2
  }
}
 8008218:	4618      	mov	r0, r3
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b0ba      	sub	sp, #232	; 0xe8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008246:	2300      	movs	r3, #0
 8008248:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800824c:	2300      	movs	r3, #0
 800824e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008256:	f003 030f 	and.w	r3, r3, #15
 800825a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800825e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10f      	bne.n	8008286 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800826a:	f003 0320 	and.w	r3, r3, #32
 800826e:	2b00      	cmp	r3, #0
 8008270:	d009      	beq.n	8008286 <HAL_UART_IRQHandler+0x66>
 8008272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008276:	f003 0320 	and.w	r3, r3, #32
 800827a:	2b00      	cmp	r3, #0
 800827c:	d003      	beq.n	8008286 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fb8f 	bl	80089a2 <UART_Receive_IT>
      return;
 8008284:	e256      	b.n	8008734 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008286:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800828a:	2b00      	cmp	r3, #0
 800828c:	f000 80de 	beq.w	800844c <HAL_UART_IRQHandler+0x22c>
 8008290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008294:	f003 0301 	and.w	r3, r3, #1
 8008298:	2b00      	cmp	r3, #0
 800829a:	d106      	bne.n	80082aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800829c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f000 80d1 	beq.w	800844c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80082aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00b      	beq.n	80082ce <HAL_UART_IRQHandler+0xae>
 80082b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d005      	beq.n	80082ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c6:	f043 0201 	orr.w	r2, r3, #1
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082d2:	f003 0304 	and.w	r3, r3, #4
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00b      	beq.n	80082f2 <HAL_UART_IRQHandler+0xd2>
 80082da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d005      	beq.n	80082f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ea:	f043 0202 	orr.w	r2, r3, #2
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082f6:	f003 0302 	and.w	r3, r3, #2
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00b      	beq.n	8008316 <HAL_UART_IRQHandler+0xf6>
 80082fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008302:	f003 0301 	and.w	r3, r3, #1
 8008306:	2b00      	cmp	r3, #0
 8008308:	d005      	beq.n	8008316 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830e:	f043 0204 	orr.w	r2, r3, #4
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800831a:	f003 0308 	and.w	r3, r3, #8
 800831e:	2b00      	cmp	r3, #0
 8008320:	d011      	beq.n	8008346 <HAL_UART_IRQHandler+0x126>
 8008322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008326:	f003 0320 	and.w	r3, r3, #32
 800832a:	2b00      	cmp	r3, #0
 800832c:	d105      	bne.n	800833a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800832e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008332:	f003 0301 	and.w	r3, r3, #1
 8008336:	2b00      	cmp	r3, #0
 8008338:	d005      	beq.n	8008346 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833e:	f043 0208 	orr.w	r2, r3, #8
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834a:	2b00      	cmp	r3, #0
 800834c:	f000 81ed 	beq.w	800872a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008354:	f003 0320 	and.w	r3, r3, #32
 8008358:	2b00      	cmp	r3, #0
 800835a:	d008      	beq.n	800836e <HAL_UART_IRQHandler+0x14e>
 800835c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008360:	f003 0320 	and.w	r3, r3, #32
 8008364:	2b00      	cmp	r3, #0
 8008366:	d002      	beq.n	800836e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fb1a 	bl	80089a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	695b      	ldr	r3, [r3, #20]
 8008374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008378:	2b40      	cmp	r3, #64	; 0x40
 800837a:	bf0c      	ite	eq
 800837c:	2301      	moveq	r3, #1
 800837e:	2300      	movne	r3, #0
 8008380:	b2db      	uxtb	r3, r3
 8008382:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838a:	f003 0308 	and.w	r3, r3, #8
 800838e:	2b00      	cmp	r3, #0
 8008390:	d103      	bne.n	800839a <HAL_UART_IRQHandler+0x17a>
 8008392:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008396:	2b00      	cmp	r3, #0
 8008398:	d04f      	beq.n	800843a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fa22 	bl	80087e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	695b      	ldr	r3, [r3, #20]
 80083a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083aa:	2b40      	cmp	r3, #64	; 0x40
 80083ac:	d141      	bne.n	8008432 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	3314      	adds	r3, #20
 80083b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083bc:	e853 3f00 	ldrex	r3, [r3]
 80083c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80083c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80083c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	3314      	adds	r3, #20
 80083d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80083da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80083de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80083e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80083ea:	e841 2300 	strex	r3, r2, [r1]
 80083ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80083f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d1d9      	bne.n	80083ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d013      	beq.n	800842a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008406:	4a7d      	ldr	r2, [pc, #500]	; (80085fc <HAL_UART_IRQHandler+0x3dc>)
 8008408:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840e:	4618      	mov	r0, r3
 8008410:	f7fd f838 	bl	8005484 <HAL_DMA_Abort_IT>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d016      	beq.n	8008448 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008424:	4610      	mov	r0, r2
 8008426:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008428:	e00e      	b.n	8008448 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f986 	bl	800873c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008430:	e00a      	b.n	8008448 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f982 	bl	800873c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008438:	e006      	b.n	8008448 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 f97e 	bl	800873c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008446:	e170      	b.n	800872a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008448:	bf00      	nop
    return;
 800844a:	e16e      	b.n	800872a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008450:	2b01      	cmp	r3, #1
 8008452:	f040 814a 	bne.w	80086ea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800845a:	f003 0310 	and.w	r3, r3, #16
 800845e:	2b00      	cmp	r3, #0
 8008460:	f000 8143 	beq.w	80086ea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008468:	f003 0310 	and.w	r3, r3, #16
 800846c:	2b00      	cmp	r3, #0
 800846e:	f000 813c 	beq.w	80086ea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008472:	2300      	movs	r3, #0
 8008474:	60bb      	str	r3, [r7, #8]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	60bb      	str	r3, [r7, #8]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	60bb      	str	r3, [r7, #8]
 8008486:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008492:	2b40      	cmp	r3, #64	; 0x40
 8008494:	f040 80b4 	bne.w	8008600 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80084a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f000 8140 	beq.w	800872e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80084b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80084b6:	429a      	cmp	r2, r3
 80084b8:	f080 8139 	bcs.w	800872e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80084c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084ce:	f000 8088 	beq.w	80085e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	330c      	adds	r3, #12
 80084d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084e0:	e853 3f00 	ldrex	r3, [r3]
 80084e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80084e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	330c      	adds	r3, #12
 80084fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80084fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008502:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008506:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800850a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800850e:	e841 2300 	strex	r3, r2, [r1]
 8008512:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008516:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1d9      	bne.n	80084d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	3314      	adds	r3, #20
 8008524:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008526:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008528:	e853 3f00 	ldrex	r3, [r3]
 800852c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800852e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008530:	f023 0301 	bic.w	r3, r3, #1
 8008534:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	3314      	adds	r3, #20
 800853e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008542:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008546:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008548:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800854a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800854e:	e841 2300 	strex	r3, r2, [r1]
 8008552:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008554:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1e1      	bne.n	800851e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	3314      	adds	r3, #20
 8008560:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008562:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008564:	e853 3f00 	ldrex	r3, [r3]
 8008568:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800856a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800856c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008570:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	3314      	adds	r3, #20
 800857a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800857e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008580:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008582:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008584:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008586:	e841 2300 	strex	r3, r2, [r1]
 800858a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800858c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1e3      	bne.n	800855a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2220      	movs	r2, #32
 8008596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	330c      	adds	r3, #12
 80085a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085aa:	e853 3f00 	ldrex	r3, [r3]
 80085ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80085b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085b2:	f023 0310 	bic.w	r3, r3, #16
 80085b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	330c      	adds	r3, #12
 80085c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80085c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80085c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80085ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085cc:	e841 2300 	strex	r3, r2, [r1]
 80085d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80085d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1e3      	bne.n	80085a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085dc:	4618      	mov	r0, r3
 80085de:	f7fc fee1 	bl	80053a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	4619      	mov	r1, r3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 f8ac 	bl	8008750 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80085f8:	e099      	b.n	800872e <HAL_UART_IRQHandler+0x50e>
 80085fa:	bf00      	nop
 80085fc:	080088ab 	.word	0x080088ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008608:	b29b      	uxth	r3, r3
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008614:	b29b      	uxth	r3, r3
 8008616:	2b00      	cmp	r3, #0
 8008618:	f000 808b 	beq.w	8008732 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800861c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 8086 	beq.w	8008732 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	330c      	adds	r3, #12
 800862c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008630:	e853 3f00 	ldrex	r3, [r3]
 8008634:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008638:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800863c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	330c      	adds	r3, #12
 8008646:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800864a:	647a      	str	r2, [r7, #68]	; 0x44
 800864c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008650:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008652:	e841 2300 	strex	r3, r2, [r1]
 8008656:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1e3      	bne.n	8008626 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	3314      	adds	r3, #20
 8008664:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008668:	e853 3f00 	ldrex	r3, [r3]
 800866c:	623b      	str	r3, [r7, #32]
   return(result);
 800866e:	6a3b      	ldr	r3, [r7, #32]
 8008670:	f023 0301 	bic.w	r3, r3, #1
 8008674:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	3314      	adds	r3, #20
 800867e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008682:	633a      	str	r2, [r7, #48]	; 0x30
 8008684:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008686:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800868a:	e841 2300 	strex	r3, r2, [r1]
 800868e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1e3      	bne.n	800865e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2220      	movs	r2, #32
 800869a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	330c      	adds	r3, #12
 80086aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	e853 3f00 	ldrex	r3, [r3]
 80086b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f023 0310 	bic.w	r3, r3, #16
 80086ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	330c      	adds	r3, #12
 80086c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80086c8:	61fa      	str	r2, [r7, #28]
 80086ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086cc:	69b9      	ldr	r1, [r7, #24]
 80086ce:	69fa      	ldr	r2, [r7, #28]
 80086d0:	e841 2300 	strex	r3, r2, [r1]
 80086d4:	617b      	str	r3, [r7, #20]
   return(result);
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d1e3      	bne.n	80086a4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80086dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086e0:	4619      	mov	r1, r3
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f834 	bl	8008750 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80086e8:	e023      	b.n	8008732 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80086ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d009      	beq.n	800870a <HAL_UART_IRQHandler+0x4ea>
 80086f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d003      	beq.n	800870a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f8e5 	bl	80088d2 <UART_Transmit_IT>
    return;
 8008708:	e014      	b.n	8008734 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800870a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800870e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00e      	beq.n	8008734 <HAL_UART_IRQHandler+0x514>
 8008716:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800871a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800871e:	2b00      	cmp	r3, #0
 8008720:	d008      	beq.n	8008734 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f925 	bl	8008972 <UART_EndTransmit_IT>
    return;
 8008728:	e004      	b.n	8008734 <HAL_UART_IRQHandler+0x514>
    return;
 800872a:	bf00      	nop
 800872c:	e002      	b.n	8008734 <HAL_UART_IRQHandler+0x514>
      return;
 800872e:	bf00      	nop
 8008730:	e000      	b.n	8008734 <HAL_UART_IRQHandler+0x514>
      return;
 8008732:	bf00      	nop
  }
}
 8008734:	37e8      	adds	r7, #232	; 0xe8
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop

0800873c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008744:	bf00      	nop
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	460b      	mov	r3, r1
 800875a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	4613      	mov	r3, r2
 8008774:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	88fa      	ldrh	r2, [r7, #6]
 8008780:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	88fa      	ldrh	r2, [r7, #6]
 8008786:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2200      	movs	r2, #0
 800878c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2222      	movs	r2, #34	; 0x22
 8008792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2200      	movs	r2, #0
 800879a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d007      	beq.n	80087b6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68da      	ldr	r2, [r3, #12]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087b4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	695a      	ldr	r2, [r3, #20]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f042 0201 	orr.w	r2, r2, #1
 80087c4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	68da      	ldr	r2, [r3, #12]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f042 0220 	orr.w	r2, r2, #32
 80087d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3714      	adds	r7, #20
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b095      	sub	sp, #84	; 0x54
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	330c      	adds	r3, #12
 80087f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f6:	e853 3f00 	ldrex	r3, [r3]
 80087fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	330c      	adds	r3, #12
 800880a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800880c:	643a      	str	r2, [r7, #64]	; 0x40
 800880e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008810:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008812:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008814:	e841 2300 	strex	r3, r2, [r1]
 8008818:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800881a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881c:	2b00      	cmp	r3, #0
 800881e:	d1e5      	bne.n	80087ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	3314      	adds	r3, #20
 8008826:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008828:	6a3b      	ldr	r3, [r7, #32]
 800882a:	e853 3f00 	ldrex	r3, [r3]
 800882e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	f023 0301 	bic.w	r3, r3, #1
 8008836:	64bb      	str	r3, [r7, #72]	; 0x48
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	3314      	adds	r3, #20
 800883e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008840:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008842:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008844:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008848:	e841 2300 	strex	r3, r2, [r1]
 800884c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800884e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1e5      	bne.n	8008820 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008858:	2b01      	cmp	r3, #1
 800885a:	d119      	bne.n	8008890 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	330c      	adds	r3, #12
 8008862:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	e853 3f00 	ldrex	r3, [r3]
 800886a:	60bb      	str	r3, [r7, #8]
   return(result);
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	f023 0310 	bic.w	r3, r3, #16
 8008872:	647b      	str	r3, [r7, #68]	; 0x44
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	330c      	adds	r3, #12
 800887a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800887c:	61ba      	str	r2, [r7, #24]
 800887e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008880:	6979      	ldr	r1, [r7, #20]
 8008882:	69ba      	ldr	r2, [r7, #24]
 8008884:	e841 2300 	strex	r3, r2, [r1]
 8008888:	613b      	str	r3, [r7, #16]
   return(result);
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d1e5      	bne.n	800885c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2220      	movs	r2, #32
 8008894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800889e:	bf00      	nop
 80088a0:	3754      	adds	r7, #84	; 0x54
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr

080088aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b084      	sub	sp, #16
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2200      	movs	r2, #0
 80088bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f7ff ff39 	bl	800873c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088ca:	bf00      	nop
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b085      	sub	sp, #20
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	2b21      	cmp	r3, #33	; 0x21
 80088e4:	d13e      	bne.n	8008964 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088ee:	d114      	bne.n	800891a <UART_Transmit_IT+0x48>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	691b      	ldr	r3, [r3, #16]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d110      	bne.n	800891a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a1b      	ldr	r3, [r3, #32]
 80088fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	881b      	ldrh	r3, [r3, #0]
 8008902:	461a      	mov	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800890c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a1b      	ldr	r3, [r3, #32]
 8008912:	1c9a      	adds	r2, r3, #2
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	621a      	str	r2, [r3, #32]
 8008918:	e008      	b.n	800892c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a1b      	ldr	r3, [r3, #32]
 800891e:	1c59      	adds	r1, r3, #1
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	6211      	str	r1, [r2, #32]
 8008924:	781a      	ldrb	r2, [r3, #0]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008930:	b29b      	uxth	r3, r3
 8008932:	3b01      	subs	r3, #1
 8008934:	b29b      	uxth	r3, r3
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	4619      	mov	r1, r3
 800893a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10f      	bne.n	8008960 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68da      	ldr	r2, [r3, #12]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800894e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68da      	ldr	r2, [r3, #12]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800895e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008960:	2300      	movs	r3, #0
 8008962:	e000      	b.n	8008966 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008964:	2302      	movs	r3, #2
  }
}
 8008966:	4618      	mov	r0, r3
 8008968:	3714      	adds	r7, #20
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr

08008972 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b082      	sub	sp, #8
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	68da      	ldr	r2, [r3, #12]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008988:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2220      	movs	r2, #32
 800898e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f7fb fc98 	bl	80042c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3708      	adds	r7, #8
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b08c      	sub	sp, #48	; 0x30
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	2b22      	cmp	r3, #34	; 0x22
 80089b4:	f040 80ab 	bne.w	8008b0e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089c0:	d117      	bne.n	80089f2 <UART_Receive_IT+0x50>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d113      	bne.n	80089f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80089ca:	2300      	movs	r3, #0
 80089cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	b29b      	uxth	r3, r3
 80089dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ea:	1c9a      	adds	r2, r3, #2
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	629a      	str	r2, [r3, #40]	; 0x28
 80089f0:	e026      	b.n	8008a40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80089f8:	2300      	movs	r3, #0
 80089fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a04:	d007      	beq.n	8008a16 <UART_Receive_IT+0x74>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d10a      	bne.n	8008a24 <UART_Receive_IT+0x82>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d106      	bne.n	8008a24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	b2da      	uxtb	r2, r3
 8008a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a20:	701a      	strb	r2, [r3, #0]
 8008a22:	e008      	b.n	8008a36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a30:	b2da      	uxtb	r2, r3
 8008a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a3a:	1c5a      	adds	r2, r3, #1
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	3b01      	subs	r3, #1
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d15a      	bne.n	8008b0a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68da      	ldr	r2, [r3, #12]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f022 0220 	bic.w	r2, r2, #32
 8008a62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68da      	ldr	r2, [r3, #12]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	695a      	ldr	r2, [r3, #20]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f022 0201 	bic.w	r2, r2, #1
 8008a82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2220      	movs	r2, #32
 8008a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d135      	bne.n	8008b00 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	330c      	adds	r3, #12
 8008aa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	e853 3f00 	ldrex	r3, [r3]
 8008aa8:	613b      	str	r3, [r7, #16]
   return(result);
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	f023 0310 	bic.w	r3, r3, #16
 8008ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	330c      	adds	r3, #12
 8008ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aba:	623a      	str	r2, [r7, #32]
 8008abc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008abe:	69f9      	ldr	r1, [r7, #28]
 8008ac0:	6a3a      	ldr	r2, [r7, #32]
 8008ac2:	e841 2300 	strex	r3, r2, [r1]
 8008ac6:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1e5      	bne.n	8008a9a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 0310 	and.w	r3, r3, #16
 8008ad8:	2b10      	cmp	r3, #16
 8008ada:	d10a      	bne.n	8008af2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008adc:	2300      	movs	r3, #0
 8008ade:	60fb      	str	r3, [r7, #12]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	60fb      	str	r3, [r7, #12]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	60fb      	str	r3, [r7, #12]
 8008af0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008af6:	4619      	mov	r1, r3
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f7ff fe29 	bl	8008750 <HAL_UARTEx_RxEventCallback>
 8008afe:	e002      	b.n	8008b06 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f7fb fa13 	bl	8003f2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008b06:	2300      	movs	r3, #0
 8008b08:	e002      	b.n	8008b10 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	e000      	b.n	8008b10 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008b0e:	2302      	movs	r3, #2
  }
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3730      	adds	r7, #48	; 0x30
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b1c:	b0c0      	sub	sp, #256	; 0x100
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	691b      	ldr	r3, [r3, #16]
 8008b2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b34:	68d9      	ldr	r1, [r3, #12]
 8008b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	ea40 0301 	orr.w	r3, r0, r1
 8008b40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b46:	689a      	ldr	r2, [r3, #8]
 8008b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	431a      	orrs	r2, r3
 8008b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b54:	695b      	ldr	r3, [r3, #20]
 8008b56:	431a      	orrs	r2, r3
 8008b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b5c:	69db      	ldr	r3, [r3, #28]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008b70:	f021 010c 	bic.w	r1, r1, #12
 8008b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b7e:	430b      	orrs	r3, r1
 8008b80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	695b      	ldr	r3, [r3, #20]
 8008b8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b92:	6999      	ldr	r1, [r3, #24]
 8008b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	ea40 0301 	orr.w	r3, r0, r1
 8008b9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	4b8f      	ldr	r3, [pc, #572]	; (8008de4 <UART_SetConfig+0x2cc>)
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d005      	beq.n	8008bb8 <UART_SetConfig+0xa0>
 8008bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	4b8d      	ldr	r3, [pc, #564]	; (8008de8 <UART_SetConfig+0x2d0>)
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d104      	bne.n	8008bc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008bb8:	f7fd fd80 	bl	80066bc <HAL_RCC_GetPCLK2Freq>
 8008bbc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008bc0:	e003      	b.n	8008bca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008bc2:	f7fd fd67 	bl	8006694 <HAL_RCC_GetPCLK1Freq>
 8008bc6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bce:	69db      	ldr	r3, [r3, #28]
 8008bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bd4:	f040 810c 	bne.w	8008df0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008bd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008be2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008be6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008bea:	4622      	mov	r2, r4
 8008bec:	462b      	mov	r3, r5
 8008bee:	1891      	adds	r1, r2, r2
 8008bf0:	65b9      	str	r1, [r7, #88]	; 0x58
 8008bf2:	415b      	adcs	r3, r3
 8008bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bf6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008bfa:	4621      	mov	r1, r4
 8008bfc:	eb12 0801 	adds.w	r8, r2, r1
 8008c00:	4629      	mov	r1, r5
 8008c02:	eb43 0901 	adc.w	r9, r3, r1
 8008c06:	f04f 0200 	mov.w	r2, #0
 8008c0a:	f04f 0300 	mov.w	r3, #0
 8008c0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c1a:	4690      	mov	r8, r2
 8008c1c:	4699      	mov	r9, r3
 8008c1e:	4623      	mov	r3, r4
 8008c20:	eb18 0303 	adds.w	r3, r8, r3
 8008c24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c28:	462b      	mov	r3, r5
 8008c2a:	eb49 0303 	adc.w	r3, r9, r3
 8008c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008c42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008c46:	460b      	mov	r3, r1
 8008c48:	18db      	adds	r3, r3, r3
 8008c4a:	653b      	str	r3, [r7, #80]	; 0x50
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	eb42 0303 	adc.w	r3, r2, r3
 8008c52:	657b      	str	r3, [r7, #84]	; 0x54
 8008c54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008c58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008c5c:	f7f7 ffb8 	bl	8000bd0 <__aeabi_uldivmod>
 8008c60:	4602      	mov	r2, r0
 8008c62:	460b      	mov	r3, r1
 8008c64:	4b61      	ldr	r3, [pc, #388]	; (8008dec <UART_SetConfig+0x2d4>)
 8008c66:	fba3 2302 	umull	r2, r3, r3, r2
 8008c6a:	095b      	lsrs	r3, r3, #5
 8008c6c:	011c      	lsls	r4, r3, #4
 8008c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c72:	2200      	movs	r2, #0
 8008c74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008c7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008c80:	4642      	mov	r2, r8
 8008c82:	464b      	mov	r3, r9
 8008c84:	1891      	adds	r1, r2, r2
 8008c86:	64b9      	str	r1, [r7, #72]	; 0x48
 8008c88:	415b      	adcs	r3, r3
 8008c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008c90:	4641      	mov	r1, r8
 8008c92:	eb12 0a01 	adds.w	sl, r2, r1
 8008c96:	4649      	mov	r1, r9
 8008c98:	eb43 0b01 	adc.w	fp, r3, r1
 8008c9c:	f04f 0200 	mov.w	r2, #0
 8008ca0:	f04f 0300 	mov.w	r3, #0
 8008ca4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008ca8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008cac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008cb0:	4692      	mov	sl, r2
 8008cb2:	469b      	mov	fp, r3
 8008cb4:	4643      	mov	r3, r8
 8008cb6:	eb1a 0303 	adds.w	r3, sl, r3
 8008cba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008cbe:	464b      	mov	r3, r9
 8008cc0:	eb4b 0303 	adc.w	r3, fp, r3
 8008cc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008cd4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008cd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008cdc:	460b      	mov	r3, r1
 8008cde:	18db      	adds	r3, r3, r3
 8008ce0:	643b      	str	r3, [r7, #64]	; 0x40
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	eb42 0303 	adc.w	r3, r2, r3
 8008ce8:	647b      	str	r3, [r7, #68]	; 0x44
 8008cea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008cee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008cf2:	f7f7 ff6d 	bl	8000bd0 <__aeabi_uldivmod>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	4611      	mov	r1, r2
 8008cfc:	4b3b      	ldr	r3, [pc, #236]	; (8008dec <UART_SetConfig+0x2d4>)
 8008cfe:	fba3 2301 	umull	r2, r3, r3, r1
 8008d02:	095b      	lsrs	r3, r3, #5
 8008d04:	2264      	movs	r2, #100	; 0x64
 8008d06:	fb02 f303 	mul.w	r3, r2, r3
 8008d0a:	1acb      	subs	r3, r1, r3
 8008d0c:	00db      	lsls	r3, r3, #3
 8008d0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008d12:	4b36      	ldr	r3, [pc, #216]	; (8008dec <UART_SetConfig+0x2d4>)
 8008d14:	fba3 2302 	umull	r2, r3, r3, r2
 8008d18:	095b      	lsrs	r3, r3, #5
 8008d1a:	005b      	lsls	r3, r3, #1
 8008d1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008d20:	441c      	add	r4, r3
 8008d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d26:	2200      	movs	r2, #0
 8008d28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008d30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008d34:	4642      	mov	r2, r8
 8008d36:	464b      	mov	r3, r9
 8008d38:	1891      	adds	r1, r2, r2
 8008d3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008d3c:	415b      	adcs	r3, r3
 8008d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008d44:	4641      	mov	r1, r8
 8008d46:	1851      	adds	r1, r2, r1
 8008d48:	6339      	str	r1, [r7, #48]	; 0x30
 8008d4a:	4649      	mov	r1, r9
 8008d4c:	414b      	adcs	r3, r1
 8008d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8008d50:	f04f 0200 	mov.w	r2, #0
 8008d54:	f04f 0300 	mov.w	r3, #0
 8008d58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008d5c:	4659      	mov	r1, fp
 8008d5e:	00cb      	lsls	r3, r1, #3
 8008d60:	4651      	mov	r1, sl
 8008d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d66:	4651      	mov	r1, sl
 8008d68:	00ca      	lsls	r2, r1, #3
 8008d6a:	4610      	mov	r0, r2
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	4603      	mov	r3, r0
 8008d70:	4642      	mov	r2, r8
 8008d72:	189b      	adds	r3, r3, r2
 8008d74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d78:	464b      	mov	r3, r9
 8008d7a:	460a      	mov	r2, r1
 8008d7c:	eb42 0303 	adc.w	r3, r2, r3
 8008d80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008d90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008d94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008d98:	460b      	mov	r3, r1
 8008d9a:	18db      	adds	r3, r3, r3
 8008d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d9e:	4613      	mov	r3, r2
 8008da0:	eb42 0303 	adc.w	r3, r2, r3
 8008da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008da6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008daa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008dae:	f7f7 ff0f 	bl	8000bd0 <__aeabi_uldivmod>
 8008db2:	4602      	mov	r2, r0
 8008db4:	460b      	mov	r3, r1
 8008db6:	4b0d      	ldr	r3, [pc, #52]	; (8008dec <UART_SetConfig+0x2d4>)
 8008db8:	fba3 1302 	umull	r1, r3, r3, r2
 8008dbc:	095b      	lsrs	r3, r3, #5
 8008dbe:	2164      	movs	r1, #100	; 0x64
 8008dc0:	fb01 f303 	mul.w	r3, r1, r3
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	00db      	lsls	r3, r3, #3
 8008dc8:	3332      	adds	r3, #50	; 0x32
 8008dca:	4a08      	ldr	r2, [pc, #32]	; (8008dec <UART_SetConfig+0x2d4>)
 8008dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8008dd0:	095b      	lsrs	r3, r3, #5
 8008dd2:	f003 0207 	and.w	r2, r3, #7
 8008dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4422      	add	r2, r4
 8008dde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008de0:	e105      	b.n	8008fee <UART_SetConfig+0x4d6>
 8008de2:	bf00      	nop
 8008de4:	40011000 	.word	0x40011000
 8008de8:	40011400 	.word	0x40011400
 8008dec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008df4:	2200      	movs	r2, #0
 8008df6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008dfa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008dfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008e02:	4642      	mov	r2, r8
 8008e04:	464b      	mov	r3, r9
 8008e06:	1891      	adds	r1, r2, r2
 8008e08:	6239      	str	r1, [r7, #32]
 8008e0a:	415b      	adcs	r3, r3
 8008e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e12:	4641      	mov	r1, r8
 8008e14:	1854      	adds	r4, r2, r1
 8008e16:	4649      	mov	r1, r9
 8008e18:	eb43 0501 	adc.w	r5, r3, r1
 8008e1c:	f04f 0200 	mov.w	r2, #0
 8008e20:	f04f 0300 	mov.w	r3, #0
 8008e24:	00eb      	lsls	r3, r5, #3
 8008e26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e2a:	00e2      	lsls	r2, r4, #3
 8008e2c:	4614      	mov	r4, r2
 8008e2e:	461d      	mov	r5, r3
 8008e30:	4643      	mov	r3, r8
 8008e32:	18e3      	adds	r3, r4, r3
 8008e34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008e38:	464b      	mov	r3, r9
 8008e3a:	eb45 0303 	adc.w	r3, r5, r3
 8008e3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008e52:	f04f 0200 	mov.w	r2, #0
 8008e56:	f04f 0300 	mov.w	r3, #0
 8008e5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008e5e:	4629      	mov	r1, r5
 8008e60:	008b      	lsls	r3, r1, #2
 8008e62:	4621      	mov	r1, r4
 8008e64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e68:	4621      	mov	r1, r4
 8008e6a:	008a      	lsls	r2, r1, #2
 8008e6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008e70:	f7f7 feae 	bl	8000bd0 <__aeabi_uldivmod>
 8008e74:	4602      	mov	r2, r0
 8008e76:	460b      	mov	r3, r1
 8008e78:	4b60      	ldr	r3, [pc, #384]	; (8008ffc <UART_SetConfig+0x4e4>)
 8008e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8008e7e:	095b      	lsrs	r3, r3, #5
 8008e80:	011c      	lsls	r4, r3, #4
 8008e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e86:	2200      	movs	r2, #0
 8008e88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008e90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008e94:	4642      	mov	r2, r8
 8008e96:	464b      	mov	r3, r9
 8008e98:	1891      	adds	r1, r2, r2
 8008e9a:	61b9      	str	r1, [r7, #24]
 8008e9c:	415b      	adcs	r3, r3
 8008e9e:	61fb      	str	r3, [r7, #28]
 8008ea0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ea4:	4641      	mov	r1, r8
 8008ea6:	1851      	adds	r1, r2, r1
 8008ea8:	6139      	str	r1, [r7, #16]
 8008eaa:	4649      	mov	r1, r9
 8008eac:	414b      	adcs	r3, r1
 8008eae:	617b      	str	r3, [r7, #20]
 8008eb0:	f04f 0200 	mov.w	r2, #0
 8008eb4:	f04f 0300 	mov.w	r3, #0
 8008eb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008ebc:	4659      	mov	r1, fp
 8008ebe:	00cb      	lsls	r3, r1, #3
 8008ec0:	4651      	mov	r1, sl
 8008ec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ec6:	4651      	mov	r1, sl
 8008ec8:	00ca      	lsls	r2, r1, #3
 8008eca:	4610      	mov	r0, r2
 8008ecc:	4619      	mov	r1, r3
 8008ece:	4603      	mov	r3, r0
 8008ed0:	4642      	mov	r2, r8
 8008ed2:	189b      	adds	r3, r3, r2
 8008ed4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ed8:	464b      	mov	r3, r9
 8008eda:	460a      	mov	r2, r1
 8008edc:	eb42 0303 	adc.w	r3, r2, r3
 8008ee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	67bb      	str	r3, [r7, #120]	; 0x78
 8008eee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008ef0:	f04f 0200 	mov.w	r2, #0
 8008ef4:	f04f 0300 	mov.w	r3, #0
 8008ef8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008efc:	4649      	mov	r1, r9
 8008efe:	008b      	lsls	r3, r1, #2
 8008f00:	4641      	mov	r1, r8
 8008f02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f06:	4641      	mov	r1, r8
 8008f08:	008a      	lsls	r2, r1, #2
 8008f0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008f0e:	f7f7 fe5f 	bl	8000bd0 <__aeabi_uldivmod>
 8008f12:	4602      	mov	r2, r0
 8008f14:	460b      	mov	r3, r1
 8008f16:	4b39      	ldr	r3, [pc, #228]	; (8008ffc <UART_SetConfig+0x4e4>)
 8008f18:	fba3 1302 	umull	r1, r3, r3, r2
 8008f1c:	095b      	lsrs	r3, r3, #5
 8008f1e:	2164      	movs	r1, #100	; 0x64
 8008f20:	fb01 f303 	mul.w	r3, r1, r3
 8008f24:	1ad3      	subs	r3, r2, r3
 8008f26:	011b      	lsls	r3, r3, #4
 8008f28:	3332      	adds	r3, #50	; 0x32
 8008f2a:	4a34      	ldr	r2, [pc, #208]	; (8008ffc <UART_SetConfig+0x4e4>)
 8008f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f30:	095b      	lsrs	r3, r3, #5
 8008f32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f36:	441c      	add	r4, r3
 8008f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	673b      	str	r3, [r7, #112]	; 0x70
 8008f40:	677a      	str	r2, [r7, #116]	; 0x74
 8008f42:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008f46:	4642      	mov	r2, r8
 8008f48:	464b      	mov	r3, r9
 8008f4a:	1891      	adds	r1, r2, r2
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	415b      	adcs	r3, r3
 8008f50:	60fb      	str	r3, [r7, #12]
 8008f52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f56:	4641      	mov	r1, r8
 8008f58:	1851      	adds	r1, r2, r1
 8008f5a:	6039      	str	r1, [r7, #0]
 8008f5c:	4649      	mov	r1, r9
 8008f5e:	414b      	adcs	r3, r1
 8008f60:	607b      	str	r3, [r7, #4]
 8008f62:	f04f 0200 	mov.w	r2, #0
 8008f66:	f04f 0300 	mov.w	r3, #0
 8008f6a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008f6e:	4659      	mov	r1, fp
 8008f70:	00cb      	lsls	r3, r1, #3
 8008f72:	4651      	mov	r1, sl
 8008f74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f78:	4651      	mov	r1, sl
 8008f7a:	00ca      	lsls	r2, r1, #3
 8008f7c:	4610      	mov	r0, r2
 8008f7e:	4619      	mov	r1, r3
 8008f80:	4603      	mov	r3, r0
 8008f82:	4642      	mov	r2, r8
 8008f84:	189b      	adds	r3, r3, r2
 8008f86:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f88:	464b      	mov	r3, r9
 8008f8a:	460a      	mov	r2, r1
 8008f8c:	eb42 0303 	adc.w	r3, r2, r3
 8008f90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	663b      	str	r3, [r7, #96]	; 0x60
 8008f9c:	667a      	str	r2, [r7, #100]	; 0x64
 8008f9e:	f04f 0200 	mov.w	r2, #0
 8008fa2:	f04f 0300 	mov.w	r3, #0
 8008fa6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008faa:	4649      	mov	r1, r9
 8008fac:	008b      	lsls	r3, r1, #2
 8008fae:	4641      	mov	r1, r8
 8008fb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fb4:	4641      	mov	r1, r8
 8008fb6:	008a      	lsls	r2, r1, #2
 8008fb8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008fbc:	f7f7 fe08 	bl	8000bd0 <__aeabi_uldivmod>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	4b0d      	ldr	r3, [pc, #52]	; (8008ffc <UART_SetConfig+0x4e4>)
 8008fc6:	fba3 1302 	umull	r1, r3, r3, r2
 8008fca:	095b      	lsrs	r3, r3, #5
 8008fcc:	2164      	movs	r1, #100	; 0x64
 8008fce:	fb01 f303 	mul.w	r3, r1, r3
 8008fd2:	1ad3      	subs	r3, r2, r3
 8008fd4:	011b      	lsls	r3, r3, #4
 8008fd6:	3332      	adds	r3, #50	; 0x32
 8008fd8:	4a08      	ldr	r2, [pc, #32]	; (8008ffc <UART_SetConfig+0x4e4>)
 8008fda:	fba2 2303 	umull	r2, r3, r2, r3
 8008fde:	095b      	lsrs	r3, r3, #5
 8008fe0:	f003 020f 	and.w	r2, r3, #15
 8008fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4422      	add	r2, r4
 8008fec:	609a      	str	r2, [r3, #8]
}
 8008fee:	bf00      	nop
 8008ff0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ffa:	bf00      	nop
 8008ffc:	51eb851f 	.word	0x51eb851f

08009000 <__errno>:
 8009000:	4b01      	ldr	r3, [pc, #4]	; (8009008 <__errno+0x8>)
 8009002:	6818      	ldr	r0, [r3, #0]
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
 8009008:	20000030 	.word	0x20000030

0800900c <__libc_init_array>:
 800900c:	b570      	push	{r4, r5, r6, lr}
 800900e:	4d0d      	ldr	r5, [pc, #52]	; (8009044 <__libc_init_array+0x38>)
 8009010:	4c0d      	ldr	r4, [pc, #52]	; (8009048 <__libc_init_array+0x3c>)
 8009012:	1b64      	subs	r4, r4, r5
 8009014:	10a4      	asrs	r4, r4, #2
 8009016:	2600      	movs	r6, #0
 8009018:	42a6      	cmp	r6, r4
 800901a:	d109      	bne.n	8009030 <__libc_init_array+0x24>
 800901c:	4d0b      	ldr	r5, [pc, #44]	; (800904c <__libc_init_array+0x40>)
 800901e:	4c0c      	ldr	r4, [pc, #48]	; (8009050 <__libc_init_array+0x44>)
 8009020:	f000 f90c 	bl	800923c <_init>
 8009024:	1b64      	subs	r4, r4, r5
 8009026:	10a4      	asrs	r4, r4, #2
 8009028:	2600      	movs	r6, #0
 800902a:	42a6      	cmp	r6, r4
 800902c:	d105      	bne.n	800903a <__libc_init_array+0x2e>
 800902e:	bd70      	pop	{r4, r5, r6, pc}
 8009030:	f855 3b04 	ldr.w	r3, [r5], #4
 8009034:	4798      	blx	r3
 8009036:	3601      	adds	r6, #1
 8009038:	e7ee      	b.n	8009018 <__libc_init_array+0xc>
 800903a:	f855 3b04 	ldr.w	r3, [r5], #4
 800903e:	4798      	blx	r3
 8009040:	3601      	adds	r6, #1
 8009042:	e7f2      	b.n	800902a <__libc_init_array+0x1e>
 8009044:	0800a214 	.word	0x0800a214
 8009048:	0800a214 	.word	0x0800a214
 800904c:	0800a214 	.word	0x0800a214
 8009050:	0800a218 	.word	0x0800a218

08009054 <memcpy>:
 8009054:	440a      	add	r2, r1
 8009056:	4291      	cmp	r1, r2
 8009058:	f100 33ff 	add.w	r3, r0, #4294967295
 800905c:	d100      	bne.n	8009060 <memcpy+0xc>
 800905e:	4770      	bx	lr
 8009060:	b510      	push	{r4, lr}
 8009062:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009066:	f803 4f01 	strb.w	r4, [r3, #1]!
 800906a:	4291      	cmp	r1, r2
 800906c:	d1f9      	bne.n	8009062 <memcpy+0xe>
 800906e:	bd10      	pop	{r4, pc}

08009070 <memset>:
 8009070:	4402      	add	r2, r0
 8009072:	4603      	mov	r3, r0
 8009074:	4293      	cmp	r3, r2
 8009076:	d100      	bne.n	800907a <memset+0xa>
 8009078:	4770      	bx	lr
 800907a:	f803 1b01 	strb.w	r1, [r3], #1
 800907e:	e7f9      	b.n	8009074 <memset+0x4>

08009080 <sqrt>:
 8009080:	b538      	push	{r3, r4, r5, lr}
 8009082:	ed2d 8b02 	vpush	{d8}
 8009086:	ec55 4b10 	vmov	r4, r5, d0
 800908a:	f000 f825 	bl	80090d8 <__ieee754_sqrt>
 800908e:	4622      	mov	r2, r4
 8009090:	462b      	mov	r3, r5
 8009092:	4620      	mov	r0, r4
 8009094:	4629      	mov	r1, r5
 8009096:	eeb0 8a40 	vmov.f32	s16, s0
 800909a:	eef0 8a60 	vmov.f32	s17, s1
 800909e:	f7f7 fce9 	bl	8000a74 <__aeabi_dcmpun>
 80090a2:	b990      	cbnz	r0, 80090ca <sqrt+0x4a>
 80090a4:	2200      	movs	r2, #0
 80090a6:	2300      	movs	r3, #0
 80090a8:	4620      	mov	r0, r4
 80090aa:	4629      	mov	r1, r5
 80090ac:	f7f7 fcba 	bl	8000a24 <__aeabi_dcmplt>
 80090b0:	b158      	cbz	r0, 80090ca <sqrt+0x4a>
 80090b2:	f7ff ffa5 	bl	8009000 <__errno>
 80090b6:	2321      	movs	r3, #33	; 0x21
 80090b8:	6003      	str	r3, [r0, #0]
 80090ba:	2200      	movs	r2, #0
 80090bc:	2300      	movs	r3, #0
 80090be:	4610      	mov	r0, r2
 80090c0:	4619      	mov	r1, r3
 80090c2:	f7f7 fb67 	bl	8000794 <__aeabi_ddiv>
 80090c6:	ec41 0b18 	vmov	d8, r0, r1
 80090ca:	eeb0 0a48 	vmov.f32	s0, s16
 80090ce:	eef0 0a68 	vmov.f32	s1, s17
 80090d2:	ecbd 8b02 	vpop	{d8}
 80090d6:	bd38      	pop	{r3, r4, r5, pc}

080090d8 <__ieee754_sqrt>:
 80090d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090dc:	ec55 4b10 	vmov	r4, r5, d0
 80090e0:	4e55      	ldr	r6, [pc, #340]	; (8009238 <__ieee754_sqrt+0x160>)
 80090e2:	43ae      	bics	r6, r5
 80090e4:	ee10 0a10 	vmov	r0, s0
 80090e8:	ee10 3a10 	vmov	r3, s0
 80090ec:	462a      	mov	r2, r5
 80090ee:	4629      	mov	r1, r5
 80090f0:	d110      	bne.n	8009114 <__ieee754_sqrt+0x3c>
 80090f2:	ee10 2a10 	vmov	r2, s0
 80090f6:	462b      	mov	r3, r5
 80090f8:	f7f7 fa22 	bl	8000540 <__aeabi_dmul>
 80090fc:	4602      	mov	r2, r0
 80090fe:	460b      	mov	r3, r1
 8009100:	4620      	mov	r0, r4
 8009102:	4629      	mov	r1, r5
 8009104:	f7f7 f866 	bl	80001d4 <__adddf3>
 8009108:	4604      	mov	r4, r0
 800910a:	460d      	mov	r5, r1
 800910c:	ec45 4b10 	vmov	d0, r4, r5
 8009110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009114:	2d00      	cmp	r5, #0
 8009116:	dc10      	bgt.n	800913a <__ieee754_sqrt+0x62>
 8009118:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800911c:	4330      	orrs	r0, r6
 800911e:	d0f5      	beq.n	800910c <__ieee754_sqrt+0x34>
 8009120:	b15d      	cbz	r5, 800913a <__ieee754_sqrt+0x62>
 8009122:	ee10 2a10 	vmov	r2, s0
 8009126:	462b      	mov	r3, r5
 8009128:	ee10 0a10 	vmov	r0, s0
 800912c:	f7f7 f850 	bl	80001d0 <__aeabi_dsub>
 8009130:	4602      	mov	r2, r0
 8009132:	460b      	mov	r3, r1
 8009134:	f7f7 fb2e 	bl	8000794 <__aeabi_ddiv>
 8009138:	e7e6      	b.n	8009108 <__ieee754_sqrt+0x30>
 800913a:	1512      	asrs	r2, r2, #20
 800913c:	d074      	beq.n	8009228 <__ieee754_sqrt+0x150>
 800913e:	07d4      	lsls	r4, r2, #31
 8009140:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009144:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009148:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800914c:	bf5e      	ittt	pl
 800914e:	0fda      	lsrpl	r2, r3, #31
 8009150:	005b      	lslpl	r3, r3, #1
 8009152:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009156:	2400      	movs	r4, #0
 8009158:	0fda      	lsrs	r2, r3, #31
 800915a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800915e:	107f      	asrs	r7, r7, #1
 8009160:	005b      	lsls	r3, r3, #1
 8009162:	2516      	movs	r5, #22
 8009164:	4620      	mov	r0, r4
 8009166:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800916a:	1886      	adds	r6, r0, r2
 800916c:	428e      	cmp	r6, r1
 800916e:	bfde      	ittt	le
 8009170:	1b89      	suble	r1, r1, r6
 8009172:	18b0      	addle	r0, r6, r2
 8009174:	18a4      	addle	r4, r4, r2
 8009176:	0049      	lsls	r1, r1, #1
 8009178:	3d01      	subs	r5, #1
 800917a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800917e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009182:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009186:	d1f0      	bne.n	800916a <__ieee754_sqrt+0x92>
 8009188:	462a      	mov	r2, r5
 800918a:	f04f 0e20 	mov.w	lr, #32
 800918e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009192:	4281      	cmp	r1, r0
 8009194:	eb06 0c05 	add.w	ip, r6, r5
 8009198:	dc02      	bgt.n	80091a0 <__ieee754_sqrt+0xc8>
 800919a:	d113      	bne.n	80091c4 <__ieee754_sqrt+0xec>
 800919c:	459c      	cmp	ip, r3
 800919e:	d811      	bhi.n	80091c4 <__ieee754_sqrt+0xec>
 80091a0:	f1bc 0f00 	cmp.w	ip, #0
 80091a4:	eb0c 0506 	add.w	r5, ip, r6
 80091a8:	da43      	bge.n	8009232 <__ieee754_sqrt+0x15a>
 80091aa:	2d00      	cmp	r5, #0
 80091ac:	db41      	blt.n	8009232 <__ieee754_sqrt+0x15a>
 80091ae:	f100 0801 	add.w	r8, r0, #1
 80091b2:	1a09      	subs	r1, r1, r0
 80091b4:	459c      	cmp	ip, r3
 80091b6:	bf88      	it	hi
 80091b8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80091bc:	eba3 030c 	sub.w	r3, r3, ip
 80091c0:	4432      	add	r2, r6
 80091c2:	4640      	mov	r0, r8
 80091c4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80091c8:	f1be 0e01 	subs.w	lr, lr, #1
 80091cc:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80091d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80091d4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80091d8:	d1db      	bne.n	8009192 <__ieee754_sqrt+0xba>
 80091da:	430b      	orrs	r3, r1
 80091dc:	d006      	beq.n	80091ec <__ieee754_sqrt+0x114>
 80091de:	1c50      	adds	r0, r2, #1
 80091e0:	bf13      	iteet	ne
 80091e2:	3201      	addne	r2, #1
 80091e4:	3401      	addeq	r4, #1
 80091e6:	4672      	moveq	r2, lr
 80091e8:	f022 0201 	bicne.w	r2, r2, #1
 80091ec:	1063      	asrs	r3, r4, #1
 80091ee:	0852      	lsrs	r2, r2, #1
 80091f0:	07e1      	lsls	r1, r4, #31
 80091f2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80091f6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80091fa:	bf48      	it	mi
 80091fc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009200:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009204:	4614      	mov	r4, r2
 8009206:	e781      	b.n	800910c <__ieee754_sqrt+0x34>
 8009208:	0ad9      	lsrs	r1, r3, #11
 800920a:	3815      	subs	r0, #21
 800920c:	055b      	lsls	r3, r3, #21
 800920e:	2900      	cmp	r1, #0
 8009210:	d0fa      	beq.n	8009208 <__ieee754_sqrt+0x130>
 8009212:	02cd      	lsls	r5, r1, #11
 8009214:	d50a      	bpl.n	800922c <__ieee754_sqrt+0x154>
 8009216:	f1c2 0420 	rsb	r4, r2, #32
 800921a:	fa23 f404 	lsr.w	r4, r3, r4
 800921e:	1e55      	subs	r5, r2, #1
 8009220:	4093      	lsls	r3, r2
 8009222:	4321      	orrs	r1, r4
 8009224:	1b42      	subs	r2, r0, r5
 8009226:	e78a      	b.n	800913e <__ieee754_sqrt+0x66>
 8009228:	4610      	mov	r0, r2
 800922a:	e7f0      	b.n	800920e <__ieee754_sqrt+0x136>
 800922c:	0049      	lsls	r1, r1, #1
 800922e:	3201      	adds	r2, #1
 8009230:	e7ef      	b.n	8009212 <__ieee754_sqrt+0x13a>
 8009232:	4680      	mov	r8, r0
 8009234:	e7bd      	b.n	80091b2 <__ieee754_sqrt+0xda>
 8009236:	bf00      	nop
 8009238:	7ff00000 	.word	0x7ff00000

0800923c <_init>:
 800923c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800923e:	bf00      	nop
 8009240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009242:	bc08      	pop	{r3}
 8009244:	469e      	mov	lr, r3
 8009246:	4770      	bx	lr

08009248 <_fini>:
 8009248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800924a:	bf00      	nop
 800924c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800924e:	bc08      	pop	{r3}
 8009250:	469e      	mov	lr, r3
 8009252:	4770      	bx	lr
